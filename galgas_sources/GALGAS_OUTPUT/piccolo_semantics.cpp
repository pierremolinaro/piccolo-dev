//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'piccolo_semantics.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      july 22th, 2008, at 17h45'51"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "piccolo_semantics.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_semantics.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction.decomposeComplexInstruction'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction__decomposeComplexInstruction (C_Compiler &,
                                const cPtr_instruction * operand_679,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_instructionList  & /* var_cas_ioGeneratedInstructionList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_679 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@instruction.decomposeComplexInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__instruction__decomposeComplexInstruction> gDispatchTableFor__instruction__decomposeComplexInstruction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__instruction__decomposeComplexInstruction (typeCategoryMethod__instruction__decomposeComplexInstruction inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__instruction__decomposeComplexInstruction.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__instruction__decomposeComplexInstruction
findCategoryMethod__instruction__decomposeComplexInstruction (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__instruction__decomposeComplexInstruction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__instruction__decomposeComplexInstruction.count ()) {
    result = gDispatchTableFor__instruction__decomposeComplexInstruction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__instruction__decomposeComplexInstruction (superClassPtr) ;
      gDispatchTableFor__instruction__decomposeComplexInstruction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_FOREVER.decomposeComplexInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FOREVER__decomposeComplexInstruction (C_Compiler & _inLexique,
                                const cPtr_instruction_FOREVER * operand_906,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_906 != NULL) {
    GGS_instruction  automatic_var_0 ;
    var_cas_ioGeneratedInstructionList.modifier_popLast (_inLexique, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (32)) ;
    GGS_string var_cas_label0 ;
    var_cas_label0 = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (33))) ;
    var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (34)) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label0, operand_906->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    {
      GGS_instructionList::cEnumerator enumerator_1255 (operand_906->mInstructionList, true) ;
      const GGS_instructionList::cElement * operand_1255 = NULL ;
      while (((operand_1255 = enumerator_1255.nextObject ()))) {
        macroValidPointer (operand_1255) ;
        var_cas_ioGeneratedInstructionList._addAssign_operation (operand_1255->mInstruction) ;
        const GGS_instruction  _temp_1343 = operand_1255->mInstruction ;
        if (_temp_1343._isBuilt ()) {
          typeCategoryMethod__instruction__decomposeComplexInstruction _method = findCategoryMethod__instruction__decomposeComplexInstruction (_temp_1343._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_1343 (HERE), var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (38)) ;
          }
        }
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_instruction_BRA ::constructor_new (_inLexique, operand_906->mInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_label0, operand_906->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@instruction_IF_FA_SEMI_COLON.decomposeComplexInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_FA_SEMI_COLON__decomposeComplexInstruction (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_FA_SEMI_COLON * operand_1682,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1682 != NULL) {
    GGS_instruction  automatic_var_1 ;
    var_cas_ioGeneratedInstructionList.modifier_popLast (_inLexique, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (49)) ;
    GGS_FA_instruction_base_code var_cas_baseCode ;
    switch (operand_1682->mOpCode.enumValue ()) {
    case GGS_if_semi_colon_op::enum_CPFSEQ:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSEQ (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_CPFSGT:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSGT (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_CPFSLT:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSLT (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_TSTFSZ:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_TSTFSZ (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::kNotBuilt:
      break ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_instruction_FA ::constructor_new (_inLexique, operand_1682->mInstructionLocation, var_cas_baseCode, operand_1682->mRegisterExpression COMMA_HERE)) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (operand_1682->mInstruction) ;
    const GGS_instruction  _temp_2385 = operand_1682->mInstruction ;
    if (_temp_2385._isBuilt ()) {
      typeCategoryMethod__instruction__decomposeComplexInstruction _method = findCategoryMethod__instruction__decomposeComplexInstruction (_temp_2385._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_2385 (HERE), var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (64)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_IF_BitTest.decomposeComplexInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_BitTest__decomposeComplexInstruction (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_BitTest * operand_2576,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2576 != NULL) {
    GGS_instruction  automatic_var_2 ;
    var_cas_ioGeneratedInstructionList.modifier_popLast (_inLexique, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (73)) ;
    GGS_bit_oriented_op var_cas_baseCode ;
    if ((operand_2576->mSkipIfSet).isBuiltAndTrue ()) {
      var_cas_baseCode = GGS_bit_oriented_op::constructor_BTFSS (_inLexique COMMA_HERE) ;
    }else{
      var_cas_baseCode = GGS_bit_oriented_op::constructor_BTFSC (_inLexique COMMA_HERE) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_instruction_FBA ::constructor_new (_inLexique, operand_2576->mInstructionLocation, var_cas_baseCode, operand_2576->mRegisterExpression, operand_2576->mBitNumber COMMA_HERE)) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (operand_2576->mInstruction) ;
    const GGS_instruction  _temp_3112 = operand_2576->mInstruction ;
    if (_temp_3112._isBuilt ()) {
      typeCategoryMethod__instruction__decomposeComplexInstruction _method = findCategoryMethod__instruction__decomposeComplexInstruction (_temp_3112._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_3112 (HERE), var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (88)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@structured_if_condition.decomposeIFcondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__structured_if_condition__decomposeIFcondition> gDispatchTableFor__structured_if_condition__decomposeIFcondition ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__structured_if_condition__decomposeIFcondition (typeCategoryMethod__structured_if_condition__decomposeIFcondition inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__structured_if_condition__decomposeIFcondition.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__structured_if_condition__decomposeIFcondition
findCategoryMethod__structured_if_condition__decomposeIFcondition (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__structured_if_condition__decomposeIFcondition result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__structured_if_condition__decomposeIFcondition.count ()) {
    result = gDispatchTableFor__structured_if_condition__decomposeIFcondition (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__structured_if_condition__decomposeIFcondition (superClassPtr) ;
      gDispatchTableFor__structured_if_condition__decomposeIFcondition.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@bcc_in_structured_if_condition.decomposeIFcondition'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bcc_in_structured_if_condition__decomposeIFcondition (C_Compiler & _inLexique,
                                const cPtr_bcc_in_structured_if_condition * operand_3542,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3542 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_instruction_conditionalBranch ::constructor_new (_inLexique, var_cas_inInstructionLocation, operand_3542->mCondition, GGS_lstring ::constructor_new (_inLexique, var_cas_inTargetLabel, var_cas_inInstructionLocation COMMA_HERE) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bitTest_in_structured_if_condition.decomposeIFcondition' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitTest_in_structured_if_condition__decomposeIFcondition (C_Compiler & _inLexique,
                                const cPtr_bitTest_in_structured_if_condition * operand_3973,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3973 != NULL) {
    GGS_bit_oriented_op var_cas_op ;
    if ((operand_3973->mBTFSSinstruction).isBuiltAndTrue ()) {
      var_cas_op = GGS_bit_oriented_op::constructor_BTFSS (_inLexique COMMA_HERE) ;
    }else{
      var_cas_op = GGS_bit_oriented_op::constructor_BTFSC (_inLexique COMMA_HERE) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_instruction_FBA ::constructor_new (_inLexique, var_cas_inInstructionLocation, var_cas_op, operand_3973->mRegisterExpression, operand_3973->mBitNumber COMMA_HERE)) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_instruction_BRA ::constructor_new (_inLexique, var_cas_inInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_inTargetLabel, var_cas_inInstructionLocation COMMA_HERE) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@instruction_structured_if.decomposeComplexInstruction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_structured_if__decomposeComplexInstruction (C_Compiler & _inLexique,
                                const cPtr_instruction_structured_if * operand_4635,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4635 != NULL) {
    GGS_instruction  automatic_var_3 ;
    var_cas_ioGeneratedInstructionList.modifier_popLast (_inLexique, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (142)) ;
    GGS_string var_cas_label0 ;
    var_cas_label0 = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (143))) ;
    var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (143)) ;
    GGS_string var_cas_label1 ;
    var_cas_label1 = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (144))) ;
    var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (144)) ;
    const GGS_structured_if_condition  _temp_5000 = operand_4635->mIfCondition ;
    if (_temp_5000._isBuilt ()) {
      typeCategoryMethod__structured_if_condition__decomposeIFcondition _method = findCategoryMethod__structured_if_condition__decomposeIFcondition (_temp_5000._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_5000 (HERE), operand_4635->mInstructionLocation, var_cas_label0, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (146)) ;
      }
    }
    {
      GGS_instructionList::cEnumerator enumerator_5118 (operand_4635->mThenInstructionList, true) ;
      const GGS_instructionList::cElement * operand_5118 = NULL ;
      while (((operand_5118 = enumerator_5118.nextObject ()))) {
        macroValidPointer (operand_5118) ;
        var_cas_ioGeneratedInstructionList._addAssign_operation (operand_5118->mInstruction) ;
        const GGS_instruction  _temp_5210 = operand_5118->mInstruction ;
        if (_temp_5210._isBuilt ()) {
          typeCategoryMethod__instruction__decomposeComplexInstruction _method = findCategoryMethod__instruction__decomposeComplexInstruction (_temp_5210._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_5210 (HERE), var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (150)) ;
          }
        }
      }
    }
    if (((operand_4635->mElseInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (152)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_instruction_BRA ::constructor_new (_inLexique, operand_4635->mInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_label1, operand_4635->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label0, operand_4635->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    {
      GGS_instructionList::cEnumerator enumerator_5625 (operand_4635->mElseInstructionList, true) ;
      const GGS_instructionList::cElement * operand_5625 = NULL ;
      while (((operand_5625 = enumerator_5625.nextObject ()))) {
        macroValidPointer (operand_5625) ;
        var_cas_ioGeneratedInstructionList._addAssign_operation (operand_5625->mInstruction) ;
        const GGS_instruction  _temp_5717 = operand_5625->mInstruction ;
        if (_temp_5717._isBuilt ()) {
          typeCategoryMethod__instruction__decomposeComplexInstruction _method = findCategoryMethod__instruction__decomposeComplexInstruction (_temp_5717._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_5717 (HERE), var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (159)) ;
          }
        }
      }
    }
    if (((operand_4635->mElseInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (161)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label1, operand_4635->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@instruction.buildAssemblyCode'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction * operand_6172,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & /* var_cas_ioString */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6172 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Virtual Table for category method '@instruction.buildAssemblyCode'     *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__instruction__buildAssemblyCode> gDispatchTableFor__instruction__buildAssemblyCode ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__instruction__buildAssemblyCode (typeCategoryMethod__instruction__buildAssemblyCode inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__instruction__buildAssemblyCode.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__instruction__buildAssemblyCode
findCategoryMethod__instruction__buildAssemblyCode (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__instruction__buildAssemblyCode result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__instruction__buildAssemblyCode.count ()) {
    result = gDispatchTableFor__instruction__buildAssemblyCode (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__instruction__buildAssemblyCode (superClassPtr) ;
      gDispatchTableFor__instruction__buildAssemblyCode.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@pseudo_ORG.buildAssemblyCode'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__pseudo_ORG__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_pseudo_ORG * operand_6360,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6360 != NULL) {
    var_cas_ioString.writeString ("  ORG ") ;
    var_cas_ioString._dotAssign_operation (operand_6360->mOrigin.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (181))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@pseudo_LABEL.buildAssemblyCode'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__pseudo_LABEL__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_pseudo_LABEL * operand_6597,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6597 != NULL) {
    var_cas_ioString._dotAssign_operation (operand_6597->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (190))) ;
    var_cas_ioString.writeString (":\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@registerExpression.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_6823,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString,
                                GGS_bool & var_cas_outUseBSRregister,
                                GGS_bitSliceTable  & var_cas_outBitSliceTable
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6823 != NULL) {
    var_cas_ioString._dotAssign_operation (operand_6823->mRegisterName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (201))) ;
    if (((operand_6823->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (202)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (" + ") ;
      var_cas_ioString._dotAssign_operation (operand_6823->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (203)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (203))) ;
    }
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  var_cas_size ;
    const GGS_registerTable  _temp_7160 = var_cas_inRegisterTable ;
    if (_temp_7160._isBuilt ()) {
      _temp_7160 (HERE)->method_searchKey (_inLexique, operand_6823->mRegisterName, var_cas_registerAddressList, var_cas_size, var_cas_outBitSliceTable COMMA_SOURCE_FILE_AT_LINE (207)) ;
    }
    GGS_bool var_cas_found ;
    var_cas_found = GGS_bool (true, false) ;
    {
      GGS_uintlist::cEnumerator enumerator_7268 (var_cas_registerAddressList, true) ;
      const GGS_uintlist::cElement * operand_7268 = NULL ;
      while (((operand_7268 = enumerator_7268.nextObject ()))
          && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_7268) ;
        var_cas_found = ((operand_7268->mValue)._operator_strictInf (GGS_uint (true, 96U)))._operator_or ((operand_7268->mValue)._operator_supOrEqual (GGS_uint (true, 3936U))) ;
      }
    }
    var_cas_outUseBSRregister = GGS_bool (true, false) ;
    if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_outUseBSRregister = GGS_bool (true, true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@registerExpression.buildAssemblyCode'  *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__buildAssemblyCode> gDispatchTableFor__registerExpression__buildAssemblyCode ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__buildAssemblyCode (typeCategoryMethod__registerExpression__buildAssemblyCode inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__buildAssemblyCode.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__buildAssemblyCode
findCategoryMethod__registerExpression__buildAssemblyCode (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__buildAssemblyCode result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__buildAssemblyCode.count ()) {
    result = gDispatchTableFor__registerExpression__buildAssemblyCode (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__buildAssemblyCode (superClassPtr) ;
      gDispatchTableFor__registerExpression__buildAssemblyCode.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@instruction_FDA.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FDA__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_FDA * operand_7572,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7572 != NULL) {
    GGS_bool var_cas_useBSRaccess ;
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_7572->mInstruction_FDA_base_code.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (227))) ;
    var_cas_ioString.writeString (" ") ;
    GGS_bitSliceTable  automatic_var_4 ;
    const GGS_registerExpression  _temp_7949 = operand_7572->mRegisterExpression ;
    if (_temp_7949._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_7949._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_7949 (HERE), var_cas_inRegisterTable, var_cas_ioString, var_cas_useBSRaccess, automatic_var_4 COMMA_SOURCE_FILE_AT_LINE (229)) ;
      }
    }
    if (((operand_7572->m_W_isDestination)._operator_and (var_cas_useBSRaccess)).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", W, BSR_ACCESS") ;
    }else if ((var_cas_useBSRaccess).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", F, BSR_ACCESS") ;
    }else if ((operand_7572->m_W_isDestination).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", W") ;
    }else{
      var_cas_ioString.writeString (", F") ;
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_MOVFF.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVFF__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVFF * operand_8380,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8380 != NULL) {
    var_cas_ioString.writeString ("  MOVFF ") ;
    GGS_bool automatic_var_5 ;
    GGS_bitSliceTable  automatic_var_6 ;
    const GGS_registerExpression  _temp_8505 = operand_8380->mSourceRegisterName ;
    if (_temp_8505._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_8505._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_8505 (HERE), var_cas_inRegisterTable, var_cas_ioString, automatic_var_5, automatic_var_6 COMMA_SOURCE_FILE_AT_LINE (249)) ;
      }
    }
    var_cas_ioString.writeString (", ") ;
    GGS_bool automatic_var_7 ;
    GGS_bitSliceTable  automatic_var_8 ;
    const GGS_registerExpression  _temp_8609 = operand_8380->mDestinationRegisterName ;
    if (_temp_8609._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_8609._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_8609 (HERE), var_cas_inRegisterTable, var_cas_ioString, automatic_var_7, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (251)) ;
      }
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Virtual Table for category method '@bitNumberExpression.getBitNumber'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__bitNumberExpression__getBitNumber> gDispatchTableFor__bitNumberExpression__getBitNumber ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__bitNumberExpression__getBitNumber (typeCategoryMethod__bitNumberExpression__getBitNumber inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__bitNumberExpression__getBitNumber.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__bitNumberExpression__getBitNumber
findCategoryMethod__bitNumberExpression__getBitNumber (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__bitNumberExpression__getBitNumber result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__bitNumberExpression__getBitNumber.count ()) {
    result = gDispatchTableFor__bitNumberExpression__getBitNumber (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__bitNumberExpression__getBitNumber (superClassPtr) ;
      gDispatchTableFor__bitNumberExpression__getBitNumber.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@bitNumberLiteralValue.getBitNumber'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLiteralValue__getBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLiteralValue * operand_9009,
                                const GGS_bitSliceTable   /* var_cas_inBitSliceTable */,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9009 != NULL) {
    if (((operand_9009->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (268)))._operator_strictSup (GGS_uint (true, 7U))).isBuiltAndTrue ()) {
      operand_9009->mBitNumberLiteralValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "The bit number is "))._operator_concat (operand_9009->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (269)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (269))))._operator_concat (GGS_string (true, " (should be <= 7)")) COMMA_SOURCE_FILE_AT_LINE (269)) ;
    }
    var_cas_outBitNumber = operand_9009->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (271)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@bitNumberLabelValue.getBitNumber'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLabelValue__getBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLabelValue * operand_9443,
                                const GGS_bitSliceTable   var_cas_inBitSliceTable,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9443 != NULL) {
    GGS_uint  var_cas_sliceIndex ;
    GGS_uint  var_cas_sliceSize ;
    const GGS_bitSliceTable  _temp_9574 = var_cas_inBitSliceTable ;
    if (_temp_9574._isBuilt ()) {
      _temp_9574 (HERE)->method_searchKey (_inLexique, operand_9443->mBitNumberLabelValue, var_cas_sliceIndex, var_cas_sliceSize COMMA_SOURCE_FILE_AT_LINE (282)) ;
    }
    if (((operand_9443->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (283)))._operator_strictSup (var_cas_sliceSize)).isBuiltAndTrue ()) {
      operand_9443->mBitNumberIndexValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "The "))._operator_concat (operand_9443->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (284)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (284))))._operator_concat (GGS_string (true, " index is too large (should be < ")))._operator_concat (var_cas_sliceSize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (285))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (285)) ;
    }
    var_cas_outBitNumber = var_cas_sliceIndex._add_operation (_inLexique, operand_9443->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (287)) COMMA_SOURCE_FILE_AT_LINE (287)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@instruction_FBA.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FBA__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_FBA * operand_10008,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10008 != NULL) {
    GGS_bool var_cas_useBSRaccess ;
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_10008->mBitOrientedOp.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (297))) ;
    var_cas_ioString.writeString (" ") ;
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    const GGS_registerExpression  _temp_10217 = operand_10008->mRegisterExpression ;
    if (_temp_10217._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_10217._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_10217 (HERE), var_cas_inRegisterTable, var_cas_ioString, var_cas_useBSRaccess, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (299)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_10329 = operand_10008->mBitNumber ;
    if (_temp_10329._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_10329._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_10329 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (301)) ;
      }
    }
    var_cas_ioString.writeString (", ") ;
    var_cas_ioString._dotAssign_operation (var_cas_bitNumber.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (302))) ;
    if ((var_cas_useBSRaccess).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", BSR_ACCESS") ;
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@instruction_FA.buildAssemblyCode'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FA__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_FA * operand_10604,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10604 != NULL) {
    GGS_bool var_cas_useBSRaccess ;
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_10604->mFAinstruction.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (316))) ;
    var_cas_ioString.writeString (" ") ;
    GGS_bitSliceTable  automatic_var_9 ;
    const GGS_registerExpression  _temp_10780 = operand_10604->mRegisterExpression ;
    if (_temp_10780._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_10780._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_10780 (HERE), var_cas_inRegisterTable, var_cas_ioString, var_cas_useBSRaccess, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (317)) ;
      }
    }
    if ((var_cas_useBSRaccess).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", BSR_ACCESS") ;
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_conditionalBranch.buildAssemblyCode'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_conditionalBranch__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_conditionalBranch * operand_11052,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11052 != NULL) {
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_11052->mConditionalBranch.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (330))) ;
    var_cas_ioString.writeString (" ") ;
    var_cas_ioString._dotAssign_operation (operand_11052->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (330))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@instruction_BRA.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_BRA__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_BRA * operand_11328,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11328 != NULL) {
    var_cas_ioString.writeString ("  BRA  ") ;
    var_cas_ioString._dotAssign_operation (operand_11328->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (339))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_CALL.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CALL__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_CALL * operand_11572,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11572 != NULL) {
    var_cas_ioString.writeString ("  CALL ") ;
    var_cas_ioString._dotAssign_operation (operand_11572->mTargetLabel) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_GOTO.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_GOTO__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_GOTO * operand_11807,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11807 != NULL) {
    var_cas_ioString.writeString ("  GOTO ") ;
    var_cas_ioString._dotAssign_operation (operand_11807->mTargetLabel) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_RCALL.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RCALL__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_RCALL * operand_12043,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12043 != NULL) {
    var_cas_ioString.writeString ("  RCALL ") ;
    var_cas_ioString._dotAssign_operation (operand_12043->mTargetLabel) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_CLRWDT.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CLRWDT__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_CLRWDT * operand_12281,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12281 != NULL) {
    var_cas_ioString.writeString ("  CLRWDT\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@instruction_DAW.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_DAW__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_DAW * operand_12496,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12496 != NULL) {
    var_cas_ioString.writeString ("  DAW\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@instruction_NOP.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_NOP__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_NOP * operand_12708,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12708 != NULL) {
    var_cas_ioString.writeString ("  NOP\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@instruction_POP.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_POP__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_POP * operand_12920,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12920 != NULL) {
    var_cas_ioString.writeString ("  POP\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_PUSH.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_PUSH__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_PUSH * operand_13133,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13133 != NULL) {
    var_cas_ioString.writeString ("  PUSH\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_RESET.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RESET__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_RESET * operand_13348,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13348 != NULL) {
    var_cas_ioString.writeString ("  RESET\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_RETURN.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RETURN__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_RETURN * operand_13565,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13565 != NULL) {
    var_cas_ioString.writeString ("  RETURN\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_RETFIE.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RETFIE__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_RETFIE * operand_13784,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13784 != NULL) {
    var_cas_ioString.writeString ("  RETFIE") ;
    if ((operand_13784->mFastReturn).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (" 1") ;
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_SLEEP.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_SLEEP__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_SLEEP * operand_14077,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14077 != NULL) {
    var_cas_ioString.writeString ("  SLEEP\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_literalOperation.buildAssemblyCode'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_literalOperation__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_literalOperation * operand_14304,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14304 != NULL) {
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_14304->mLiteralInstruction.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (460))) ;
    var_cas_ioString.writeString (" ") ;
    var_cas_ioString._dotAssign_operation (operand_14304->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (460)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (460))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_LFSR.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LFSR__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_LFSR * operand_14594,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14594 != NULL) {
    var_cas_ioString.writeString ("  LFSR ") ;
    var_cas_ioString._dotAssign_operation (operand_14594->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (469)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (469))) ;
    var_cas_ioString.writeString (", ") ;
    GGS_bool automatic_var_10 ;
    GGS_bitSliceTable  automatic_var_11 ;
    const GGS_registerExpression  _temp_14753 = operand_14594->mRegisterExpression ;
    if (_temp_14753._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_14753._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_14753 (HERE), var_cas_inRegisterTable, var_cas_ioString, automatic_var_10, automatic_var_11 COMMA_SOURCE_FILE_AT_LINE (470)) ;
      }
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_MOVAW.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVAW__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVAW * operand_14956,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14956 != NULL) {
    var_cas_ioString.writeString ("  MOVLW ") ;
    GGS_bool automatic_var_12 ;
    GGS_bitSliceTable  automatic_var_13 ;
    const GGS_registerExpression  _temp_15081 = operand_14956->mRegisterExpression ;
    if (_temp_15081._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_15081._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_15081 (HERE), var_cas_inRegisterTable, var_cas_ioString, automatic_var_12, automatic_var_13 COMMA_SOURCE_FILE_AT_LINE (486)) ;
      }
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_MNOP.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MNOP__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_MNOP * operand_15282,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15282 != NULL) {
    if (((operand_15282->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (501)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      operand_15282->mOccurrenceFactor.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "No generated code") COMMA_SOURCE_FILE_AT_LINE (502)) ;
    }
    GGS_uint  var_cas_idx ;
    var_cas_idx = GGS_uint (true, 0U) ;
    GGS_uint _variant_15606 = operand_15282->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (505)) ;
    GGS_bool _condition_15606 (_variant_15606._isBuilt (), true) ;
    while (_condition_15606.isBuiltAndTrue ()) {
      _condition_15606 = (var_cas_idx)._operator_strictInf (operand_15282->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (506))) ;
      if (_condition_15606.isBuiltAndTrue ()) {
        if (_variant_15606.uintValue () == 0) {
          _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (509)) ;
          _condition_15606 = GGS_bool (true, false) ;
        }else{
          _variant_15606._decrement_operation (_inLexique COMMA_HERE) ;
          var_cas_ioString.writeString ("  NOP\n") ;
          var_cas_idx._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (509)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_TBLRD.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLRD__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_TBLRD * operand_15725,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15725 != NULL) {
    var_cas_ioString.writeString ("  TBLRD ") ;
    var_cas_ioString._dotAssign_operation (operand_15725->mOption.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (519))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_TBLWT.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLWT__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_TBLWT * operand_15968,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15968 != NULL) {
    var_cas_ioString.writeString ("  TBLWT ") ;
    var_cas_ioString._dotAssign_operation (operand_15968->mOption.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (528))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_computed_retlw.buildAssemblyCode'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_retlw__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_retlw * operand_16220,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16220 != NULL) {
    if ((operand_16220->mUsesRelativeCall).isBuiltAndTrue ()) {
      var_cas_ioString.writeString ("  RCALL _computed_goto_2\n") ;
    }else{
      var_cas_ioString.writeString ("  CALL _computed_goto_2\n") ;
    }
    {
      GGS_luintlist::cEnumerator enumerator_16451 (operand_16220->mLiteralValues, true) ;
      const GGS_luintlist::cElement * operand_16451 = NULL ;
      while (((operand_16451 = enumerator_16451.nextObject ()))) {
        macroValidPointer (operand_16451) ;
        var_cas_ioString.writeString ("  RETLW ") ;
        var_cas_ioString._dotAssign_operation (operand_16451->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (543)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (543))) ;
        var_cas_ioString.writeString ("\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_computed_bra.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_bra__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_bra * operand_16662,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16662 != NULL) {
    if ((operand_16662->mUsesRelativeCall).isBuiltAndTrue ()) {
      var_cas_ioString.writeString ("  RCALL _computed_goto_2\n") ;
    }else{
      var_cas_ioString.writeString ("  CALL _computed_goto_2\n") ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_16893 (operand_16662->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_16893 = NULL ;
      while (((operand_16893 = enumerator_16893.nextObject ()))) {
        macroValidPointer (operand_16893) ;
        var_cas_ioString.writeString ("  BRA ") ;
        var_cas_ioString._dotAssign_operation (operand_16893->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (559))) ;
        var_cas_ioString.writeString ("\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_computed_goto.buildAssemblyCode'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_goto__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_goto * operand_17092,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17092 != NULL) {
    if ((operand_17092->mUsesRelativeCall).isBuiltAndTrue ()) {
      var_cas_ioString.writeString ("  RCALL _computed_goto_4\n") ;
    }else{
      var_cas_ioString.writeString ("  CALL _computed_goto_4\n") ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_17323 (operand_17092->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_17323 = NULL ;
      while (((operand_17323 = enumerator_17323.nextObject ()))) {
        macroValidPointer (operand_17323) ;
        var_cas_ioString.writeString ("  GOTO ") ;
        var_cas_ioString._dotAssign_operation (operand_17323->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (575))) ;
        var_cas_ioString.writeString ("\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "buildAssemblyCode"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildAssemblyCode (C_Compiler & _inLexique,
                                const GGS_string  var_cas_inProcessorName,
                                const GGS_registerTable   var_cas_inPredefinedRegisters,
                                const GGS_registerTable   var_cas_inAllRegisters,
                                const GGS_instructionList   var_cas_inInstructionList,
                                GGS_string & var_cas_outAssemblyCode COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildAssemblyCode at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outAssemblyCode = ((GGS_string (true, "  PROCESSOR "))._operator_concat (var_cas_inProcessorName))._operator_concat (GGS_string (true, "\n")) ;
  var_cas_outAssemblyCode.writeString (";--- Prefefined registers\n") ;
  {
    GGS_registerTable::cEnumerator enumerator_17826 (var_cas_inPredefinedRegisters, true) ;
    const GGS_registerTable::cElement * operand_17826 = NULL ;
    while (((operand_17826 = enumerator_17826.nextObject ()))) {
      macroValidPointer (operand_17826) ;
      GGS_uint  var_cas_firstRegister ;
      const GGS_uintlist  _temp_17899 = operand_17826->mInfo.mRegisterAddressList ;
      if (_temp_17899._isBuilt ()) {
        _temp_17899 (HERE)->method_first (_inLexique, var_cas_firstRegister COMMA_SOURCE_FILE_AT_LINE (592)) ;
      }
      var_cas_outAssemblyCode._dotAssign_operation (operand_17826->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (593))) ;
      var_cas_outAssemblyCode.writeString (" EQU ") ;
      var_cas_outAssemblyCode._dotAssign_operation (var_cas_firstRegister.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (593))) ;
      var_cas_outAssemblyCode.writeString ("\n") ;
    }
  }
  var_cas_outAssemblyCode.writeString (";--- User defined registers (in RAM)\n") ;
  {
    GGS_registerTable::cEnumerator enumerator_18131 (var_cas_inAllRegisters, true) ;
    const GGS_registerTable::cElement * operand_18131 = NULL ;
    while (((operand_18131 = enumerator_18131.nextObject ()))) {
      macroValidPointer (operand_18131) ;
      if (((var_cas_inPredefinedRegisters.reader_hasKey (_inLexique, operand_18131->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (598)) COMMA_SOURCE_FILE_AT_LINE (598)))._operator_not ()).isBuiltAndTrue ()) {
        GGS_uint  var_cas_firstRegister ;
        const GGS_uintlist  _temp_18260 = operand_18131->mInfo.mRegisterAddressList ;
        if (_temp_18260._isBuilt ()) {
          _temp_18260 (HERE)->method_first (_inLexique, var_cas_firstRegister COMMA_SOURCE_FILE_AT_LINE (599)) ;
        }
        var_cas_outAssemblyCode._dotAssign_operation (operand_18131->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (600))) ;
        var_cas_outAssemblyCode.writeString (" EQU ") ;
        var_cas_outAssemblyCode._dotAssign_operation (var_cas_firstRegister.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (600))) ;
        var_cas_outAssemblyCode.writeString ("\n") ;
      }
    }
  }
  var_cas_outAssemblyCode.writeString (";--- Piccolo defined symbols\n") ;
  var_cas_outAssemblyCode.writeString ("F EQU 0\n") ;
  var_cas_outAssemblyCode.writeString ("W EQU 1\n") ;
  var_cas_outAssemblyCode.writeString ("BSR_ACCESS EQU 1\n") ;
  var_cas_outAssemblyCode.writeString (";--- Code\n") ;
  var_cas_outAssemblyCode.writeString ("  ORG 0\n") ;
  {
    GGS_instructionList::cEnumerator enumerator_18689 (var_cas_inInstructionList, true) ;
    const GGS_instructionList::cElement * operand_18689 = NULL ;
    while (((operand_18689 = enumerator_18689.nextObject ()))) {
      macroValidPointer (operand_18689) ;
      const GGS_instruction  _temp_18728 = operand_18689->mInstruction ;
      if (_temp_18728._isBuilt ()) {
        typeCategoryMethod__instruction__buildAssemblyCode _method = findCategoryMethod__instruction__buildAssemblyCode (_temp_18728._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_18728 (HERE), var_cas_inAllRegisters, var_cas_outAssemblyCode COMMA_SOURCE_FILE_AT_LINE (612)) ;
        }
      }
    }
  }
  var_cas_outAssemblyCode.writeString ("\n") ;
  var_cas_outAssemblyCode.writeString (";---\n"
    "\n") ;
  var_cas_outAssemblyCode.writeString ("  END\n"
    "\n") ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildAssemblyCode\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "checkCurrentEmitAddress"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkCurrentEmitAddress (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inCurrentAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkCurrentEmitAddress at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_addr ;
  ::routine_currentEmitAddress (_inLexique,  var_cas_addr COMMA_SOURCE_FILE_AT_LINE (624)) ;
  if ((((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U)))._operator_and ((var_cas_addr)._operator_isNotEqual (var_cas_inCurrentAddress))).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (((GGS_string (true, "internal error: current emit address is "))._operator_concat (var_cas_addr.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (626))))._operator_concat (GGS_string (true, "; it should be ")))._operator_concat (var_cas_inCurrentAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (627))) COMMA_SOURCE_FILE_AT_LINE (627)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkCurrentEmitAddress\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'e_routineSymbolTable'                        *
//                                                                           *
//---------------------------------------------------------------------------*

e_routineSymbolTable::e_routineSymbolTable (void) :
mRoutineAddress (),
mRequiredSelectedBank () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     class map '@routineSymbolTable'                       *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_routineSymbolTable::
elementOf_GGS_routineSymbolTable (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_routineSymbolTable & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_routineSymbolTable::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mRoutineAddress.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mRequiredSelectedBank.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_routineSymbolTable::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_routineSymbolTable * _p = dynamic_cast <const elementOf_GGS_routineSymbolTable *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.mRoutineAddress._operator_isEqual (_p->mInfo.mRoutineAddress)).boolValue ()
           && (mInfo.mRequiredSelectedBank._operator_isEqual (_p->mInfo.mRequiredSelectedBank)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_routineSymbolTable::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_routineSymbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_routineSymbolTable * info = (e_routineSymbolTable *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_routineSymbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_routineSymbolTable * info = (e_routineSymbolTable *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_routineSymbolTable GGS_routineSymbolTable::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineSymbolTable result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_routineSymbolTable info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineSymbolTable::
_operator_isEqual (const GGS_routineSymbolTable & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineSymbolTable::
_operator_isNotEqual (const GGS_routineSymbolTable & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_uint & inParameter0,
                const GGS_uint & inParameter1,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inParameter1._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_routineSymbolTable info  ;
    info.mRoutineAddress = inParameter0 ;
    info.mRequiredSelectedBank = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_uint   & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    outParameter1._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mRoutineAddress ;
    outParameter1 = node->mInfo.mRequiredSelectedBank ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
modifier_setMRoutineAddressForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMRoutineAddressForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mRoutineAddress = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
modifier_setMRequiredSelectedBankForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMRequiredSelectedBankForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mRequiredSelectedBank = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0,
                                GGS_uint   & outParameter1 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "the '%K' routine is not declared",
                  inKey,
                  outParameter0,
                  outParameter1,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
modifier_insertKey (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0,
                                const GGS_uint & inParameter1 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "the '%K' routine is already declared in %L",
                 inKey,
                 inParameter0,
                 inParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_routineSymbolTable GGS_routineSymbolTable::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_routineSymbolTable & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineSymbolTable result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_routineSymbolTable GGS_routineSymbolTable::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_routineSymbolTable result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_routineSymbolTable::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @routineSymbolTable " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_routineSymbolTable::cEnumerator::_mRoutineAddress (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRoutineAddress ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_routineSymbolTable::cEnumerator::_mRequiredSelectedBank (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRequiredSelectedBank ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@instruction.enterLabelAtAddress'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction__enterLabelAtAddress (C_Compiler &,
                                const cPtr_instruction * operand_19774,
                                GGS_routineSymbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_uint  & /* var_cas_ioCurrentlySelectedBank */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19774 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Virtual Table for category method '@instruction.enterLabelAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__instruction__enterLabelAtAddress> gDispatchTableFor__instruction__enterLabelAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__instruction__enterLabelAtAddress (typeCategoryMethod__instruction__enterLabelAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__instruction__enterLabelAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__instruction__enterLabelAtAddress
findCategoryMethod__instruction__enterLabelAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__instruction__enterLabelAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__instruction__enterLabelAtAddress.count ()) {
    result = gDispatchTableFor__instruction__enterLabelAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__instruction__enterLabelAtAddress (superClassPtr) ;
      gDispatchTableFor__instruction__enterLabelAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@pseudo_LABEL.enterLabelAtAddress'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__pseudo_LABEL__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_pseudo_LABEL * operand_20016,
                                GGS_routineSymbolTable  & var_cas_ioRoutineSymbolTable,
                                const GGS_uint   var_cas_inAddress,
                                GGS_uint  & var_cas_ioCurrentlySelectedBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20016 != NULL) {
    var_cas_ioRoutineSymbolTable.modifier_insertKey (_inLexique, operand_20016->mTargetLabel, var_cas_inAddress, var_cas_ioCurrentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (657)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_FOREVER.enterLabelAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FOREVER__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FOREVER * operand_20333,
                                GGS_routineSymbolTable  & var_cas_ioRoutineSymbolTable,
                                const GGS_uint   var_cas_inAddress,
                                GGS_uint  & var_cas_ioCurrentlySelectedBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20333 != NULL) {
    GGS_uint  var_cas_address ;
    var_cas_address = var_cas_inAddress ;
    {
      GGS_instructionList::cEnumerator enumerator_20494 (operand_20333->mInstructionList, true) ;
      const GGS_instructionList::cElement * operand_20494 = NULL ;
      while (((operand_20494 = enumerator_20494.nextObject ()))) {
        macroValidPointer (operand_20494) ;
        const GGS_instruction  _temp_20532 = operand_20494->mInstruction ;
        if (_temp_20532._isBuilt ()) {
          typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_20532._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_20532 (HERE), var_cas_ioRoutineSymbolTable, var_cas_address, var_cas_ioCurrentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (670)) ;
          }
        }
        GGS_uint  var_cas_lg ;
        const GGS_instruction  _temp_20665 = operand_20494->mInstruction ;
        if (_temp_20665._isBuilt ()) {
          _temp_20665 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (675)) ;
        }
        var_cas_address = var_cas_address._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (676)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_structured_if.enterLabelAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_structured_if__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_structured_if * operand_20850,
                                GGS_routineSymbolTable  & var_cas_ioRoutineSymbolTable,
                                const GGS_uint   var_cas_inAddress,
                                GGS_uint  & var_cas_ioCurrentlySelectedBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20850 != NULL) {
    GGS_uint  var_cas_conditionLength ;
    const GGS_structured_if_condition  _temp_21034 = operand_20850->mIfCondition ;
    if (_temp_21034._isBuilt ()) {
      _temp_21034 (HERE)->method_conditionLength (_inLexique, var_cas_conditionLength COMMA_SOURCE_FILE_AT_LINE (690)) ;
    }
    GGS_uint  var_cas_address ;
    var_cas_address = var_cas_inAddress._add_operation (_inLexique, var_cas_conditionLength COMMA_SOURCE_FILE_AT_LINE (691)) ;
    {
      GGS_instructionList::cEnumerator enumerator_21130 (operand_20850->mThenInstructionList, true) ;
      const GGS_instructionList::cElement * operand_21130 = NULL ;
      while (((operand_21130 = enumerator_21130.nextObject ()))) {
        macroValidPointer (operand_21130) ;
        const GGS_instruction  _temp_21172 = operand_21130->mInstruction ;
        if (_temp_21172._isBuilt ()) {
          typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_21172._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_21172 (HERE), var_cas_ioRoutineSymbolTable, var_cas_address, var_cas_ioCurrentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (693)) ;
          }
        }
        GGS_uint  var_cas_lg ;
        const GGS_instruction  _temp_21305 = operand_21130->mInstruction ;
        if (_temp_21305._isBuilt ()) {
          _temp_21305 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (698)) ;
        }
        var_cas_address = var_cas_address._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (699)) ;
      }
    }
    if (((operand_20850->mElseInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (701)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      var_cas_address = var_cas_address._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (702)) ;
    }
    {
      GGS_instructionList::cEnumerator enumerator_21499 (operand_20850->mElseInstructionList, true) ;
      const GGS_instructionList::cElement * operand_21499 = NULL ;
      while (((operand_21499 = enumerator_21499.nextObject ()))) {
        macroValidPointer (operand_21499) ;
        const GGS_instruction  _temp_21541 = operand_21499->mInstruction ;
        if (_temp_21541._isBuilt ()) {
          typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_21541._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_21541 (HERE), var_cas_ioRoutineSymbolTable, var_cas_address, var_cas_ioCurrentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (705)) ;
          }
        }
        GGS_uint  var_cas_lg ;
        const GGS_instruction  _temp_21674 = operand_21499->mInstruction ;
        if (_temp_21674._isBuilt ()) {
          _temp_21674 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (710)) ;
        }
        var_cas_address = var_cas_address._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (711)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of 'codeGenerationContext' struct              *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_codeGenerationContext::GGS_codeGenerationContext (void) :
mRoutineSymbolTable (),
mRegisterTable (),
mCurrentBank (),
mComputedGoto2RoutineAddress (),
mComputedGoto4RoutineAddress () {
}

//---------------------------------------------------------------------------*

GGS_codeGenerationContext::~GGS_codeGenerationContext (void) {
}

//---------------------------------------------------------------------------*

void GGS_codeGenerationContext::_drop (void) {
  mRoutineSymbolTable._drop () ;
  mRegisterTable._drop () ;
  mCurrentBank._drop () ;
  mComputedGoto2RoutineAddress._drop () ;
  mComputedGoto4RoutineAddress._drop () ;
}

//---------------------------------------------------------------------------*

bool GGS_codeGenerationContext::_isBuilt (void) const {
  return mRoutineSymbolTable._isBuilt ()
    && mRegisterTable._isBuilt ()
    && mCurrentBank._isBuilt ()
    && mComputedGoto2RoutineAddress._isBuilt ()
    && mComputedGoto4RoutineAddress._isBuilt () ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_codeGenerationContext::
_operator_isEqual (const GGS_codeGenerationContext & inOperand) const {
  return mRoutineSymbolTable._operator_isEqual (inOperand.mRoutineSymbolTable)
    ._operator_and (mRegisterTable._operator_isEqual (inOperand.mRegisterTable))
    ._operator_and (mCurrentBank._operator_isEqual (inOperand.mCurrentBank))
    ._operator_and (mComputedGoto2RoutineAddress._operator_isEqual (inOperand.mComputedGoto2RoutineAddress))
    ._operator_and (mComputedGoto4RoutineAddress._operator_isEqual (inOperand.mComputedGoto4RoutineAddress)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_codeGenerationContext::
_operator_isNotEqual (const GGS_codeGenerationContext & inOperand) const {
  return mRoutineSymbolTable._operator_isNotEqual (inOperand.mRoutineSymbolTable)
    ._operator_or (mRegisterTable._operator_isNotEqual (inOperand.mRegisterTable))
    ._operator_or (mCurrentBank._operator_isNotEqual (inOperand.mCurrentBank))
    ._operator_or (mComputedGoto2RoutineAddress._operator_isNotEqual (inOperand.mComputedGoto2RoutineAddress))
    ._operator_or (mComputedGoto4RoutineAddress._operator_isNotEqual (inOperand.mComputedGoto4RoutineAddress)) ;
}

//---------------------------------------------------------------------------*

GGS_codeGenerationContext GGS_codeGenerationContext::
constructor_new (const GGS_routineSymbolTable & argument_0,
                 const GGS_registerTable & argument_1,
                 const GGS_uint & argument_2,
                 const GGS_uint & argument_3,
                 const GGS_uint & argument_4) {
  GGS_codeGenerationContext result ;
  result.mRoutineSymbolTable = argument_0 ;
  result.mRegisterTable = argument_1 ;
  result.mCurrentBank = argument_2 ;
  result.mComputedGoto2RoutineAddress = argument_3 ;
  result.mComputedGoto4RoutineAddress = argument_4 ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_codeGenerationContext::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String _s ;
  _s << "<struct @codeGenerationContext" ;
  if (_isBuilt ()) {
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mRoutineSymbolTable " ;
    _s << mRoutineSymbolTable.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mRegisterTable " ;
    _s << mRegisterTable.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mCurrentBank " ;
    _s << mCurrentBank.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mComputedGoto2RoutineAddress " ;
    _s << mComputedGoto2RoutineAddress.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mComputedGoto4RoutineAddress " ;
    _s << mComputedGoto4RoutineAddress.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
  }else{
    _s << "not built" ;
  }
  _s << "\n" ;
  _s.writeStringMultiple ("| ", inIndentation) ;
  _s << ">" ;
  return GGS_string (true, _s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@registerExpression.getRegisterAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__getRegisterAddress (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_22453,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                GGS_uint  & var_cas_outRegisterAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22453 != NULL) {
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  var_cas_size ;
    GGS_bitSliceTable  automatic_var_14 ;
    const GGS_registerTable  _temp_22645 = var_cas_inCodeGenerationContext.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (737)) ;
    if (_temp_22645._isBuilt ()) {
      _temp_22645 (HERE)->method_searchKey (_inLexique, operand_22453->mRegisterName, var_cas_registerAddressList, var_cas_size, automatic_var_14 COMMA_SOURCE_FILE_AT_LINE (737)) ;
    }
    if (((operand_22453->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (738)))._operator_strictSup (var_cas_size)).isBuiltAndTrue ()) {
      operand_22453->mOffset.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "The index ("))._operator_concat (operand_22453->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (739)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (739))))._operator_concat (GGS_string (true, ") should be lower than size (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (739))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (739)) ;
    }
    const GGS_uintlist  _temp_22885 = var_cas_registerAddressList ;
    if (_temp_22885._isBuilt ()) {
      _temp_22885 (HERE)->method_first (_inLexique, var_cas_outRegisterAddress COMMA_SOURCE_FILE_AT_LINE (741)) ;
    }
    var_cas_outRegisterAddress = var_cas_outRegisterAddress._add_operation (_inLexique, operand_22453->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (742)) COMMA_SOURCE_FILE_AT_LINE (742)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@registerExpression.getRegisterAddress' *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__getRegisterAddress> gDispatchTableFor__registerExpression__getRegisterAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__getRegisterAddress (typeCategoryMethod__registerExpression__getRegisterAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__getRegisterAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__getRegisterAddress
findCategoryMethod__registerExpression__getRegisterAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__getRegisterAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__getRegisterAddress.count ()) {
    result = gDispatchTableFor__registerExpression__getRegisterAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__getRegisterAddress (superClassPtr) ;
      gDispatchTableFor__registerExpression__getRegisterAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@registerExpression.getRegisterAddressingInformations'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__getRegisterAddressingInformations (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_23098,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                GGS_uint  & var_cas_outRegisterAddress,
                                GGS_bool & var_cas_outUseBSRregister,
                                GGS_bitSliceTable  & var_cas_outBitSliceTable
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23098 != NULL) {
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  var_cas_size ;
    const GGS_registerTable  _temp_23367 = var_cas_inCodeGenerationContext.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (755)) ;
    if (_temp_23367._isBuilt ()) {
      _temp_23367 (HERE)->method_searchKey (_inLexique, operand_23098->mRegisterName, var_cas_registerAddressList, var_cas_size, var_cas_outBitSliceTable COMMA_SOURCE_FILE_AT_LINE (755)) ;
    }
    GGS_bool var_cas_found ;
    var_cas_found = GGS_bool (true, false) ;
    var_cas_outRegisterAddress = GGS_uint (true, 0U) ;
    {
      GGS_uintlist::cEnumerator enumerator_23503 (var_cas_registerAddressList, true) ;
      const GGS_uintlist::cElement * operand_23503 = NULL ;
      while (((operand_23503 = enumerator_23503.nextObject ()))
          && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_23503) ;
        var_cas_outRegisterAddress = operand_23503->mValue ;
        var_cas_found = ((operand_23503->mValue)._operator_strictInf (GGS_uint (true, 96U)))._operator_or ((operand_23503->mValue)._operator_supOrEqual (GGS_uint (true, 3936U))) ;
      }
    }
    var_cas_outUseBSRregister = GGS_bool (true, false) ;
    if ((((var_cas_found)._operator_not ())._operator_and ((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (763)))._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
      var_cas_outUseBSRregister = GGS_bool (true, true) ;
      GGS_uint  var_cas_lowBound ;
      var_cas_lowBound = var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (765))._multiply_operation (_inLexique, GGS_uint (true, 256U) COMMA_SOURCE_FILE_AT_LINE (765)) ;
      GGS_uint  var_cas_highBound ;
      var_cas_highBound = var_cas_lowBound._add_operation (_inLexique, GGS_uint (true, 255U) COMMA_SOURCE_FILE_AT_LINE (766)) ;
      {
        GGS_uintlist::cEnumerator enumerator_23908 (var_cas_registerAddressList, true) ;
        const GGS_uintlist::cElement * operand_23908 = NULL ;
        while (((operand_23908 = enumerator_23908.nextObject ()))
            && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
          macroValidPointer (operand_23908) ;
          var_cas_found = ((operand_23908->mValue)._operator_supOrEqual (var_cas_lowBound))._operator_and ((operand_23908->mValue)._operator_infOrEqual (var_cas_highBound)) ;
        }
      }
    }
    if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = ((GGS_string (true, "register '"))._operator_concat (operand_23098->mRegisterName))._operator_concat (GGS_string (true, "' at ")) ;
      {
        GGS_uintlist::cEnumerator enumerator_24139 (var_cas_registerAddressList, true) ;
        const GGS_uintlist::cElement * operand_24139 = enumerator_24139.nextObject () ;
        if ((operand_24139 != NULL)
            && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
          bool _foreach_loop_24139 ;
          do{
            macroValidPointer (operand_24139) ;
            var_cas_errorMessage._dotAssign_operation (operand_24139->mValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (775))) ;
            operand_24139 = enumerator_24139.nextObject () ;
            _foreach_loop_24139 = ((operand_24139 != NULL)
              && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) ;
            if (_foreach_loop_24139) {
              var_cas_errorMessage.writeString (", ") ;
            }
          }while (_foreach_loop_24139) ;
        }
      }
      var_cas_errorMessage.writeString (" cannot be accessed, neither throught access bank, neither with BSR value") ;
      if (((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (780)))._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString (" (unknown)") ;
      }else{
        var_cas_errorMessage.writeString (" (") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (783)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (783))) ;
        var_cas_errorMessage.writeString (")") ;
      }
      operand_23098->mRegisterName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (785)) ;
    }
    if (((var_cas_found)._operator_and ((operand_23098->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (787)))._operator_supOrEqual (var_cas_size))).isBuiltAndTrue ()) {
      operand_23098->mOffset.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "index ("))._operator_concat (operand_23098->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (788)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (788))))._operator_concat (GGS_string (true, ") is should be lower than size (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (788))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (788)) ;
    }
    var_cas_outRegisterAddress = var_cas_outRegisterAddress._add_operation (_inLexique, operand_23098->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (790)) COMMA_SOURCE_FILE_AT_LINE (790)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@registerExpression.getRegisterAddressingInformations'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__getRegisterAddressingInformations> gDispatchTableFor__registerExpression__getRegisterAddressingInformations ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__getRegisterAddressingInformations (typeCategoryMethod__registerExpression__getRegisterAddressingInformations inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__getRegisterAddressingInformations.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__getRegisterAddressingInformations
findCategoryMethod__registerExpression__getRegisterAddressingInformations (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__getRegisterAddressingInformations result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__getRegisterAddressingInformations.count ()) {
    result = gDispatchTableFor__registerExpression__getRegisterAddressingInformations (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__getRegisterAddressingInformations (superClassPtr) ;
      gDispatchTableFor__registerExpression__getRegisterAddressingInformations.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "checkInstructionIsReachable"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkInstructionIsReachable (C_Compiler & _inLexique,
                                GGS_bool & var_cas_ioIsReachable,
                                const GGS_location   var_cas_inErrorLocation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkInstructionIsReachable at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (((var_cas_ioIsReachable)._operator_not ()).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "dead code: execution cannot reach this instruction") COMMA_SOURCE_FILE_AT_LINE (797)) ;
  }
  var_cas_ioIsReachable = GGS_bool (true, true) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkInstructionIsReachable\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Virtual Table for category method '@instruction.generateCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__instruction__generateCodeAtAddress> gDispatchTableFor__instruction__generateCodeAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__instruction__generateCodeAtAddress (typeCategoryMethod__instruction__generateCodeAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__instruction__generateCodeAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__instruction__generateCodeAtAddress
findCategoryMethod__instruction__generateCodeAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__instruction__generateCodeAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__instruction__generateCodeAtAddress.count ()) {
    result = gDispatchTableFor__instruction__generateCodeAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__instruction__generateCodeAtAddress (superClassPtr) ;
      gDispatchTableFor__instruction__generateCodeAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_FDA.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FDA__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FDA * operand_25626,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25626 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_25626->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (816)) ;
    GGS_uint  var_cas_usedRegisterAddress ;
    GGS_bool var_cas_useBSRregister ;
    GGS_bitSliceTable  automatic_var_15 ;
    const GGS_registerExpression  _temp_25915 = operand_25626->mRegisterExpression ;
    if (_temp_25915._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_25915._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_25915 (HERE), var_cas_inCodeGenerationContext, var_cas_usedRegisterAddress, var_cas_useBSRregister, automatic_var_15 COMMA_SOURCE_FILE_AT_LINE (820)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_25626->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (827)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    if (((operand_25626->m_W_isDestination)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 512U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (834)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_FA.generateCodeAtAddress'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FA__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FA * operand_26422,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_26422 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_26422->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (844)) ;
    GGS_uint  var_cas_usedRegisterAddress ;
    GGS_bool var_cas_useBSRregister ;
    GGS_bitSliceTable  automatic_var_16 ;
    const GGS_registerExpression  _temp_26711 = operand_26422->mRegisterExpression ;
    if (_temp_26711._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_26711._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_26711 (HERE), var_cas_inCodeGenerationContext, var_cas_usedRegisterAddress, var_cas_useBSRregister, automatic_var_16 COMMA_SOURCE_FILE_AT_LINE (848)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_26422->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (855)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (859)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_MOVFF.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVFF__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVFF * operand_27150,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_27150 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_27150->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (869)) ;
    GGS_uint  var_cas_sourceRegisterAddress ;
    const GGS_registerExpression  _temp_27416 = operand_27150->mSourceRegisterName ;
    if (_temp_27416._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_27416._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_27416 (HERE), var_cas_inCodeGenerationContext, var_cas_sourceRegisterAddress COMMA_SOURCE_FILE_AT_LINE (872)) ;
      }
    }
    GGS_uint  var_cas_destinationRegisterAddress ;
    const GGS_registerExpression  _temp_27551 = operand_27150->mDestinationRegisterName ;
    if (_temp_27551._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_27551._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_27551 (HERE), var_cas_inCodeGenerationContext, var_cas_destinationRegisterAddress COMMA_SOURCE_FILE_AT_LINE (874)) ;
      }
    }
    if ((GGS_uint (true, 49152U))._operator_or (var_cas_sourceRegisterAddress)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 49152U))._operator_or (var_cas_sourceRegisterAddress) COMMA_SOURCE_FILE_AT_LINE (874)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or (var_cas_destinationRegisterAddress)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_destinationRegisterAddress) COMMA_SOURCE_FILE_AT_LINE (875)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_FBA.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FBA__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FBA * operand_27849,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_27849 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_27849->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (885)) ;
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_uint  var_cas_usedRegisterAddress ;
    GGS_bool var_cas_useBSRregister ;
    const GGS_registerExpression  _temp_28184 = operand_27849->mRegisterExpression ;
    if (_temp_28184._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_28184._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_28184 (HERE), var_cas_inCodeGenerationContext, var_cas_usedRegisterAddress, var_cas_useBSRregister, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (891)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_28360 = operand_27849->mBitNumber ;
    if (_temp_28360._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_28360._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_28360 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (899)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_27849->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (901)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    var_cas_code = (var_cas_code)._operator_or (var_cas_bitNumber._left_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (906))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (906)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "emitConditionalBranchInstruction"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitConditionalBranchInstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inConditionalBranchInstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_conditional_branch  var_cas_inConditionalBranch COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitConditionalBranchInstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (918))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (918))._substract_operation (_inLexique, var_cas_inConditionalBranchInstructionAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (918)) COMMA_SOURCE_FILE_AT_LINE (918))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (918)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 127L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 128L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for conditional branch instruction") COMMA_SOURCE_FILE_AT_LINE (920)) ;
  }
  GGS_uint  var_cas_baseCode ;
  ::routine_getBccBaseCode (_inLexique,  var_cas_inConditionalBranch,  var_cas_baseCode COMMA_SOURCE_FILE_AT_LINE (923)) ;
  if ((var_cas_baseCode)._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 255L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (925)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (var_cas_baseCode)._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 255L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (925))) COMMA_SOURCE_FILE_AT_LINE (924)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitConditionalBranchInstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_conditionalBranch.generateCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_conditionalBranch__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_conditionalBranch * operand_29465,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29465 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_29465->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (934)) ;
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  automatic_var_17 ;
    const GGS_routineSymbolTable  _temp_29742 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (937)) ;
    if (_temp_29742._isBuilt ()) {
      _temp_29742 (HERE)->method_searchKey (_inLexique, operand_29465->mTargetLabel, var_cas_targetAddress, automatic_var_17 COMMA_SOURCE_FILE_AT_LINE (937)) ;
    }
    ::routine_emitConditionalBranchInstruction (_inLexique,  var_cas_inAddress,  var_cas_targetAddress,  operand_29465->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (942)),  operand_29465->mConditionalBranch COMMA_SOURCE_FILE_AT_LINE (937)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "emitBRAinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitBRAinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inBRAinstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitBRAinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (954))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (954))._substract_operation (_inLexique, var_cas_inBRAinstructionAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (954)) COMMA_SOURCE_FILE_AT_LINE (954))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (954)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for BRA instruction") COMMA_SOURCE_FILE_AT_LINE (956)) ;
  }
  if ((GGS_uint (true, 53248U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (959)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 53248U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (959))) COMMA_SOURCE_FILE_AT_LINE (957)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitBRAinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_BRA.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_BRA__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_BRA * operand_30584,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_30584 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_30584->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (968)) ;
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  automatic_var_18 ;
    const GGS_routineSymbolTable  _temp_30900 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (972)) ;
    if (_temp_30900._isBuilt ()) {
      _temp_30900 (HERE)->method_searchKey (_inLexique, operand_30584->mTargetLabel, var_cas_targetAddress, automatic_var_18 COMMA_SOURCE_FILE_AT_LINE (972)) ;
    }
    GGS_sint  var_cas_displacement ;
    var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (974))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (974))._substract_operation (_inLexique, var_cas_inAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (974)) COMMA_SOURCE_FILE_AT_LINE (974))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (974)) ;
    if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 2048L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 2048L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
      operand_30584->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for RCALL instruction") COMMA_SOURCE_FILE_AT_LINE (976)) ;
    }
    ::routine_emitBRAinstruction (_inLexique,  var_cas_inAddress,  var_cas_targetAddress,  operand_30584->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (982)) COMMA_SOURCE_FILE_AT_LINE (977)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitGOTOinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitGOTOinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitGOTOinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if ((GGS_uint (true, 61184U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (991)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 61184U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (991)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (990)) ;
  }
  if ((GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (992)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (992))) COMMA_SOURCE_FILE_AT_LINE (991)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitGOTOinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_GOTO.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_GOTO__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_GOTO * operand_31667,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_31667 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_31667->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1001)) ;
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  automatic_var_19 ;
    const GGS_routineSymbolTable  _temp_31990 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (1005)) ;
    if (_temp_31990._isBuilt ()) {
      _temp_31990 (HERE)->method_searchKey (_inLexique, operand_31667->mTargetLabel, var_cas_targetAddress, automatic_var_19 COMMA_SOURCE_FILE_AT_LINE (1005)) ;
    }
    ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (1005)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitCALLinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitCALLinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitCALLinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if ((GGS_uint (true, 60416U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1015)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 60416U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1015)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (1014)) ;
  }
  if ((GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (1016)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (1016))) COMMA_SOURCE_FILE_AT_LINE (1015)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitCALLinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_CALL.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CALL__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_CALL * operand_32469,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_32469 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_32469->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1025)) ;
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  var_cas_requiredSelectedBank ;
    const GGS_routineSymbolTable  _temp_32784 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (1029)) ;
    if (_temp_32784._isBuilt ()) {
      _temp_32784 (HERE)->method_searchKey (_inLexique, operand_32469->mTargetLabel, var_cas_targetAddress, var_cas_requiredSelectedBank COMMA_SOURCE_FILE_AT_LINE (1029)) ;
    }
    if ((((var_cas_requiredSelectedBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredSelectedBank)._operator_isNotEqual (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (1030))))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = ((GGS_string (true, "The routine requires the "))._operator_concat (var_cas_requiredSelectedBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1031))))._operator_concat (GGS_string (true, " bank to be selected, but ")) ;
      if (((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (1033)))._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString ("no bank is currentled selected") ;
      }else{
        var_cas_errorMessage.writeString ("the ") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (1036)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1036))) ;
        var_cas_errorMessage.writeString (" bank is currentled selected") ;
      }
      operand_32469->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (1038)) ;
    }
    ::routine_emitCALLinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (1039)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitRCALLinstruction"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitRCALLinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inRCALLinstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitRCALLinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1051))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (1051))._substract_operation (_inLexique, var_cas_inRCALLinstructionAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1051)) COMMA_SOURCE_FILE_AT_LINE (1051))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1051)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for RCALL instruction") COMMA_SOURCE_FILE_AT_LINE (1053)) ;
  }
  if ((GGS_uint (true, 55296U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1056)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 55296U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1056))) COMMA_SOURCE_FILE_AT_LINE (1054)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitRCALLinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_RCALL.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RCALL__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_RCALL * operand_34117,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_34117 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_34117->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1065)) ;
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  var_cas_requiredSelectedBank ;
    const GGS_routineSymbolTable  _temp_34425 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (1069)) ;
    if (_temp_34425._isBuilt ()) {
      _temp_34425 (HERE)->method_searchKey (_inLexique, operand_34117->mTargetLabel, var_cas_targetAddress, var_cas_requiredSelectedBank COMMA_SOURCE_FILE_AT_LINE (1069)) ;
    }
    if ((((var_cas_requiredSelectedBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredSelectedBank)._operator_isNotEqual (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (1070))))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = ((GGS_string (true, "The routine requires the "))._operator_concat (var_cas_requiredSelectedBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1071))))._operator_concat (GGS_string (true, " bank to be selected, but ")) ;
      if (((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (1073)))._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString ("no bank is currentled selected") ;
      }else{
        var_cas_errorMessage.writeString ("the ") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (1076)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1076))) ;
        var_cas_errorMessage.writeString (" bank is currentled selected") ;
      }
      operand_34117->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (1078)) ;
    }
    ::routine_emitRCALLinstruction (_inLexique,  var_cas_inAddress,  var_cas_targetAddress,  operand_34117->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1084)) COMMA_SOURCE_FILE_AT_LINE (1079)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_CLRWDT.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CLRWDT__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_CLRWDT * operand_35274,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_35274 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_35274->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1094)) ;
    if (GGS_uint (true, 4U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (1095)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_DAW.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_DAW__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_DAW * operand_35641,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_35641 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_35641->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1105)) ;
    if (GGS_uint (true, 7U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (1106)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_NOP.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_NOP__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_NOP * operand_36008,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_36008 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_36008->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1116)) ;
    if (GGS_uint (true, 0U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (1117)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_POP.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_POP__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_POP * operand_36375,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_36375 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_36375->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1127)) ;
    if (GGS_uint (true, 6U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 6U) COMMA_SOURCE_FILE_AT_LINE (1128)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_PUSH.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_PUSH__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_PUSH * operand_36743,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_36743 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_36743->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1138)) ;
    if (GGS_uint (true, 5U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 5U) COMMA_SOURCE_FILE_AT_LINE (1139)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_RESET.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RESET__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_RESET * operand_37112,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_37112 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_37112->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1149)) ;
    if (GGS_uint (true, 255U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 255U) COMMA_SOURCE_FILE_AT_LINE (1150)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_RETURN.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RETURN__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_RETURN * operand_37482,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_37482 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_37482->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1160)) ;
    if (GGS_uint (true, 18U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 18U) COMMA_SOURCE_FILE_AT_LINE (1161)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_SLEEP.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_SLEEP__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_SLEEP * operand_37851,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_37851 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_37851->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1171)) ;
    if (GGS_uint (true, 3U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 3U) COMMA_SOURCE_FILE_AT_LINE (1172)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_literalOperation.generateCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_literalOperation__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_literalOperation * operand_38231,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_38231 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_38231->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1182)) ;
    if (((operand_38231->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1184)))._operator_strictSup (GGS_uint (true, 255U))).isBuiltAndTrue ()) {
      operand_38231->mLiteralValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "A literal value ("))._operator_concat (operand_38231->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1185)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1185))))._operator_concat (GGS_string (true, ") should be lower or equal to 255")) COMMA_SOURCE_FILE_AT_LINE (1185)) ;
    }
    GGS_uint  var_cas_code ;
    operand_38231->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (1188)) ;
    var_cas_code = (var_cas_code)._operator_or (operand_38231->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1189))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (1189)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_LFSR.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LFSR__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_LFSR * operand_38860,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_38860 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_38860->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1199)) ;
    if (((operand_38860->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1201)))._operator_strictSup (GGS_uint (true, 2U))).isBuiltAndTrue ()) {
      operand_38860->mFSRindex.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "LFSR index should be lower or equal to 2") COMMA_SOURCE_FILE_AT_LINE (1202)) ;
    }
    GGS_uint  var_cas_sourceRegisterAddress ;
    const GGS_registerExpression  _temp_39234 = operand_38860->mRegisterExpression ;
    if (_temp_39234._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_39234._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_39234 (HERE), var_cas_inCodeGenerationContext, var_cas_sourceRegisterAddress COMMA_SOURCE_FILE_AT_LINE (1205)) ;
      }
    }
    if (((GGS_uint (true, 60928U))._operator_or (operand_38860->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1206))._left_shift_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (1206))))._operator_or (var_cas_sourceRegisterAddress._right_shift_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (1206)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  ((GGS_uint (true, 60928U))._operator_or (operand_38860->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1206))._left_shift_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (1206))))._operator_or (var_cas_sourceRegisterAddress._right_shift_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (1206))) COMMA_SOURCE_FILE_AT_LINE (1205)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or ((var_cas_sourceRegisterAddress)._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or ((var_cas_sourceRegisterAddress)._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (1206)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_MOVLB.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVLB__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVLB * operand_39565,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_39565 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_39565->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1216)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@pseudo_LABEL.generateCodeAtAddress'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__pseudo_LABEL__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_pseudo_LABEL * operand_39908,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_39908 != NULL) {
    var_cas_ioContinuesInSequence = GGS_bool (true, true) ;
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  var_cas_requiredSelectedBank ;
    const GGS_routineSymbolTable  _temp_40172 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (1230)) ;
    if (_temp_40172._isBuilt ()) {
      _temp_40172 (HERE)->method_searchKey (_inLexique, operand_39908->mTargetLabel, var_cas_targetAddress, var_cas_requiredSelectedBank COMMA_SOURCE_FILE_AT_LINE (1230)) ;
    }
    if (((var_cas_targetAddress)._operator_isNotEqual (var_cas_inAddress)).isBuiltAndTrue ()) {
      operand_39908->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((GGS_string (true, "Internal second pass error: the '"))._operator_concat (operand_39908->mTargetLabel))._operator_concat (GGS_string (true, "' label gets ")))._operator_concat (var_cas_inAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (1233))))._operator_concat (GGS_string (true, " value in second pass, while it gets ")))._operator_concat (var_cas_targetAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (1234))))._operator_concat (GGS_string (true, " in first pass")) COMMA_SOURCE_FILE_AT_LINE (1234)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_MOVAW.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVAW__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVAW * operand_40632,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_40632 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_40632->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1244)) ;
    GGS_uint  var_cas_registerAddress ;
    const GGS_registerExpression  _temp_40892 = operand_40632->mRegisterExpression ;
    if (_temp_40892._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_40892._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_40892 (HERE), var_cas_inCodeGenerationContext, var_cas_registerAddress COMMA_SOURCE_FILE_AT_LINE (1247)) ;
      }
    }
    if (((var_cas_registerAddress)._operator_strictSup (GGS_uint (true, 255U))).isBuiltAndTrue ()) {
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "for MOVAW instruction, address ("))._operator_concat (var_cas_registerAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (1252))))._operator_concat (GGS_string (true, ") should be lower or equal to 0xFF")) COMMA_SOURCE_FILE_AT_LINE (1252)) ;
    }
    if ((GGS_uint (true, 3584U))._operator_or (var_cas_registerAddress)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 3584U))._operator_or (var_cas_registerAddress) COMMA_SOURCE_FILE_AT_LINE (1253)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_TBLRD.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLRD__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_TBLRD * operand_41302,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_41302 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_41302->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1263)) ;
    switch (operand_41302->mOption.enumValue ()) {
    case GGS_tableAccessOption::enum_simpleAccess:
      {
      if (GGS_uint (true, 8U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (1266)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postIncrement:
      {
      if (GGS_uint (true, 9U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (1267)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postDecrement:
      {
      if (GGS_uint (true, 10U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 10U) COMMA_SOURCE_FILE_AT_LINE (1268)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_preIncrement:
      {
      if (GGS_uint (true, 11U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 11U) COMMA_SOURCE_FILE_AT_LINE (1269)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_TBLWT.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLWT__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_TBLWT * operand_41850,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_41850 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_41850->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1279)) ;
    switch (operand_41850->mOption.enumValue ()) {
    case GGS_tableAccessOption::enum_simpleAccess:
      {
      if (GGS_uint (true, 12U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 12U) COMMA_SOURCE_FILE_AT_LINE (1282)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postIncrement:
      {
      if (GGS_uint (true, 13U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 13U) COMMA_SOURCE_FILE_AT_LINE (1283)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postDecrement:
      {
      if (GGS_uint (true, 14U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 14U) COMMA_SOURCE_FILE_AT_LINE (1284)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_preIncrement:
      {
      if (GGS_uint (true, 15U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 15U) COMMA_SOURCE_FILE_AT_LINE (1285)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_MNOP.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MNOP__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_MNOP * operand_42397,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_42397 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_42397->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1295)) ;
    if (((operand_42397->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1297)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      operand_42397->mOccurrenceFactor.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "No generated code") COMMA_SOURCE_FILE_AT_LINE (1298)) ;
    }
    GGS_uint  var_cas_idx ;
    var_cas_idx = GGS_uint (true, 0U) ;
    GGS_uint _variant_42852 = operand_42397->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1301)) ;
    GGS_bool _condition_42852 (_variant_42852._isBuilt (), true) ;
    while (_condition_42852.isBuiltAndTrue ()) {
      _condition_42852 = (var_cas_idx)._operator_strictInf (operand_42397->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1302))) ;
      if (_condition_42852.isBuiltAndTrue ()) {
        if (_variant_42852.uintValue () == 0) {
          _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1305)) ;
          _condition_42852 = GGS_bool (true, false) ;
        }else{
          _variant_42852._decrement_operation (_inLexique COMMA_HERE) ;
          if (GGS_uint (true, 0U)._isBuilt ()) {
            ::routine_emitCode (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (1303)) ;
          }
          var_cas_idx._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1305)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_FOREVER.generateCodeAtAddress'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FOREVER__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FOREVER * operand_42997,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_42997 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_42997->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1315)) ;
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    GGS_uint  var_cas_currentAddress ;
    var_cas_currentAddress = var_cas_inAddress ;
    GGS_bool var_cas_continuesInSequence ;
    var_cas_continuesInSequence = GGS_bool (true, true) ;
    {
      GGS_instructionList::cEnumerator enumerator_43322 (operand_42997->mInstructionList, true) ;
      const GGS_instructionList::cElement * operand_43322 = NULL ;
      while (((operand_43322 = enumerator_43322.nextObject ()))) {
        macroValidPointer (operand_43322) ;
        const GGS_instruction  _temp_43360 = operand_43322->mInstruction ;
        if (_temp_43360._isBuilt ()) {
          typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_43360._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_43360 (HERE), var_cas_inCodeGenerationContext, var_cas_currentAddress, var_cas_continuesInSequence COMMA_SOURCE_FILE_AT_LINE (1321)) ;
          }
        }
        GGS_uint  var_cas_lg ;
        const GGS_instruction  _temp_43477 = operand_43322->mInstruction ;
        if (_temp_43477._isBuilt ()) {
          _temp_43477 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (1322)) ;
        }
        var_cas_currentAddress = var_cas_currentAddress._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (1323)) ;
      }
    }
    ::routine_emitBRAinstruction (_inLexique,  var_cas_currentAddress,  var_cas_inAddress,  operand_42997->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1324)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_IF_FA_SEMI_COLON.generateCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_FA_SEMI_COLON__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_FA_SEMI_COLON * operand_43819,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_43819 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_43819->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1339)) ;
    GGS_uint  var_cas_registerAddress ;
    GGS_bool var_cas_useBSRregister ;
    GGS_bitSliceTable  automatic_var_20 ;
    const GGS_registerExpression  _temp_44097 = operand_43819->mRegisterExpression ;
    if (_temp_44097._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_44097._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_44097 (HERE), var_cas_inCodeGenerationContext, var_cas_registerAddress, var_cas_useBSRregister, automatic_var_20 COMMA_SOURCE_FILE_AT_LINE (1343)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_43819->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (1350)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_registerAddress)._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (1354)) ;
    }
    GGS_bool var_cas_unusedContinuesInSequence ;
    var_cas_unusedContinuesInSequence = GGS_bool (true, true) ;
    const GGS_instruction  _temp_44458 = operand_43819->mInstruction ;
    if (_temp_44458._isBuilt ()) {
      typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_44458._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_44458 (HERE), var_cas_inCodeGenerationContext, var_cas_inAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1357)), var_cas_unusedContinuesInSequence COMMA_SOURCE_FILE_AT_LINE (1357)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_IF_BitTest.generateCodeAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_BitTest__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_BitTest * operand_44686,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_44686 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_44686->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1366)) ;
    GGS_uint  var_cas_registerAddress ;
    GGS_bool var_cas_useBSRregister ;
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    const GGS_registerExpression  _temp_44996 = operand_44686->mRegisterExpression ;
    if (_temp_44996._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_44996._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_44996 (HERE), var_cas_inCodeGenerationContext, var_cas_registerAddress, var_cas_useBSRregister, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (1371)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_45168 = operand_44686->mBitNumber ;
    if (_temp_45168._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_45168._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_45168 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (1379)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_44686->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (1381)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_registerAddress)._operator_and (GGS_uint (true, 255U))) ;
    var_cas_code = (var_cas_code)._operator_or (var_cas_bitNumber._left_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (1386))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (1386)) ;
    }
    GGS_bool var_cas_unusedContinuesInSequence ;
    var_cas_unusedContinuesInSequence = GGS_bool (true, true) ;
    const GGS_instruction  _temp_45490 = operand_44686->mInstruction ;
    if (_temp_45490._isBuilt ()) {
      typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_45490._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_45490 (HERE), var_cas_inCodeGenerationContext, var_cas_inAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1389)), var_cas_unusedContinuesInSequence COMMA_SOURCE_FILE_AT_LINE (1389)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@instruction_computed_retlw.generateCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_retlw__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_retlw * operand_45722,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_45722 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_45722->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1398)) ;
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    if ((operand_45722->mUsesRelativeCall).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_inAddress,  var_cas_inCodeGenerationContext.reader_mComputedGoto2RoutineAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (1402)),  operand_45722->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1401)) ;
    }else{
      ::routine_emitCALLinstruction (_inLexique,  var_cas_inCodeGenerationContext.reader_mComputedGoto2RoutineAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (1404)) COMMA_SOURCE_FILE_AT_LINE (1403)) ;
    }
    {
      GGS_luintlist::cEnumerator enumerator_46215 (operand_45722->mLiteralValues, true) ;
      const GGS_luintlist::cElement * operand_46215 = NULL ;
      while (((operand_46215 = enumerator_46215.nextObject ()))) {
        macroValidPointer (operand_46215) ;
        if (((operand_46215->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1407)))._operator_strictSup (GGS_uint (true, 255U))).isBuiltAndTrue ()) {
          GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "immediate value ("))._operator_concat (operand_46215->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1408)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1408))))._operator_concat (GGS_string (true, ") should be lower or equal to 255")) COMMA_SOURCE_FILE_AT_LINE (1408)) ;
        }
        if ((GGS_uint (true, 3072U))._operator_or (operand_46215->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1410)))._isBuilt ()) {
          ::routine_emitCode (_inLexique,  (GGS_uint (true, 3072U))._operator_or (operand_46215->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1410))) COMMA_SOURCE_FILE_AT_LINE (1409)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_computed_bra.generateCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_bra__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_bra * operand_46574,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_46574 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_46574->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1420)) ;
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    if ((operand_46574->mUsesRelativeCall).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_inAddress,  var_cas_inCodeGenerationContext.reader_mComputedGoto2RoutineAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (1424)),  operand_46574->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1423)) ;
    }else{
      ::routine_emitCALLinstruction (_inLexique,  var_cas_inCodeGenerationContext.reader_mComputedGoto2RoutineAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (1426)) COMMA_SOURCE_FILE_AT_LINE (1425)) ;
    }
    GGS_uint  var_cas_address ;
    var_cas_address = var_cas_inAddress._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (1428)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_47102 (operand_46574->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_47102 = NULL ;
      while (((operand_47102 = enumerator_47102.nextObject ()))) {
        macroValidPointer (operand_47102) ;
        GGS_uint  var_cas_targetAddress ;
        GGS_uint  var_cas_requiredSelectedBank ;
        const GGS_routineSymbolTable  _temp_47229 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (1432)) ;
        if (_temp_47229._isBuilt ()) {
          _temp_47229 (HERE)->method_searchKey (_inLexique, operand_47102->mValue, var_cas_targetAddress, var_cas_requiredSelectedBank COMMA_SOURCE_FILE_AT_LINE (1432)) ;
        }
        ::routine_emitBRAinstruction (_inLexique,  var_cas_address,  var_cas_targetAddress,  operand_47102->mValue.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1436)) COMMA_SOURCE_FILE_AT_LINE (1432)) ;
        var_cas_address = var_cas_address._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1438)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_computed_goto.generateCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_goto__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_goto * operand_47560,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_47560 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_47560->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1448)) ;
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    if ((operand_47560->mUsesRelativeCall).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_inAddress,  var_cas_inCodeGenerationContext.reader_mComputedGoto4RoutineAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (1452)),  operand_47560->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1451)) ;
    }else{
      ::routine_emitCALLinstruction (_inLexique,  var_cas_inCodeGenerationContext.reader_mComputedGoto4RoutineAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (1454)) COMMA_SOURCE_FILE_AT_LINE (1453)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_48053 (operand_47560->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_48053 = NULL ;
      while (((operand_48053 = enumerator_48053.nextObject ()))) {
        macroValidPointer (operand_48053) ;
        GGS_uint  var_cas_targetAddress ;
        GGS_uint  var_cas_requiredSelectedBank ;
        const GGS_routineSymbolTable  _temp_48180 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (1459)) ;
        if (_temp_48180._isBuilt ()) {
          _temp_48180 (HERE)->method_searchKey (_inLexique, operand_48053->mValue, var_cas_targetAddress, var_cas_requiredSelectedBank COMMA_SOURCE_FILE_AT_LINE (1459)) ;
        }
        ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (1459)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@structured_if_condition.emitInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__structured_if_condition__emitInstruction> gDispatchTableFor__structured_if_condition__emitInstruction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__structured_if_condition__emitInstruction (typeCategoryMethod__structured_if_condition__emitInstruction inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__structured_if_condition__emitInstruction.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__structured_if_condition__emitInstruction
findCategoryMethod__structured_if_condition__emitInstruction (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__structured_if_condition__emitInstruction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__structured_if_condition__emitInstruction.count ()) {
    result = gDispatchTableFor__structured_if_condition__emitInstruction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__structured_if_condition__emitInstruction (superClassPtr) ;
      gDispatchTableFor__structured_if_condition__emitInstruction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@bcc_in_structured_if_condition.emitInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bcc_in_structured_if_condition__emitInstruction (C_Compiler & _inLexique,
                                const cPtr_bcc_in_structured_if_condition * operand_48743,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   var_cas_inCurrentAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_48743 != NULL) {
    ::routine_emitConditionalBranchInstruction (_inLexique,  var_cas_inCurrentAddress,  var_cas_inTargetAddress,  var_cas_inErrorLocation,  operand_48743->mCondition COMMA_SOURCE_FILE_AT_LINE (1482)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@bitTest_in_structured_if_condition.emitInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitTest_in_structured_if_condition__emitInstruction (C_Compiler & _inLexique,
                                const cPtr_bitTest_in_structured_if_condition * operand_49167,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inCurrentAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_49167 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_uint  var_cas_usedRegisterAddress ;
    GGS_bool var_cas_useBSRregister ;
    const GGS_registerExpression  _temp_49442 = operand_49167->mRegisterExpression ;
    if (_temp_49442._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_49442._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_49442 (HERE), var_cas_inCodeGenerationContext, var_cas_usedRegisterAddress, var_cas_useBSRregister, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (1503)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_49618 = operand_49167->mBitNumber ;
    if (_temp_49618._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_49618._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_49618 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (1511)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_49167->method_baseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (1514)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    var_cas_code = (var_cas_code)._operator_or (var_cas_bitNumber._left_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (1519))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (1519)) ;
    }
    ::routine_emitBRAinstruction (_inLexique,  var_cas_inCurrentAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1523)),  var_cas_inTargetAddress,  var_cas_inErrorLocation COMMA_SOURCE_FILE_AT_LINE (1520)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_structured_if.generateCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_structured_if__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_structured_if * operand_50112,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_50112 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_50112->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1535)) ;
    GGS_uint  var_cas_thenInstructionsLength ;
    var_cas_thenInstructionsLength = GGS_uint (true, 0U) ;
    {
      GGS_instructionList::cEnumerator enumerator_50396 (operand_50112->mThenInstructionList, true) ;
      const GGS_instructionList::cElement * operand_50396 = NULL ;
      while (((operand_50396 = enumerator_50396.nextObject ()))) {
        macroValidPointer (operand_50396) ;
        GGS_uint  var_cas_lg ;
        const GGS_instruction  _temp_50449 = operand_50396->mInstruction ;
        if (_temp_50449._isBuilt ()) {
          _temp_50449 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (1540)) ;
        }
        var_cas_thenInstructionsLength = var_cas_thenInstructionsLength._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (1541)) ;
      }
    }
    GGS_uint  var_cas_elseInstructionsLength ;
    var_cas_elseInstructionsLength = GGS_uint (true, 0U) ;
    {
      GGS_instructionList::cEnumerator enumerator_50630 (operand_50112->mElseInstructionList, true) ;
      const GGS_instructionList::cElement * operand_50630 = NULL ;
      while (((operand_50630 = enumerator_50630.nextObject ()))) {
        macroValidPointer (operand_50630) ;
        GGS_uint  var_cas_lg ;
        const GGS_instruction  _temp_50683 = operand_50630->mInstruction ;
        if (_temp_50683._isBuilt ()) {
          _temp_50683 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (1546)) ;
        }
        var_cas_elseInstructionsLength = var_cas_elseInstructionsLength._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (1547)) ;
      }
    }
    GGS_uint  var_cas_conditionLength ;
    const GGS_structured_if_condition  _temp_50848 = operand_50112->mIfCondition ;
    if (_temp_50848._isBuilt ()) {
      _temp_50848 (HERE)->method_conditionLength (_inLexique, var_cas_conditionLength COMMA_SOURCE_FILE_AT_LINE (1551)) ;
    }
    GGS_uint  var_cas_conditionalBranchDestination ;
    var_cas_conditionalBranchDestination = var_cas_inAddress._add_operation (_inLexique, var_cas_thenInstructionsLength COMMA_SOURCE_FILE_AT_LINE (1553))._add_operation (_inLexique, var_cas_conditionLength COMMA_SOURCE_FILE_AT_LINE (1553)) ;
    if (((operand_50112->mElseInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1554)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      var_cas_conditionalBranchDestination = var_cas_conditionalBranchDestination._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1555)) ;
    }
    const GGS_structured_if_condition  _temp_51142 = operand_50112->mIfCondition ;
    if (_temp_51142._isBuilt ()) {
      typeCategoryMethod__structured_if_condition__emitInstruction _method = findCategoryMethod__structured_if_condition__emitInstruction (_temp_51142._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_51142 (HERE), var_cas_inCodeGenerationContext, var_cas_inAddress, var_cas_conditionalBranchDestination, operand_50112->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1557)) ;
      }
    }
    GGS_uint  var_cas_currentAddress ;
    var_cas_currentAddress = var_cas_inAddress._add_operation (_inLexique, var_cas_conditionLength COMMA_SOURCE_FILE_AT_LINE (1564)) ;
    GGS_bool var_cas_continuesInSequence ;
    var_cas_continuesInSequence = GGS_bool (true, true) ;
    {
      GGS_instructionList::cEnumerator enumerator_51402 (operand_50112->mThenInstructionList, true) ;
      const GGS_instructionList::cElement * operand_51402 = NULL ;
      while (((operand_51402 = enumerator_51402.nextObject ()))) {
        macroValidPointer (operand_51402) ;
        const GGS_instruction  _temp_51444 = operand_51402->mInstruction ;
        if (_temp_51444._isBuilt ()) {
          typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_51444._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_51444 (HERE), var_cas_inCodeGenerationContext, var_cas_currentAddress, var_cas_continuesInSequence COMMA_SOURCE_FILE_AT_LINE (1567)) ;
          }
        }
        GGS_uint  var_cas_lg ;
        const GGS_instruction  _temp_51584 = operand_51402->mInstruction ;
        if (_temp_51584._isBuilt ()) {
          _temp_51584 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (1572)) ;
        }
        var_cas_currentAddress = var_cas_currentAddress._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (1573)) ;
      }
    }
    if (((operand_50112->mElseInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1576)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      ::routine_emitBRAinstruction (_inLexique,  var_cas_currentAddress,  var_cas_currentAddress._add_operation (_inLexique, var_cas_elseInstructionsLength COMMA_SOURCE_FILE_AT_LINE (1579))._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1579)),  operand_50112->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1576)) ;
      var_cas_currentAddress = var_cas_currentAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1582)) ;
      var_cas_continuesInSequence = GGS_bool (true, true) ;
      {
        GGS_instructionList::cEnumerator enumerator_51962 (operand_50112->mElseInstructionList, true) ;
        const GGS_instructionList::cElement * operand_51962 = NULL ;
        while (((operand_51962 = enumerator_51962.nextObject ()))) {
          macroValidPointer (operand_51962) ;
          const GGS_instruction  _temp_52006 = operand_51962->mInstruction ;
          if (_temp_52006._isBuilt ()) {
            typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_52006._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_52006 (HERE), var_cas_inCodeGenerationContext, var_cas_currentAddress, var_cas_continuesInSequence COMMA_SOURCE_FILE_AT_LINE (1585)) ;
            }
          }
          GGS_uint  var_cas_lg ;
          const GGS_instruction  _temp_52156 = operand_51962->mInstruction ;
          if (_temp_52156._isBuilt ()) {
            _temp_52156 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (1590)) ;
          }
          var_cas_currentAddress = var_cas_currentAddress._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (1591)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Implementation of routine "analyze"                     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyze (C_Compiler & _inLexique,
                                const GGS_piccoloModel  var_cas_inPiccoloModel,
                                const GGS_string  var_cas_inSourceFileName COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyze at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_sourceFileBaseName ;
  var_cas_sourceFileBaseName = var_cas_inSourceFileName.reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (1603)).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (1603)) ;
  if (((var_cas_sourceFileBaseName)._operator_isNotEqual (var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (1604)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1604)))).isBuiltAndTrue ()) {
    var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (1605)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the program name ('"))._operator_concat (var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (1605))))._operator_concat (GGS_string (true, "') should be identical to the file base name '")))._operator_concat (var_cas_sourceFileBaseName))._operator_concat (GGS_string (true, "'")) COMMA_SOURCE_FILE_AT_LINE (1606)) ;
  }
  GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
  ::routine_parseDeviceDefinition (_inLexique,  var_cas_inPiccoloModel.reader_mDeviceName (_inLexique COMMA_SOURCE_FILE_AT_LINE (1610)),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (1609)) ;
  GGS_bool var_cas_hasHighInterrupt ;
  var_cas_hasHighInterrupt = GGS_bool (true, false) ;
  GGS_bool var_cas_hasLowInterrupt ;
  var_cas_hasLowInterrupt = GGS_bool (true, false) ;
  {
    GGS_interruptDefinitionList::cEnumerator enumerator_53402 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1614)), true) ;
    const GGS_interruptDefinitionList::cElement * operand_53402 = NULL ;
    while (((operand_53402 = enumerator_53402.nextObject ()))) {
      macroValidPointer (operand_53402) ;
      if (((operand_53402->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1615)))._operator_isEqual (GGS_string (true, "high"))).isBuiltAndTrue ()) {
        if ((var_cas_hasHighInterrupt).isBuiltAndTrue ()) {
          operand_53402->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Only one 'high' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (1617)) ;
        }
        var_cas_hasHighInterrupt = GGS_bool (true, true) ;
      }else if (((operand_53402->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1620)))._operator_isEqual (GGS_string (true, "low"))).isBuiltAndTrue ()) {
        if ((var_cas_hasLowInterrupt).isBuiltAndTrue ()) {
          operand_53402->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Only one 'low' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (1622)) ;
        }
        var_cas_hasLowInterrupt = GGS_bool (true, true) ;
      }else{
        operand_53402->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "An interrupt routine should be named 'low' or 'high'") COMMA_SOURCE_FILE_AT_LINE (1626)) ;
      }
    }
  }
  GGS_ramBankTable  var_cas_ramBank ;
  var_cas_ramBank = var_cas_piccoloDeviceModel.reader_mRamBankTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (1630)) ;
  GGS_registerTable  var_cas_registerTable ;
  var_cas_registerTable = var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (1631)) ;
  {
    GGS_ramDefinitionList::cEnumerator enumerator_54172 (var_cas_inPiccoloModel.reader_mRamDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1632)), true) ;
    const GGS_ramDefinitionList::cElement * operand_54172 = NULL ;
    while (((operand_54172 = enumerator_54172.nextObject ()))) {
      macroValidPointer (operand_54172) ;
      GGS_uint  var_cas_lastAddressPlusOne ;
      GGS_uint  var_cas_firstFreeAddress ;
      const GGS_ramBankTable  _temp_54305 = var_cas_ramBank ;
      if (_temp_54305._isBuilt ()) {
        _temp_54305 (HERE)->method_searchKey (_inLexique, operand_54172->mBankName, var_cas_firstFreeAddress, var_cas_lastAddressPlusOne COMMA_SOURCE_FILE_AT_LINE (1636)) ;
      }
      {
        GGS_declarationInRamList::cEnumerator enumerator_54379 (operand_54172->mDeclaration, true) ;
        const GGS_declarationInRamList::cElement * operand_54379 = NULL ;
        while (((operand_54379 = enumerator_54379.nextObject ()))) {
          macroValidPointer (operand_54379) ;
          if (((operand_54379->mSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1638)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
            operand_54379->mSize.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "zero size is not allowed") COMMA_SOURCE_FILE_AT_LINE (1639)) ;
          }
          GGS_bitSliceTable  var_cas_bitSliceTable ;
          var_cas_bitSliceTable = GGS_bitSliceTable ::constructor_emptyMap (_inLexique COMMA_HERE) ;
          var_cas_registerTable.modifier_insertKey (_inLexique, operand_54379->mName, GGS_uintlist ::constructor_listWithValue (var_cas_firstFreeAddress), operand_54379->mSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1642)), var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (1642)) ;
          var_cas_firstFreeAddress = var_cas_firstFreeAddress._add_operation (_inLexique, operand_54379->mSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1643)) COMMA_SOURCE_FILE_AT_LINE (1643)) ;
          var_cas_ramBank.modifier_setMFirstFreeAddressForKey (_inLexique, var_cas_firstFreeAddress, operand_54172->mBankName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1644)) COMMA_SOURCE_FILE_AT_LINE (1644)) ;
          if (((var_cas_firstFreeAddress)._operator_strictSup (var_cas_lastAddressPlusOne)).isBuiltAndTrue ()) {
            operand_54379->mName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "overflow in '"))._operator_concat (operand_54172->mBankName))._operator_concat (GGS_string (true, "' ram bank for '")))._operator_concat (operand_54379->mName))._operator_concat (GGS_string (true, "' declaration")) COMMA_SOURCE_FILE_AT_LINE (1646)) ;
          }
        }
      }
    }
  }
  GGS_instructionList  var_cas_generatedInstructionList ;
  var_cas_generatedInstructionList = GGS_instructionList ::constructor_emptyList () ;
  GGS_uint  var_cas_localLabelIndex ;
  var_cas_localLabelIndex = GGS_uint (true, 0U) ;
  var_cas_generatedInstructionList._addAssign_operation (GGS_instruction_GOTO ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "main"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
  if (((var_cas_hasLowInterrupt)._operator_and (var_cas_hasHighInterrupt)).isBuiltAndTrue ()) {
    var_cas_generatedInstructionList._addAssign_operation (GGS_pseudo_ORG ::constructor_new (_inLexique, GGS_uint (true, 8U) COMMA_HERE)) ;
    var_cas_generatedInstructionList._addAssign_operation (GGS_instruction_BRA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_fast_interrupt"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
  }
  GGS_uint  var_cas_currentROMaddress ;
  var_cas_currentROMaddress = GGS_uint (true, 24U) ;
  GGS_routineSymbolTable  var_cas_routineSymbolTable ;
  var_cas_routineSymbolTable = GGS_routineSymbolTable ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  if ((var_cas_hasLowInterrupt).isBuiltAndTrue ()) {
    var_cas_generatedInstructionList._addAssign_operation (GGS_pseudo_ORG ::constructor_new (_inLexique, GGS_uint (true, 24U) COMMA_HERE)) ;
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_55811 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1665)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_55811 = NULL ;
      while (((operand_55811 = enumerator_55811.nextObject ()))) {
        macroValidPointer (operand_55811) ;
        if (((operand_55811->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1666)))._operator_isEqual (GGS_string (true, "low"))).isBuiltAndTrue ()) {
          GGS_uint  var_cas_currentlySelectedBank ;
          var_cas_currentlySelectedBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
          {
            GGS_instructionList::cEnumerator enumerator_55993 (operand_55811->mInstructionList, true) ;
            const GGS_instructionList::cElement * operand_55993 = NULL ;
            while (((operand_55993 = enumerator_55993.nextObject ()))) {
              macroValidPointer (operand_55993) ;
              var_cas_generatedInstructionList._addAssign_operation (operand_55993->mInstruction) ;
              const GGS_instruction  _temp_56091 = operand_55993->mInstruction ;
              if (_temp_56091._isBuilt ()) {
                typeCategoryMethod__instruction__decomposeComplexInstruction _method = findCategoryMethod__instruction__decomposeComplexInstruction (_temp_56091._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_56091 (HERE), var_cas_localLabelIndex, var_cas_generatedInstructionList COMMA_SOURCE_FILE_AT_LINE (1670)) ;
                }
              }
              const GGS_instruction  _temp_56191 = operand_55993->mInstruction ;
              if (_temp_56191._isBuilt ()) {
                typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_56191._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_56191 (HERE), var_cas_routineSymbolTable, var_cas_currentROMaddress, var_cas_currentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (1671)) ;
                }
              }
              GGS_uint  var_cas_length ;
              const GGS_instruction  _temp_56327 = operand_55993->mInstruction ;
              if (_temp_56327._isBuilt ()) {
                _temp_56327 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1673)) ;
              }
              var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1674)) ;
            }
          }
          var_cas_generatedInstructionList._addAssign_operation (GGS_instruction_RETFIE ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_bool (true, true) COMMA_HERE)) ;
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1678)) ;
        }
      }
    }
  }
  GGS_uint  var_cas_highInterruptStartAddress ;
  var_cas_highInterruptStartAddress = var_cas_currentROMaddress ;
  if (((var_cas_hasLowInterrupt)._operator_not ()).isBuiltAndTrue ()) {
    var_cas_currentROMaddress = GGS_uint (true, 8U) ;
  }
  if ((var_cas_hasHighInterrupt).isBuiltAndTrue ()) {
    if ((var_cas_hasLowInterrupt).isBuiltAndTrue ()) {
      var_cas_generatedInstructionList._addAssign_operation (GGS_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_fast_interrupt"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
    }else{
      var_cas_generatedInstructionList._addAssign_operation (GGS_pseudo_ORG ::constructor_new (_inLexique, GGS_uint (true, 8U) COMMA_HERE)) ;
    }
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_57070 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1693)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_57070 = NULL ;
      while (((operand_57070 = enumerator_57070.nextObject ()))) {
        macroValidPointer (operand_57070) ;
        if (((operand_57070->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1694)))._operator_isEqual (GGS_string (true, "high"))).isBuiltAndTrue ()) {
          GGS_uint  var_cas_currentlySelectedBank ;
          var_cas_currentlySelectedBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
          {
            GGS_instructionList::cEnumerator enumerator_57253 (operand_57070->mInstructionList, true) ;
            const GGS_instructionList::cElement * operand_57253 = NULL ;
            while (((operand_57253 = enumerator_57253.nextObject ()))) {
              macroValidPointer (operand_57253) ;
              var_cas_generatedInstructionList._addAssign_operation (operand_57253->mInstruction) ;
              const GGS_instruction  _temp_57351 = operand_57253->mInstruction ;
              if (_temp_57351._isBuilt ()) {
                typeCategoryMethod__instruction__decomposeComplexInstruction _method = findCategoryMethod__instruction__decomposeComplexInstruction (_temp_57351._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_57351 (HERE), var_cas_localLabelIndex, var_cas_generatedInstructionList COMMA_SOURCE_FILE_AT_LINE (1698)) ;
                }
              }
              const GGS_instruction  _temp_57451 = operand_57253->mInstruction ;
              if (_temp_57451._isBuilt ()) {
                typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_57451._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_57451 (HERE), var_cas_routineSymbolTable, var_cas_currentROMaddress, var_cas_currentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (1699)) ;
                }
              }
              GGS_uint  var_cas_length ;
              const GGS_instruction  _temp_57587 = operand_57253->mInstruction ;
              if (_temp_57587._isBuilt ()) {
                _temp_57587 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1701)) ;
              }
              var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1702)) ;
            }
          }
          var_cas_generatedInstructionList._addAssign_operation (GGS_instruction_RETFIE ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_bool (true, true) COMMA_HERE)) ;
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1706)) ;
        }
      }
    }
  }
  if ((((var_cas_hasHighInterrupt)._operator_not ())._operator_and ((var_cas_hasLowInterrupt)._operator_not ())).isBuiltAndTrue ()) {
    var_cas_currentROMaddress = GGS_uint (true, 4U) ;
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_58058 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1714)), true) ;
    const GGS_routineDefinitionList::cElement * operand_58058 = NULL ;
    while (((operand_58058 = enumerator_58058.nextObject ()))) {
      macroValidPointer (operand_58058) ;
      var_cas_generatedInstructionList._addAssign_operation (GGS_pseudo_LABEL ::constructor_new (_inLexique, operand_58058->mRoutineName COMMA_HERE)) ;
      GGS_uint  var_cas_currentlySelectedBank ;
      var_cas_currentlySelectedBank = operand_58058->mBanksel.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1716)) ;
      var_cas_routineSymbolTable.modifier_insertKey (_inLexique, operand_58058->mRoutineName, var_cas_currentROMaddress, var_cas_currentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (1717)) ;
      {
        GGS_instructionList::cEnumerator enumerator_58330 (operand_58058->mInstructionList, true) ;
        const GGS_instructionList::cElement * operand_58330 = NULL ;
        while (((operand_58330 = enumerator_58330.nextObject ()))) {
          macroValidPointer (operand_58330) ;
          var_cas_generatedInstructionList._addAssign_operation (operand_58330->mInstruction) ;
          const GGS_instruction  _temp_58420 = operand_58330->mInstruction ;
          if (_temp_58420._isBuilt ()) {
            typeCategoryMethod__instruction__decomposeComplexInstruction _method = findCategoryMethod__instruction__decomposeComplexInstruction (_temp_58420._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_58420 (HERE), var_cas_localLabelIndex, var_cas_generatedInstructionList COMMA_SOURCE_FILE_AT_LINE (1720)) ;
            }
          }
          const GGS_instruction  _temp_58516 = operand_58330->mInstruction ;
          if (_temp_58516._isBuilt ()) {
            typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_58516._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_58516 (HERE), var_cas_routineSymbolTable, var_cas_currentROMaddress, var_cas_currentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (1721)) ;
            }
          }
          GGS_uint  var_cas_length ;
          const GGS_instruction  _temp_58644 = operand_58330->mInstruction ;
          if (_temp_58644._isBuilt ()) {
            _temp_58644 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1723)) ;
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1724)) ;
        }
      }
    }
  }
  GGS_uint  var_cas_computedGoto4RoutineAddress ;
  var_cas_computedGoto4RoutineAddress = var_cas_currentROMaddress ;
  GGS_uint  var_cas_computedGoto2RoutineAddress ;
  var_cas_computedGoto2RoutineAddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1729)) ;
  if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1730))).isBuiltAndTrue ()) {
    var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 12U) COMMA_SOURCE_FILE_AT_LINE (1731)) ;
  }else if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1732))).isBuiltAndTrue ()) {
    var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 10U) COMMA_SOURCE_FILE_AT_LINE (1733)) ;
  }
  if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1736))).isBuiltAndTrue ()) {
    var_cas_generatedInstructionList._addAssign_operation (GGS_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_4"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
    var_cas_generatedInstructionList._addAssign_operation (GGS_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWF (_inLexique COMMA_HERE), GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "WREG"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE), GGS_bool (true, true) COMMA_HERE)) ;
  }
  if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1745))).isBuiltAndTrue ()) {
    var_cas_generatedInstructionList._addAssign_operation (GGS_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_2"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
  }
  if (((var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1748)))._operator_or (var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1748)))).isBuiltAndTrue ()) {
    var_cas_generatedInstructionList._addAssign_operation (GGS_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWF (_inLexique COMMA_HERE), GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "WREG"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE), GGS_bool (true, true) COMMA_HERE)) ;
    var_cas_generatedInstructionList._addAssign_operation (GGS_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWF (_inLexique COMMA_HERE), GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "TOSL"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE), GGS_bool (true, false) COMMA_HERE)) ;
    var_cas_generatedInstructionList._addAssign_operation (GGS_instruction_literalOperation ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_literal_instruction_opcode::constructor_MOVLW (_inLexique COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
    var_cas_generatedInstructionList._addAssign_operation (GGS_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWFC (_inLexique COMMA_HERE), GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "TOSH"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE), GGS_bool (true, false) COMMA_HERE)) ;
    var_cas_generatedInstructionList._addAssign_operation (GGS_instruction_RETURN ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE)) ;
  }
  GGS_uint  var_cas_programSize ;
  var_cas_programSize = var_cas_currentROMaddress ;
  if (GGS_uint (true, 0U)._isBuilt ()) {
    ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (1776)) ;
  }
  if (((var_cas_routineSymbolTable.reader_hasKey (_inLexique, GGS_string (true, "main") COMMA_SOURCE_FILE_AT_LINE (1780)))._operator_not ()).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "there is no 'main' routine") COMMA_SOURCE_FILE_AT_LINE (1781)) ;
  }else{
    GGS_uint  var_cas_mainRoutineAddress ;
    GGS_uint  automatic_var_21 ;
    const GGS_routineSymbolTable  _temp_61143 = var_cas_routineSymbolTable ;
    if (_temp_61143._isBuilt ()) {
      _temp_61143 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "main"), GGS_location (_inLexique) COMMA_HERE), var_cas_mainRoutineAddress, automatic_var_21 COMMA_SOURCE_FILE_AT_LINE (1784)) ;
    }
    if ((GGS_uint (true, 61184U))._operator_or ((var_cas_mainRoutineAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1785)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61184U))._operator_or ((var_cas_mainRoutineAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1785)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (1784)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or (var_cas_mainRoutineAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (1786)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_mainRoutineAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (1786))) COMMA_SOURCE_FILE_AT_LINE (1785)) ;
    }
  }
  if (((var_cas_hasHighInterrupt)._operator_and (var_cas_hasLowInterrupt)).isBuiltAndTrue ()) {
    if (GGS_uint (true, 8U)._isBuilt ()) {
      ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (1791)) ;
    }
    if ((GGS_uint (true, 61184U))._operator_or ((var_cas_highInterruptStartAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1793)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61184U))._operator_or ((var_cas_highInterruptStartAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1793)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (1792)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or (var_cas_highInterruptStartAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (1794)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_highInterruptStartAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (1794))) COMMA_SOURCE_FILE_AT_LINE (1793)) ;
    }
  }
  GGS_codeGenerationContext var_cas_codeGenerationContext ;
  var_cas_codeGenerationContext = GGS_codeGenerationContext::constructor_new (var_cas_routineSymbolTable, var_cas_registerTable, GGS_uint (true, 0U), var_cas_computedGoto2RoutineAddress, var_cas_computedGoto4RoutineAddress) ;
  var_cas_currentROMaddress = GGS_uint (true, 24U) ;
  if ((var_cas_hasLowInterrupt).isBuiltAndTrue ()) {
    if (GGS_uint (true, 24U)._isBuilt ()) {
      ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (1806)) ;
    }
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_62131 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1808)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_62131 = NULL ;
      while (((operand_62131 = enumerator_62131.nextObject ()))) {
        macroValidPointer (operand_62131) ;
        if (((operand_62131->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1809)))._operator_isEqual (GGS_string (true, "low"))).isBuiltAndTrue ()) {
          var_cas_codeGenerationContext.mCurrentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
          GGS_bool var_cas_continuesInSequence ;
          var_cas_continuesInSequence = GGS_bool (true, true) ;
          {
            GGS_instructionList::cEnumerator enumerator_62362 (operand_62131->mInstructionList, true) ;
            const GGS_instructionList::cElement * operand_62362 = NULL ;
            while (((operand_62362 = enumerator_62362.nextObject ()))) {
              macroValidPointer (operand_62362) ;
              const GGS_instruction  _temp_62406 = operand_62362->mInstruction ;
              if (_temp_62406._isBuilt ()) {
                typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_62406._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_62406 (HERE), var_cas_codeGenerationContext, var_cas_currentROMaddress, var_cas_continuesInSequence COMMA_SOURCE_FILE_AT_LINE (1813)) ;
                }
              }
              GGS_uint  var_cas_length ;
              const GGS_instruction  _temp_62544 = operand_62362->mInstruction ;
              if (_temp_62544._isBuilt ()) {
                _temp_62544 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1815)) ;
              }
              var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1816)) ;
              ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (1816)) ;
            }
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1819)) ;
          if (GGS_uint (true, 17U)._isBuilt ()) {
            ::routine_emitCode (_inLexique,  GGS_uint (true, 17U) COMMA_SOURCE_FILE_AT_LINE (1819)) ;
          }
          ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (1820)) ;
        }
      }
    }
  }
  if (((var_cas_hasLowInterrupt)._operator_not ()).isBuiltAndTrue ()) {
    var_cas_currentROMaddress = GGS_uint (true, 8U) ;
    if (GGS_uint (true, 8U)._isBuilt ()) {
      ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (1827)) ;
    }
  }
  if ((var_cas_hasHighInterrupt).isBuiltAndTrue ()) {
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_63081 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1831)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_63081 = NULL ;
      while (((operand_63081 = enumerator_63081.nextObject ()))) {
        macroValidPointer (operand_63081) ;
        if (((operand_63081->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1832)))._operator_isEqual (GGS_string (true, "high"))).isBuiltAndTrue ()) {
          var_cas_codeGenerationContext.mCurrentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
          GGS_bool var_cas_continuesInSequence ;
          var_cas_continuesInSequence = GGS_bool (true, true) ;
          {
            GGS_instructionList::cEnumerator enumerator_63313 (operand_63081->mInstructionList, true) ;
            const GGS_instructionList::cElement * operand_63313 = NULL ;
            while (((operand_63313 = enumerator_63313.nextObject ()))) {
              macroValidPointer (operand_63313) ;
              const GGS_instruction  _temp_63357 = operand_63313->mInstruction ;
              if (_temp_63357._isBuilt ()) {
                typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_63357._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_63357 (HERE), var_cas_codeGenerationContext, var_cas_currentROMaddress, var_cas_continuesInSequence COMMA_SOURCE_FILE_AT_LINE (1836)) ;
                }
              }
              GGS_uint  var_cas_length ;
              const GGS_instruction  _temp_63495 = operand_63313->mInstruction ;
              if (_temp_63495._isBuilt ()) {
                _temp_63495 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1838)) ;
              }
              var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1839)) ;
              ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (1839)) ;
            }
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1842)) ;
          if (GGS_uint (true, 17U)._isBuilt ()) {
            ::routine_emitCode (_inLexique,  GGS_uint (true, 17U) COMMA_SOURCE_FILE_AT_LINE (1842)) ;
          }
          ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (1843)) ;
        }
      }
    }
  }
  if ((((var_cas_hasLowInterrupt)._operator_not ())._operator_and ((var_cas_hasHighInterrupt)._operator_not ())).isBuiltAndTrue ()) {
    var_cas_currentROMaddress = GGS_uint (true, 4U) ;
    if (GGS_uint (true, 4U)._isBuilt ()) {
      ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (1850)) ;
    }
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_64007 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1853)), true) ;
    const GGS_routineDefinitionList::cElement * operand_64007 = NULL ;
    while (((operand_64007 = enumerator_64007.nextObject ()))) {
      macroValidPointer (operand_64007) ;
      var_cas_codeGenerationContext.mCurrentBank = operand_64007->mBanksel.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1854)) ;
      if ((((operand_64007->mRoutineName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1855)))._operator_isEqual (GGS_string (true, "main")))._operator_and ((operand_64007->mBanksel.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1855)))._operator_isNotEqual (GGS_uint (true, 0U)))).isBuiltAndTrue ()) {
        operand_64007->mRoutineName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "as PIC18 is started with BSR register set to 0, the 'main' routine requires the 'banksel 0' declaration") COMMA_SOURCE_FILE_AT_LINE (1856)) ;
      }
      if ((((operand_64007->mRoutineName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1858)))._operator_isEqual (GGS_string (true, "main")))._operator_and ((operand_64007->mHasNoReturn)._operator_not ())).isBuiltAndTrue ()) {
        operand_64007->mRoutineName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "as the 'main' routine is an endless loop, it should be declared with 'noreturn' qualifier") COMMA_SOURCE_FILE_AT_LINE (1859)) ;
      }
      GGS_bool var_cas_continuesInSequence ;
      var_cas_continuesInSequence = GGS_bool (true, true) ;
      {
        GGS_instructionList::cEnumerator enumerator_64576 (operand_64007->mInstructionList, true) ;
        const GGS_instructionList::cElement * operand_64576 = NULL ;
        while (((operand_64576 = enumerator_64576.nextObject ()))) {
          macroValidPointer (operand_64576) ;
          const GGS_instruction  _temp_64616 = operand_64576->mInstruction ;
          if (_temp_64616._isBuilt ()) {
            typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_64616._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_64616 (HERE), var_cas_codeGenerationContext, var_cas_currentROMaddress, var_cas_continuesInSequence COMMA_SOURCE_FILE_AT_LINE (1863)) ;
            }
          }
          GGS_uint  var_cas_length ;
          const GGS_instruction  _temp_64746 = operand_64576->mInstruction ;
          if (_temp_64746._isBuilt ()) {
            _temp_64746 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1865)) ;
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1866)) ;
          ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (1866)) ;
        }
      }
    }
  }
  if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1871))).isBuiltAndTrue ()) {
    if (GGS_uint (true, 9448U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 9448U) COMMA_SOURCE_FILE_AT_LINE (1871)) ;
    }
    var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1873)) ;
  }
  if (((var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1875)))._operator_or (var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1875)))).isBuiltAndTrue ()) {
    if (GGS_uint (true, 9448U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 9448U) COMMA_SOURCE_FILE_AT_LINE (1875)) ;
    }
    if (GGS_uint (true, 9981U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 9981U) COMMA_SOURCE_FILE_AT_LINE (1876)) ;
    }
    if (GGS_uint (true, 3584U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 3584U) COMMA_SOURCE_FILE_AT_LINE (1877)) ;
    }
    if (GGS_uint (true, 8958U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 8958U) COMMA_SOURCE_FILE_AT_LINE (1878)) ;
    }
    if (GGS_uint (true, 18U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 18U) COMMA_SOURCE_FILE_AT_LINE (1879)) ;
    }
    var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 10U) COMMA_SOURCE_FILE_AT_LINE (1881)) ;
  }
  if (((var_cas_programSize)._operator_isNotEqual (var_cas_currentROMaddress)).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "Internal second pass error: the last address gets "))._operator_concat (var_cas_currentROMaddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (1885))))._operator_concat (GGS_string (true, " value in second pass, while it gets ")))._operator_concat (var_cas_programSize.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (1887))))._operator_concat (GGS_string (true, " in first pass")) COMMA_SOURCE_FILE_AT_LINE (1887)) ;
  }
  if (((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "generateAssembly" COMMA_SOURCE_FILE_AT_LINE (1891)))).isBuiltAndTrue ()) {
      GGS_string var_cas_assemblyCode ;
      ::routine_buildAssemblyCode (_inLexique,  var_cas_piccoloDeviceModel.reader_mDeviceName (_inLexique COMMA_SOURCE_FILE_AT_LINE (1894)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1894)),  var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (1895)),  var_cas_registerTable,  var_cas_generatedInstructionList,  var_cas_assemblyCode COMMA_SOURCE_FILE_AT_LINE (1892)) ;
      GGS_string var_cas_destinationFile ;
      var_cas_destinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (1900)))._operator_concat (GGS_string (true, ".asm")) ;
      const GGS_string _temp_66267 = var_cas_assemblyCode ;
      if (_temp_66267._isBuilt ()) {
        _temp_66267 (HERE)->method_writeToFileWhenDifferentContents (_inLexique, var_cas_destinationFile COMMA_SOURCE_FILE_AT_LINE (1901)) ;
      }
    }else{
      GGS_string var_cas_contents ;
      ::routine_getGeneratedContents (_inLexique,  var_cas_contents COMMA_SOURCE_FILE_AT_LINE (1903)) ;
      GGS_string var_cas_destinationFile ;
      var_cas_destinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (1905)))._operator_concat (GGS_string (true, ".hex")) ;
      const GGS_string _temp_66502 = var_cas_contents ;
      if (_temp_66502._isBuilt ()) {
        _temp_66502 (HERE)->method_writeToFileWhenDifferentContents (_inLexique, var_cas_destinationFile COMMA_SOURCE_FILE_AT_LINE (1906)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyze\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_piccolo_semantics (void) {
 enterCategoryMethod__instruction__decomposeComplexInstruction (category_method__instruction__decomposeComplexInstruction, gClassInfoFor__instruction.slotID ()) ;
 enterCategoryMethod__instruction__decomposeComplexInstruction ((typeCategoryMethod__instruction__decomposeComplexInstruction) category_method__instruction_FOREVER__decomposeComplexInstruction, gClassInfoFor__instruction_FOREVER.slotID ()) ;
 enterCategoryMethod__instruction__decomposeComplexInstruction ((typeCategoryMethod__instruction__decomposeComplexInstruction) category_method__instruction_IF_FA_SEMI_COLON__decomposeComplexInstruction, gClassInfoFor__instruction_IF_FA_SEMI_COLON.slotID ()) ;
 enterCategoryMethod__instruction__decomposeComplexInstruction ((typeCategoryMethod__instruction__decomposeComplexInstruction) category_method__instruction_IF_BitTest__decomposeComplexInstruction, gClassInfoFor__instruction_IF_BitTest.slotID ()) ;
 enterCategoryMethod__structured_if_condition__decomposeIFcondition ((typeCategoryMethod__structured_if_condition__decomposeIFcondition) category_method__bcc_in_structured_if_condition__decomposeIFcondition, gClassInfoFor__bcc_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__structured_if_condition__decomposeIFcondition ((typeCategoryMethod__structured_if_condition__decomposeIFcondition) category_method__bitTest_in_structured_if_condition__decomposeIFcondition, gClassInfoFor__bitTest_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__instruction__decomposeComplexInstruction ((typeCategoryMethod__instruction__decomposeComplexInstruction) category_method__instruction_structured_if__decomposeComplexInstruction, gClassInfoFor__instruction_structured_if.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode (category_method__instruction__buildAssemblyCode, gClassInfoFor__instruction.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__pseudo_ORG__buildAssemblyCode, gClassInfoFor__pseudo_ORG.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__pseudo_LABEL__buildAssemblyCode, gClassInfoFor__pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__registerExpression__buildAssemblyCode (category_method__registerExpression__buildAssemblyCode, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_FDA__buildAssemblyCode, gClassInfoFor__instruction_FDA.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_MOVFF__buildAssemblyCode, gClassInfoFor__instruction_MOVFF.slotID ()) ;
 enterCategoryMethod__bitNumberExpression__getBitNumber ((typeCategoryMethod__bitNumberExpression__getBitNumber) category_method__bitNumberLiteralValue__getBitNumber, gClassInfoFor__bitNumberLiteralValue.slotID ()) ;
 enterCategoryMethod__bitNumberExpression__getBitNumber ((typeCategoryMethod__bitNumberExpression__getBitNumber) category_method__bitNumberLabelValue__getBitNumber, gClassInfoFor__bitNumberLabelValue.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_FBA__buildAssemblyCode, gClassInfoFor__instruction_FBA.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_FA__buildAssemblyCode, gClassInfoFor__instruction_FA.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_conditionalBranch__buildAssemblyCode, gClassInfoFor__instruction_conditionalBranch.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_BRA__buildAssemblyCode, gClassInfoFor__instruction_BRA.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_CALL__buildAssemblyCode, gClassInfoFor__instruction_CALL.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_GOTO__buildAssemblyCode, gClassInfoFor__instruction_GOTO.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_RCALL__buildAssemblyCode, gClassInfoFor__instruction_RCALL.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_CLRWDT__buildAssemblyCode, gClassInfoFor__instruction_CLRWDT.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_DAW__buildAssemblyCode, gClassInfoFor__instruction_DAW.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_NOP__buildAssemblyCode, gClassInfoFor__instruction_NOP.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_POP__buildAssemblyCode, gClassInfoFor__instruction_POP.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_PUSH__buildAssemblyCode, gClassInfoFor__instruction_PUSH.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_RESET__buildAssemblyCode, gClassInfoFor__instruction_RESET.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_RETURN__buildAssemblyCode, gClassInfoFor__instruction_RETURN.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_RETFIE__buildAssemblyCode, gClassInfoFor__instruction_RETFIE.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_SLEEP__buildAssemblyCode, gClassInfoFor__instruction_SLEEP.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_literalOperation__buildAssemblyCode, gClassInfoFor__instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_LFSR__buildAssemblyCode, gClassInfoFor__instruction_LFSR.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_MOVAW__buildAssemblyCode, gClassInfoFor__instruction_MOVAW.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_MNOP__buildAssemblyCode, gClassInfoFor__instruction_MNOP.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_TBLRD__buildAssemblyCode, gClassInfoFor__instruction_TBLRD.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_TBLWT__buildAssemblyCode, gClassInfoFor__instruction_TBLWT.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_computed_retlw__buildAssemblyCode, gClassInfoFor__instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_computed_bra__buildAssemblyCode, gClassInfoFor__instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_computed_goto__buildAssemblyCode, gClassInfoFor__instruction_computed_goto.slotID ()) ;
 enterCategoryMethod__instruction__enterLabelAtAddress (category_method__instruction__enterLabelAtAddress, gClassInfoFor__instruction.slotID ()) ;
 enterCategoryMethod__instruction__enterLabelAtAddress ((typeCategoryMethod__instruction__enterLabelAtAddress) category_method__pseudo_LABEL__enterLabelAtAddress, gClassInfoFor__pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__instruction__enterLabelAtAddress ((typeCategoryMethod__instruction__enterLabelAtAddress) category_method__instruction_FOREVER__enterLabelAtAddress, gClassInfoFor__instruction_FOREVER.slotID ()) ;
 enterCategoryMethod__instruction__enterLabelAtAddress ((typeCategoryMethod__instruction__enterLabelAtAddress) category_method__instruction_structured_if__enterLabelAtAddress, gClassInfoFor__instruction_structured_if.slotID ()) ;
 enterCategoryMethod__registerExpression__getRegisterAddress (category_method__registerExpression__getRegisterAddress, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__registerExpression__getRegisterAddressingInformations (category_method__registerExpression__getRegisterAddressingInformations, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_FDA__generateCodeAtAddress, gClassInfoFor__instruction_FDA.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_FA__generateCodeAtAddress, gClassInfoFor__instruction_FA.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_MOVFF__generateCodeAtAddress, gClassInfoFor__instruction_MOVFF.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_FBA__generateCodeAtAddress, gClassInfoFor__instruction_FBA.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_conditionalBranch__generateCodeAtAddress, gClassInfoFor__instruction_conditionalBranch.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_BRA__generateCodeAtAddress, gClassInfoFor__instruction_BRA.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_GOTO__generateCodeAtAddress, gClassInfoFor__instruction_GOTO.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_CALL__generateCodeAtAddress, gClassInfoFor__instruction_CALL.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_RCALL__generateCodeAtAddress, gClassInfoFor__instruction_RCALL.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_CLRWDT__generateCodeAtAddress, gClassInfoFor__instruction_CLRWDT.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_DAW__generateCodeAtAddress, gClassInfoFor__instruction_DAW.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_NOP__generateCodeAtAddress, gClassInfoFor__instruction_NOP.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_POP__generateCodeAtAddress, gClassInfoFor__instruction_POP.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_PUSH__generateCodeAtAddress, gClassInfoFor__instruction_PUSH.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_RESET__generateCodeAtAddress, gClassInfoFor__instruction_RESET.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_RETURN__generateCodeAtAddress, gClassInfoFor__instruction_RETURN.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_SLEEP__generateCodeAtAddress, gClassInfoFor__instruction_SLEEP.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_literalOperation__generateCodeAtAddress, gClassInfoFor__instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_LFSR__generateCodeAtAddress, gClassInfoFor__instruction_LFSR.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_MOVLB__generateCodeAtAddress, gClassInfoFor__instruction_MOVLB.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__pseudo_LABEL__generateCodeAtAddress, gClassInfoFor__pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_MOVAW__generateCodeAtAddress, gClassInfoFor__instruction_MOVAW.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_TBLRD__generateCodeAtAddress, gClassInfoFor__instruction_TBLRD.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_TBLWT__generateCodeAtAddress, gClassInfoFor__instruction_TBLWT.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_MNOP__generateCodeAtAddress, gClassInfoFor__instruction_MNOP.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_FOREVER__generateCodeAtAddress, gClassInfoFor__instruction_FOREVER.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_IF_FA_SEMI_COLON__generateCodeAtAddress, gClassInfoFor__instruction_IF_FA_SEMI_COLON.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_IF_BitTest__generateCodeAtAddress, gClassInfoFor__instruction_IF_BitTest.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_computed_retlw__generateCodeAtAddress, gClassInfoFor__instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_computed_bra__generateCodeAtAddress, gClassInfoFor__instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_computed_goto__generateCodeAtAddress, gClassInfoFor__instruction_computed_goto.slotID ()) ;
 enterCategoryMethod__structured_if_condition__emitInstruction ((typeCategoryMethod__structured_if_condition__emitInstruction) category_method__bcc_in_structured_if_condition__emitInstruction, gClassInfoFor__bcc_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__structured_if_condition__emitInstruction ((typeCategoryMethod__structured_if_condition__emitInstruction) category_method__bitTest_in_structured_if_condition__emitInstruction, gClassInfoFor__bitTest_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_structured_if__generateCodeAtAddress, gClassInfoFor__instruction_structured_if.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_piccolo_semantics (prologueRoutineFor_piccolo_semantics,
                                   NULL) ;

//---------------------------------------------------------------------------*

