//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'piccolo_semantics.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       july 25th, 2008, at 9h49'9"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "piccolo_semantics.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_semantics.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                   Implementation of routine "analyze"                     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyze (C_Compiler & _inLexique,
                                const GGS_piccoloModel  var_cas_inPiccoloModel,
                                const GGS_string  var_cas_inSourceFileName COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyze at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_sourceFileBaseName ;
  var_cas_sourceFileBaseName = var_cas_inSourceFileName.reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (14)).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (14)) ;
  if (((var_cas_sourceFileBaseName)._operator_isNotEqual (var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (15)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (15)))).isBuiltAndTrue ()) {
    var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (16)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the program name ('"))._operator_concat (var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (16))))._operator_concat (GGS_string (true, "') should be identical to the file base name '")))._operator_concat (var_cas_sourceFileBaseName))._operator_concat (GGS_string (true, "'")) COMMA_SOURCE_FILE_AT_LINE (17)) ;
  }
  GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
  ::routine_parseDeviceDefinition (_inLexique,  var_cas_inPiccoloModel.reader_mDeviceName (_inLexique COMMA_SOURCE_FILE_AT_LINE (21)),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (20)) ;
  GGS_bool var_cas_hasHighInterrupt ;
  var_cas_hasHighInterrupt = GGS_bool (true, false) ;
  GGS_bool var_cas_hasLowInterrupt ;
  var_cas_hasLowInterrupt = GGS_bool (true, false) ;
  {
    GGS_interruptDefinitionList::cEnumerator enumerator_1515 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (25)), true) ;
    const GGS_interruptDefinitionList::cElement * operand_1515 = NULL ;
    while (((operand_1515 = enumerator_1515.nextObject ()))) {
      macroValidPointer (operand_1515) ;
      if (((operand_1515->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (26)))._operator_isEqual (GGS_string (true, "high"))).isBuiltAndTrue ()) {
        if ((var_cas_hasHighInterrupt).isBuiltAndTrue ()) {
          operand_1515->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Only one 'high' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (28)) ;
        }
        var_cas_hasHighInterrupt = GGS_bool (true, true) ;
      }else if (((operand_1515->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (31)))._operator_isEqual (GGS_string (true, "low"))).isBuiltAndTrue ()) {
        if ((var_cas_hasLowInterrupt).isBuiltAndTrue ()) {
          operand_1515->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Only one 'low' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (33)) ;
        }
        var_cas_hasLowInterrupt = GGS_bool (true, true) ;
      }else{
        operand_1515->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "An interrupt routine should be named 'low' or 'high'") COMMA_SOURCE_FILE_AT_LINE (37)) ;
      }
    }
  }
  GGS_ramBankTable  var_cas_ramBank ;
  var_cas_ramBank = var_cas_piccoloDeviceModel.reader_mRamBankTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (41)) ;
  GGS_registerTable  var_cas_registerTable ;
  var_cas_registerTable = var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (42)) ;
  {
    GGS_ramDefinitionList::cEnumerator enumerator_2285 (var_cas_inPiccoloModel.reader_mRamDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (43)), true) ;
    const GGS_ramDefinitionList::cElement * operand_2285 = NULL ;
    while (((operand_2285 = enumerator_2285.nextObject ()))) {
      macroValidPointer (operand_2285) ;
      GGS_uint  var_cas_lastAddressPlusOne ;
      GGS_uint  var_cas_firstFreeAddress ;
      const GGS_ramBankTable  _temp_2418 = var_cas_ramBank ;
      if (_temp_2418._isBuilt ()) {
        _temp_2418 (HERE)->method_searchKey (_inLexique, operand_2285->mBankName, var_cas_firstFreeAddress, var_cas_lastAddressPlusOne COMMA_SOURCE_FILE_AT_LINE (47)) ;
      }
      {
        GGS_declarationInRamList::cEnumerator enumerator_2492 (operand_2285->mDeclaration, true) ;
        const GGS_declarationInRamList::cElement * operand_2492 = NULL ;
        while (((operand_2492 = enumerator_2492.nextObject ()))) {
          macroValidPointer (operand_2492) ;
          if (((operand_2492->mSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (49)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
            operand_2492->mSize.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "zero size is not allowed") COMMA_SOURCE_FILE_AT_LINE (50)) ;
          }
          GGS_bitSliceTable  var_cas_bitSliceTable ;
          var_cas_bitSliceTable = GGS_bitSliceTable ::constructor_emptyMap (_inLexique COMMA_HERE) ;
          var_cas_registerTable.modifier_insertKey (_inLexique, operand_2492->mName, GGS_uintlist ::constructor_listWithValue (var_cas_firstFreeAddress), operand_2492->mSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (53)), var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (53)) ;
          var_cas_firstFreeAddress = var_cas_firstFreeAddress._add_operation (_inLexique, operand_2492->mSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (54)) COMMA_SOURCE_FILE_AT_LINE (54)) ;
          var_cas_ramBank.modifier_setMFirstFreeAddressForKey (_inLexique, var_cas_firstFreeAddress, operand_2285->mBankName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (55)) COMMA_SOURCE_FILE_AT_LINE (55)) ;
          if (((var_cas_firstFreeAddress)._operator_strictSup (var_cas_lastAddressPlusOne)).isBuiltAndTrue ()) {
            operand_2492->mName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "overflow in '"))._operator_concat (operand_2285->mBankName))._operator_concat (GGS_string (true, "' ram bank for '")))._operator_concat (operand_2492->mName))._operator_concat (GGS_string (true, "' declaration")) COMMA_SOURCE_FILE_AT_LINE (57)) ;
          }
        }
      }
    }
  }
  GGS_ipic_instructionList  var_cas_generatedInstructionList ;
  ::routine_buildAssemblyInstructionList (_inLexique,  var_cas_inPiccoloModel,  var_cas_hasHighInterrupt,  var_cas_hasLowInterrupt,  var_cas_generatedInstructionList COMMA_SOURCE_FILE_AT_LINE (64)) ;
  if (((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "doNotConvertRelative" COMMA_SOURCE_FILE_AT_LINE (72))))._operator_not ()).isBuiltAndTrue ()) {
    ::routine_convertRelativeBranchsToAbsoluteWhenNeeded (_inLexique,  var_cas_generatedInstructionList COMMA_SOURCE_FILE_AT_LINE (72)) ;
  }
  if (((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "generateAssembly" COMMA_SOURCE_FILE_AT_LINE (78)))).isBuiltAndTrue ()) {
      GGS_string var_cas_assemblyCode ;
      ::routine_buildAssemblyCode (_inLexique,  var_cas_piccoloDeviceModel.reader_mDeviceName (_inLexique COMMA_SOURCE_FILE_AT_LINE (81)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (81)),  var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (82)),  var_cas_registerTable,  var_cas_generatedInstructionList,  var_cas_assemblyCode COMMA_SOURCE_FILE_AT_LINE (79)) ;
      GGS_string var_cas_destinationFile ;
      var_cas_destinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (87)))._operator_concat (GGS_string (true, ".asm")) ;
      const GGS_string _temp_4179 = var_cas_assemblyCode ;
      if (_temp_4179._isBuilt ()) {
        _temp_4179 (HERE)->method_writeToFileWhenDifferentContents (_inLexique, var_cas_destinationFile COMMA_SOURCE_FILE_AT_LINE (88)) ;
      }
    }else{
      ::routine_buildBinaryCode (_inLexique,  var_cas_registerTable,  var_cas_generatedInstructionList COMMA_SOURCE_FILE_AT_LINE (89)) ;
      GGS_string var_cas_contents ;
      ::routine_getGeneratedContents (_inLexique,  var_cas_contents COMMA_SOURCE_FILE_AT_LINE (94)) ;
      GGS_string var_cas_destinationFile ;
      var_cas_destinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (96)))._operator_concat (GGS_string (true, ".hex")) ;
      const GGS_string _temp_4501 = var_cas_contents ;
      if (_temp_4501._isBuilt ()) {
        _temp_4501 (HERE)->method_writeToFileWhenDifferentContents (_inLexique, var_cas_destinationFile COMMA_SOURCE_FILE_AT_LINE (97)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyze\n") ;
  #endif
}

//---------------------------------------------------------------------------*

