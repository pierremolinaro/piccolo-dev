//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'piccolo_semantics.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      july 21th, 2008, at 11h26'53"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "piccolo_semantics.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_semantics.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "checkCurrentEmitAddress"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkCurrentEmitAddress (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inCurrentAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkCurrentEmitAddress at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_addr ;
  ::routine_currentEmitAddress (_inLexique,  var_cas_addr COMMA_SOURCE_FILE_AT_LINE (19)) ;
  if ((((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U)))._operator_and ((var_cas_addr)._operator_isNotEqual (var_cas_inCurrentAddress))).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (((GGS_string (true, "internal error: current emit address is "))._operator_concat (var_cas_addr.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (21))))._operator_concat (GGS_string (true, "; it should be ")))._operator_concat (var_cas_inCurrentAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (22))) COMMA_SOURCE_FILE_AT_LINE (22)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkCurrentEmitAddress\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'e_routineSymbolTable'                        *
//                                                                           *
//---------------------------------------------------------------------------*

e_routineSymbolTable::e_routineSymbolTable (void) :
mRoutineAddress (),
mRequiredSelectedBank () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     class map '@routineSymbolTable'                       *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_routineSymbolTable::
elementOf_GGS_routineSymbolTable (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_routineSymbolTable & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_routineSymbolTable::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mRoutineAddress.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mRequiredSelectedBank.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_routineSymbolTable::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_routineSymbolTable * _p = dynamic_cast <const elementOf_GGS_routineSymbolTable *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.mRoutineAddress._operator_isEqual (_p->mInfo.mRoutineAddress)).boolValue ()
           && (mInfo.mRequiredSelectedBank._operator_isEqual (_p->mInfo.mRequiredSelectedBank)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_routineSymbolTable::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_routineSymbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_routineSymbolTable * info = (e_routineSymbolTable *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_routineSymbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_routineSymbolTable * info = (e_routineSymbolTable *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_routineSymbolTable GGS_routineSymbolTable::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineSymbolTable result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_routineSymbolTable info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineSymbolTable::
_operator_isEqual (const GGS_routineSymbolTable & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineSymbolTable::
_operator_isNotEqual (const GGS_routineSymbolTable & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_uint & inParameter0,
                const GGS_uint & inParameter1,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inParameter1._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_routineSymbolTable info  ;
    info.mRoutineAddress = inParameter0 ;
    info.mRequiredSelectedBank = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_uint   & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    outParameter1._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mRoutineAddress ;
    outParameter1 = node->mInfo.mRequiredSelectedBank ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
modifier_setMRoutineAddressForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMRoutineAddressForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mRoutineAddress = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
modifier_setMRequiredSelectedBankForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMRequiredSelectedBankForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mRequiredSelectedBank = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0,
                                GGS_uint   & outParameter1 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "the '%K' routine is not declared",
                  inKey,
                  outParameter0,
                  outParameter1,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
modifier_insertKey (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0,
                                const GGS_uint & inParameter1 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "the '%K' routine is already declared in %L",
                 inKey,
                 inParameter0,
                 inParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_routineSymbolTable GGS_routineSymbolTable::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_routineSymbolTable & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineSymbolTable result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_routineSymbolTable GGS_routineSymbolTable::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_routineSymbolTable result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_routineSymbolTable::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @routineSymbolTable " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_routineSymbolTable::cEnumerator::_mRoutineAddress (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRoutineAddress ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_routineSymbolTable::cEnumerator::_mRequiredSelectedBank (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRequiredSelectedBank ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@instruction.enterLabelAtAddress'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction__enterLabelAtAddress (C_Compiler &,
                                const cPtr_instruction * operand_1245,
                                GGS_routineSymbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_uint  & /* var_cas_ioCurrentlySelectedBank */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1245 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Virtual Table for category method '@instruction.enterLabelAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__instruction__enterLabelAtAddress> gDispatchTableFor__instruction__enterLabelAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__instruction__enterLabelAtAddress (typeCategoryMethod__instruction__enterLabelAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__instruction__enterLabelAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__instruction__enterLabelAtAddress
findCategoryMethod__instruction__enterLabelAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__instruction__enterLabelAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__instruction__enterLabelAtAddress.count ()) {
    result = gDispatchTableFor__instruction__enterLabelAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__instruction__enterLabelAtAddress (superClassPtr) ;
      gDispatchTableFor__instruction__enterLabelAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_LABEL.enterLabelAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LABEL__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_LABEL * operand_1481,
                                GGS_routineSymbolTable  & var_cas_ioRoutineSymbolTable,
                                const GGS_uint   var_cas_inAddress,
                                GGS_uint  & var_cas_ioCurrentlySelectedBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1481 != NULL) {
    var_cas_ioRoutineSymbolTable.modifier_insertKey (_inLexique, operand_1481->mTargetLabel, var_cas_inAddress, var_cas_ioCurrentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (52)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_structured_if.enterLabelAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_structured_if__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_structured_if * operand_1793,
                                GGS_routineSymbolTable  & var_cas_ioRoutineSymbolTable,
                                const GGS_uint   var_cas_inAddress,
                                GGS_uint  & var_cas_ioCurrentlySelectedBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1793 != NULL) {
    GGS_uint  var_cas_address ;
    var_cas_address = var_cas_inAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (63)) ;
    {
      GGS_instructionList::cEnumerator enumerator_1958 (operand_1793->mThenInstructionList, true) ;
      const GGS_instructionList::cElement * operand_1958 = NULL ;
      while (((operand_1958 = enumerator_1958.nextObject ()))) {
        macroValidPointer (operand_1958) ;
        const GGS_instruction  _temp_2000 = operand_1958->mInstruction ;
        if (_temp_2000._isBuilt ()) {
          typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_2000._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_2000 (HERE), var_cas_ioRoutineSymbolTable, var_cas_address, var_cas_ioCurrentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (65)) ;
          }
        }
        GGS_uint  var_cas_lg ;
        const GGS_instruction  _temp_2133 = operand_1958->mInstruction ;
        if (_temp_2133._isBuilt ()) {
          _temp_2133 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (70)) ;
        }
        var_cas_address = var_cas_address._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (71)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_FOREVER.enterLabelAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FOREVER__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FOREVER * operand_2301,
                                GGS_routineSymbolTable  & var_cas_ioRoutineSymbolTable,
                                const GGS_uint   var_cas_inAddress,
                                GGS_uint  & var_cas_ioCurrentlySelectedBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2301 != NULL) {
    GGS_uint  var_cas_address ;
    var_cas_address = var_cas_inAddress ;
    {
      GGS_instructionList::cEnumerator enumerator_2462 (operand_2301->mInstructionList, true) ;
      const GGS_instructionList::cElement * operand_2462 = NULL ;
      while (((operand_2462 = enumerator_2462.nextObject ()))) {
        macroValidPointer (operand_2462) ;
        const GGS_instruction  _temp_2500 = operand_2462->mInstruction ;
        if (_temp_2500._isBuilt ()) {
          typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_2500._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_2500 (HERE), var_cas_ioRoutineSymbolTable, var_cas_address, var_cas_ioCurrentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (85)) ;
          }
        }
        GGS_uint  var_cas_lg ;
        const GGS_instruction  _temp_2633 = operand_2462->mInstruction ;
        if (_temp_2633._isBuilt ()) {
          _temp_2633 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (90)) ;
        }
        var_cas_address = var_cas_address._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (91)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of 'codeGenerationContext' struct              *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_codeGenerationContext::GGS_codeGenerationContext (void) :
mRoutineSymbolTable (),
mRegisterTable (),
mCurrentBank (),
mComputedGoto2RoutineAddress (),
mComputedGoto4RoutineAddress () {
}

//---------------------------------------------------------------------------*

GGS_codeGenerationContext::~GGS_codeGenerationContext (void) {
}

//---------------------------------------------------------------------------*

void GGS_codeGenerationContext::_drop (void) {
  mRoutineSymbolTable._drop () ;
  mRegisterTable._drop () ;
  mCurrentBank._drop () ;
  mComputedGoto2RoutineAddress._drop () ;
  mComputedGoto4RoutineAddress._drop () ;
}

//---------------------------------------------------------------------------*

bool GGS_codeGenerationContext::_isBuilt (void) const {
  return mRoutineSymbolTable._isBuilt ()
    && mRegisterTable._isBuilt ()
    && mCurrentBank._isBuilt ()
    && mComputedGoto2RoutineAddress._isBuilt ()
    && mComputedGoto4RoutineAddress._isBuilt () ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_codeGenerationContext::
_operator_isEqual (const GGS_codeGenerationContext & inOperand) const {
  return mRoutineSymbolTable._operator_isEqual (inOperand.mRoutineSymbolTable)
    ._operator_and (mRegisterTable._operator_isEqual (inOperand.mRegisterTable))
    ._operator_and (mCurrentBank._operator_isEqual (inOperand.mCurrentBank))
    ._operator_and (mComputedGoto2RoutineAddress._operator_isEqual (inOperand.mComputedGoto2RoutineAddress))
    ._operator_and (mComputedGoto4RoutineAddress._operator_isEqual (inOperand.mComputedGoto4RoutineAddress)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_codeGenerationContext::
_operator_isNotEqual (const GGS_codeGenerationContext & inOperand) const {
  return mRoutineSymbolTable._operator_isNotEqual (inOperand.mRoutineSymbolTable)
    ._operator_or (mRegisterTable._operator_isNotEqual (inOperand.mRegisterTable))
    ._operator_or (mCurrentBank._operator_isNotEqual (inOperand.mCurrentBank))
    ._operator_or (mComputedGoto2RoutineAddress._operator_isNotEqual (inOperand.mComputedGoto2RoutineAddress))
    ._operator_or (mComputedGoto4RoutineAddress._operator_isNotEqual (inOperand.mComputedGoto4RoutineAddress)) ;
}

//---------------------------------------------------------------------------*

GGS_codeGenerationContext GGS_codeGenerationContext::
constructor_new (const GGS_routineSymbolTable & argument_0,
                 const GGS_registerTable & argument_1,
                 const GGS_uint & argument_2,
                 const GGS_uint & argument_3,
                 const GGS_uint & argument_4) {
  GGS_codeGenerationContext result ;
  result.mRoutineSymbolTable = argument_0 ;
  result.mRegisterTable = argument_1 ;
  result.mCurrentBank = argument_2 ;
  result.mComputedGoto2RoutineAddress = argument_3 ;
  result.mComputedGoto4RoutineAddress = argument_4 ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_codeGenerationContext::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String _s ;
  _s << "<struct @codeGenerationContext" ;
  if (_isBuilt ()) {
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mRoutineSymbolTable " ;
    _s << mRoutineSymbolTable.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mRegisterTable " ;
    _s << mRegisterTable.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mCurrentBank " ;
    _s << mCurrentBank.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mComputedGoto2RoutineAddress " ;
    _s << mComputedGoto2RoutineAddress.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mComputedGoto4RoutineAddress " ;
    _s << mComputedGoto4RoutineAddress.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
  }else{
    _s << "not built" ;
  }
  _s << "\n" ;
  _s.writeStringMultiple ("| ", inIndentation) ;
  _s << ">" ;
  return GGS_string (true, _s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@registerExpression.getRegisterAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__getRegisterAddress (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_3401,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                GGS_uint  & var_cas_outRegisterAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3401 != NULL) {
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  var_cas_size ;
    GGS_bitSliceTable  automatic_var_0 ;
    const GGS_registerTable  _temp_3593 = var_cas_inCodeGenerationContext.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (117)) ;
    if (_temp_3593._isBuilt ()) {
      _temp_3593 (HERE)->method_searchKey (_inLexique, operand_3401->mRegisterName, var_cas_registerAddressList, var_cas_size, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (117)) ;
    }
    if (((operand_3401->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (118)))._operator_strictSup (var_cas_size)).isBuiltAndTrue ()) {
      operand_3401->mOffset.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "The index ("))._operator_concat (operand_3401->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (119)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (119))))._operator_concat (GGS_string (true, ") should be lower than size (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (119))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (119)) ;
    }
    const GGS_uintlist  _temp_3833 = var_cas_registerAddressList ;
    if (_temp_3833._isBuilt ()) {
      _temp_3833 (HERE)->method_first (_inLexique, var_cas_outRegisterAddress COMMA_SOURCE_FILE_AT_LINE (121)) ;
    }
    var_cas_outRegisterAddress = var_cas_outRegisterAddress._add_operation (_inLexique, operand_3401->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (122)) COMMA_SOURCE_FILE_AT_LINE (122)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@registerExpression.getRegisterAddress' *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__getRegisterAddress> gDispatchTableFor__registerExpression__getRegisterAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__getRegisterAddress (typeCategoryMethod__registerExpression__getRegisterAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__getRegisterAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__getRegisterAddress
findCategoryMethod__registerExpression__getRegisterAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__getRegisterAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__getRegisterAddress.count ()) {
    result = gDispatchTableFor__registerExpression__getRegisterAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__getRegisterAddress (superClassPtr) ;
      gDispatchTableFor__registerExpression__getRegisterAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@registerExpression.getRegisterAddressingInformations'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__getRegisterAddressingInformations (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_4035,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                GGS_uint  & var_cas_outRegisterAddress,
                                GGS_bool & var_cas_outUseBSRregister,
                                GGS_bitSliceTable  & var_cas_outBitSliceTable
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4035 != NULL) {
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  var_cas_size ;
    const GGS_registerTable  _temp_4304 = var_cas_inCodeGenerationContext.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (135)) ;
    if (_temp_4304._isBuilt ()) {
      _temp_4304 (HERE)->method_searchKey (_inLexique, operand_4035->mRegisterName, var_cas_registerAddressList, var_cas_size, var_cas_outBitSliceTable COMMA_SOURCE_FILE_AT_LINE (135)) ;
    }
    GGS_bool var_cas_found ;
    var_cas_found = GGS_bool (true, false) ;
    var_cas_outRegisterAddress = GGS_uint (true, 0U) ;
    {
      GGS_uintlist::cEnumerator enumerator_4440 (var_cas_registerAddressList, true) ;
      const GGS_uintlist::cElement * operand_4440 = NULL ;
      while (((operand_4440 = enumerator_4440.nextObject ()))
          && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_4440) ;
        var_cas_outRegisterAddress = operand_4440->mValue ;
        var_cas_found = ((operand_4440->mValue)._operator_strictInf (GGS_uint (true, 96U)))._operator_or ((operand_4440->mValue)._operator_supOrEqual (GGS_uint (true, 3936U))) ;
      }
    }
    var_cas_outUseBSRregister = GGS_bool (true, false) ;
    if ((((var_cas_found)._operator_not ())._operator_and ((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (143)))._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
      var_cas_outUseBSRregister = GGS_bool (true, true) ;
      GGS_uint  var_cas_lowBound ;
      var_cas_lowBound = var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (145))._multiply_operation (_inLexique, GGS_uint (true, 256U) COMMA_SOURCE_FILE_AT_LINE (145)) ;
      GGS_uint  var_cas_highBound ;
      var_cas_highBound = var_cas_lowBound._add_operation (_inLexique, GGS_uint (true, 255U) COMMA_SOURCE_FILE_AT_LINE (146)) ;
      {
        GGS_uintlist::cEnumerator enumerator_4845 (var_cas_registerAddressList, true) ;
        const GGS_uintlist::cElement * operand_4845 = NULL ;
        while (((operand_4845 = enumerator_4845.nextObject ()))
            && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
          macroValidPointer (operand_4845) ;
          var_cas_found = ((operand_4845->mValue)._operator_supOrEqual (var_cas_lowBound))._operator_and ((operand_4845->mValue)._operator_infOrEqual (var_cas_highBound)) ;
        }
      }
    }
    if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = ((GGS_string (true, "register '"))._operator_concat (operand_4035->mRegisterName))._operator_concat (GGS_string (true, "' at ")) ;
      {
        GGS_uintlist::cEnumerator enumerator_5076 (var_cas_registerAddressList, true) ;
        const GGS_uintlist::cElement * operand_5076 = enumerator_5076.nextObject () ;
        if ((operand_5076 != NULL)
            && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
          bool _foreach_loop_5076 ;
          do{
            macroValidPointer (operand_5076) ;
            var_cas_errorMessage._dotAssign_operation (operand_5076->mValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (155))) ;
            operand_5076 = enumerator_5076.nextObject () ;
            _foreach_loop_5076 = ((operand_5076 != NULL)
              && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) ;
            if (_foreach_loop_5076) {
              var_cas_errorMessage.writeString (", ") ;
            }
          }while (_foreach_loop_5076) ;
        }
      }
      var_cas_errorMessage.writeString (" cannot be accessed, neither throught access bank, neither with BSR value") ;
      if (((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (160)))._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString (" (unknown)") ;
      }else{
        var_cas_errorMessage.writeString (" (") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (163)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (163))) ;
        var_cas_errorMessage.writeString (")") ;
      }
      operand_4035->mRegisterName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (165)) ;
    }
    if (((var_cas_found)._operator_and ((operand_4035->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (167)))._operator_supOrEqual (var_cas_size))).isBuiltAndTrue ()) {
      operand_4035->mOffset.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "index ("))._operator_concat (operand_4035->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (168)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (168))))._operator_concat (GGS_string (true, ") is should be lower than size (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (168))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (168)) ;
    }
    var_cas_outRegisterAddress = var_cas_outRegisterAddress._add_operation (_inLexique, operand_4035->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (170)) COMMA_SOURCE_FILE_AT_LINE (170)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@registerExpression.getRegisterAddressingInformations'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__getRegisterAddressingInformations> gDispatchTableFor__registerExpression__getRegisterAddressingInformations ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__getRegisterAddressingInformations (typeCategoryMethod__registerExpression__getRegisterAddressingInformations inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__getRegisterAddressingInformations.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__getRegisterAddressingInformations
findCategoryMethod__registerExpression__getRegisterAddressingInformations (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__getRegisterAddressingInformations result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__getRegisterAddressingInformations.count ()) {
    result = gDispatchTableFor__registerExpression__getRegisterAddressingInformations (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__getRegisterAddressingInformations (superClassPtr) ;
      gDispatchTableFor__registerExpression__getRegisterAddressingInformations.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "checkInstructionIsReachable"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkInstructionIsReachable (C_Compiler & _inLexique,
                                GGS_bool & var_cas_ioIsReachable,
                                const GGS_location   var_cas_inErrorLocation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkInstructionIsReachable at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (((var_cas_ioIsReachable)._operator_not ()).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "dead code: execution cannot reach this instruction") COMMA_SOURCE_FILE_AT_LINE (177)) ;
  }
  var_cas_ioIsReachable = GGS_bool (true, true) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkInstructionIsReachable\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Virtual Table for category method '@instruction.generateCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__instruction__generateCodeAtAddress> gDispatchTableFor__instruction__generateCodeAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__instruction__generateCodeAtAddress (typeCategoryMethod__instruction__generateCodeAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__instruction__generateCodeAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__instruction__generateCodeAtAddress
findCategoryMethod__instruction__generateCodeAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__instruction__generateCodeAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__instruction__generateCodeAtAddress.count ()) {
    result = gDispatchTableFor__instruction__generateCodeAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__instruction__generateCodeAtAddress (superClassPtr) ;
      gDispatchTableFor__instruction__generateCodeAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_FDA.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FDA__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FDA * operand_6552,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6552 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_6552->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (196)) ;
    GGS_uint  var_cas_usedRegisterAddress ;
    GGS_bool var_cas_useBSRregister ;
    GGS_bitSliceTable  automatic_var_1 ;
    const GGS_registerExpression  _temp_6841 = operand_6552->mRegisterExpression ;
    if (_temp_6841._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_6841._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_6841 (HERE), var_cas_inCodeGenerationContext, var_cas_usedRegisterAddress, var_cas_useBSRregister, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (200)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_6552->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (207)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    if (((operand_6552->m_W_isDestination)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 512U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (214)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_FA.generateCodeAtAddress'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FA__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FA * operand_7337,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7337 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_7337->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (224)) ;
    GGS_uint  var_cas_usedRegisterAddress ;
    GGS_bool var_cas_useBSRregister ;
    GGS_bitSliceTable  automatic_var_2 ;
    const GGS_registerExpression  _temp_7626 = operand_7337->mRegisterExpression ;
    if (_temp_7626._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_7626._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_7626 (HERE), var_cas_inCodeGenerationContext, var_cas_usedRegisterAddress, var_cas_useBSRregister, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (228)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_7337->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (235)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (239)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_MOVFF.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVFF__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVFF * operand_8054,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8054 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_8054->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (249)) ;
    GGS_uint  var_cas_sourceRegisterAddress ;
    const GGS_registerExpression  _temp_8320 = operand_8054->mSourceRegisterName ;
    if (_temp_8320._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_8320._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_8320 (HERE), var_cas_inCodeGenerationContext, var_cas_sourceRegisterAddress COMMA_SOURCE_FILE_AT_LINE (252)) ;
      }
    }
    GGS_uint  var_cas_destinationRegisterAddress ;
    const GGS_registerExpression  _temp_8455 = operand_8054->mDestinationRegisterName ;
    if (_temp_8455._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_8455._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_8455 (HERE), var_cas_inCodeGenerationContext, var_cas_destinationRegisterAddress COMMA_SOURCE_FILE_AT_LINE (254)) ;
      }
    }
    if ((GGS_uint (true, 49152U))._operator_or (var_cas_sourceRegisterAddress)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 49152U))._operator_or (var_cas_sourceRegisterAddress) COMMA_SOURCE_FILE_AT_LINE (254)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or (var_cas_destinationRegisterAddress)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_destinationRegisterAddress) COMMA_SOURCE_FILE_AT_LINE (255)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Virtual Table for category method '@bitNumberExpression.getBitNumber'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__bitNumberExpression__getBitNumber> gDispatchTableFor__bitNumberExpression__getBitNumber ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__bitNumberExpression__getBitNumber (typeCategoryMethod__bitNumberExpression__getBitNumber inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__bitNumberExpression__getBitNumber.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__bitNumberExpression__getBitNumber
findCategoryMethod__bitNumberExpression__getBitNumber (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__bitNumberExpression__getBitNumber result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__bitNumberExpression__getBitNumber.count ()) {
    result = gDispatchTableFor__bitNumberExpression__getBitNumber (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__bitNumberExpression__getBitNumber (superClassPtr) ;
      gDispatchTableFor__bitNumberExpression__getBitNumber.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@bitNumberLiteralValue.getBitNumber'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLiteralValue__getBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLiteralValue * operand_8938,
                                const GGS_bitSliceTable   /* var_cas_inBitSliceTable */,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8938 != NULL) {
    if (((operand_8938->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (272)))._operator_strictSup (GGS_uint (true, 7U))).isBuiltAndTrue ()) {
      operand_8938->mBitNumberLiteralValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "The bit number is "))._operator_concat (operand_8938->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (273)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (273))))._operator_concat (GGS_string (true, " (should be <= 7)")) COMMA_SOURCE_FILE_AT_LINE (273)) ;
    }
    var_cas_outBitNumber = operand_8938->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (275)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@bitNumberLabelValue.getBitNumber'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLabelValue__getBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLabelValue * operand_9361,
                                const GGS_bitSliceTable   var_cas_inBitSliceTable,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9361 != NULL) {
    GGS_uint  var_cas_sliceIndex ;
    GGS_uint  var_cas_sliceSize ;
    const GGS_bitSliceTable  _temp_9492 = var_cas_inBitSliceTable ;
    if (_temp_9492._isBuilt ()) {
      _temp_9492 (HERE)->method_searchKey (_inLexique, operand_9361->mBitNumberLabelValue, var_cas_sliceIndex, var_cas_sliceSize COMMA_SOURCE_FILE_AT_LINE (286)) ;
    }
    if (((operand_9361->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (287)))._operator_strictSup (var_cas_sliceSize)).isBuiltAndTrue ()) {
      operand_9361->mBitNumberIndexValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "The "))._operator_concat (operand_9361->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (288)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (288))))._operator_concat (GGS_string (true, " index is too large (should be < ")))._operator_concat (var_cas_sliceSize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (289))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (289)) ;
    }
    var_cas_outBitNumber = var_cas_sliceIndex._add_operation (_inLexique, operand_9361->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (291)) COMMA_SOURCE_FILE_AT_LINE (291)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_FBA.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FBA__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FBA * operand_9939,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9939 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_9939->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (300)) ;
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_uint  var_cas_usedRegisterAddress ;
    GGS_bool var_cas_useBSRregister ;
    const GGS_registerExpression  _temp_10274 = operand_9939->mRegisterExpression ;
    if (_temp_10274._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_10274._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_10274 (HERE), var_cas_inCodeGenerationContext, var_cas_usedRegisterAddress, var_cas_useBSRregister, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (306)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_10450 = operand_9939->mBitNumber ;
    if (_temp_10450._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_10450._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_10450 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (314)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_9939->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (316)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    var_cas_code = (var_cas_code)._operator_or (var_cas_bitNumber._left_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (321))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (321)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "emitConditionalBranchInstruction"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitConditionalBranchInstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inConditionalBranchInstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_uint   var_cas_inConditionalBranchInstructionCode COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitConditionalBranchInstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (333))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (333))._substract_operation (_inLexique, var_cas_inConditionalBranchInstructionAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (333)) COMMA_SOURCE_FILE_AT_LINE (333))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (333)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 127L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 128L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for conditional branch instruction") COMMA_SOURCE_FILE_AT_LINE (335)) ;
  }
  if ((var_cas_inConditionalBranchInstructionCode)._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 255L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (338)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (var_cas_inConditionalBranchInstructionCode)._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 255L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (338))) COMMA_SOURCE_FILE_AT_LINE (336)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitConditionalBranchInstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_conditionalBranch.generateCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_conditionalBranch__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_conditionalBranch * operand_11502,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11502 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_11502->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (347)) ;
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  automatic_var_3 ;
    const GGS_routineSymbolTable  _temp_11779 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (350)) ;
    if (_temp_11779._isBuilt ()) {
      _temp_11779 (HERE)->method_searchKey (_inLexique, operand_11502->mTargetLabel, var_cas_targetAddress, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (350)) ;
    }
    GGS_uint  var_cas_baseCode ;
    operand_11502->method_getBaseCode (_inLexique, var_cas_baseCode COMMA_SOURCE_FILE_AT_LINE (352)) ;
    ::routine_emitConditionalBranchInstruction (_inLexique,  var_cas_inAddress,  var_cas_targetAddress,  operand_11502->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (356)),  var_cas_baseCode COMMA_SOURCE_FILE_AT_LINE (352)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "emitBRAinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitBRAinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inBRAinstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitBRAinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (368))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (368))._substract_operation (_inLexique, var_cas_inBRAinstructionAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (368)) COMMA_SOURCE_FILE_AT_LINE (368))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (368)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for BRA instruction") COMMA_SOURCE_FILE_AT_LINE (370)) ;
  }
  if ((GGS_uint (true, 53248U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (373)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 53248U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (373))) COMMA_SOURCE_FILE_AT_LINE (371)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitBRAinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_BRA.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_BRA__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_BRA * operand_12650,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12650 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_12650->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (382)) ;
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  automatic_var_4 ;
    const GGS_routineSymbolTable  _temp_12966 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (386)) ;
    if (_temp_12966._isBuilt ()) {
      _temp_12966 (HERE)->method_searchKey (_inLexique, operand_12650->mTargetLabel, var_cas_targetAddress, automatic_var_4 COMMA_SOURCE_FILE_AT_LINE (386)) ;
    }
    GGS_sint  var_cas_displacement ;
    var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (388))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (388))._substract_operation (_inLexique, var_cas_inAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (388)) COMMA_SOURCE_FILE_AT_LINE (388))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (388)) ;
    if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 2048L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 2048L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
      operand_12650->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for RCALL instruction") COMMA_SOURCE_FILE_AT_LINE (390)) ;
    }
    ::routine_emitBRAinstruction (_inLexique,  var_cas_inAddress,  var_cas_targetAddress,  operand_12650->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (396)) COMMA_SOURCE_FILE_AT_LINE (391)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitGOTOinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitGOTOinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitGOTOinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if ((GGS_uint (true, 61184U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (405)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 61184U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (405)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (404)) ;
  }
  if ((GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (406)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (406))) COMMA_SOURCE_FILE_AT_LINE (405)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitGOTOinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_GOTO.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_GOTO__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_GOTO * operand_13722,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13722 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_13722->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (415)) ;
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  automatic_var_5 ;
    const GGS_routineSymbolTable  _temp_14045 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (419)) ;
    if (_temp_14045._isBuilt ()) {
      _temp_14045 (HERE)->method_searchKey (_inLexique, operand_13722->mTargetLabel, var_cas_targetAddress, automatic_var_5 COMMA_SOURCE_FILE_AT_LINE (419)) ;
    }
    ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (419)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitCALLinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitCALLinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitCALLinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if ((GGS_uint (true, 60416U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (429)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 60416U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (429)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (428)) ;
  }
  if ((GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (430)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (430))) COMMA_SOURCE_FILE_AT_LINE (429)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitCALLinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_CALL.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CALL__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_CALL * operand_14513,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14513 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_14513->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (439)) ;
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  var_cas_requiredSelectedBank ;
    const GGS_routineSymbolTable  _temp_14828 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (443)) ;
    if (_temp_14828._isBuilt ()) {
      _temp_14828 (HERE)->method_searchKey (_inLexique, operand_14513->mTargetLabel, var_cas_targetAddress, var_cas_requiredSelectedBank COMMA_SOURCE_FILE_AT_LINE (443)) ;
    }
    if ((((var_cas_requiredSelectedBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredSelectedBank)._operator_isNotEqual (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (444))))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = ((GGS_string (true, "The routine requires the "))._operator_concat (var_cas_requiredSelectedBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (445))))._operator_concat (GGS_string (true, " bank to be selected, but ")) ;
      if (((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (447)))._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString ("no bank is currentled selected") ;
      }else{
        var_cas_errorMessage.writeString ("the ") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (450)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (450))) ;
        var_cas_errorMessage.writeString (" bank is currentled selected") ;
      }
      operand_14513->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (452)) ;
    }
    ::routine_emitCALLinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (453)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitRCALLinstruction"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitRCALLinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inRCALLinstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitRCALLinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (465))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (465))._substract_operation (_inLexique, var_cas_inRCALLinstructionAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (465)) COMMA_SOURCE_FILE_AT_LINE (465))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (465)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for RCALL instruction") COMMA_SOURCE_FILE_AT_LINE (467)) ;
  }
  if ((GGS_uint (true, 55296U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (470)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 55296U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (470))) COMMA_SOURCE_FILE_AT_LINE (468)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitRCALLinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_RCALL.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RCALL__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_RCALL * operand_16150,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16150 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_16150->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (479)) ;
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  var_cas_requiredSelectedBank ;
    const GGS_routineSymbolTable  _temp_16458 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (483)) ;
    if (_temp_16458._isBuilt ()) {
      _temp_16458 (HERE)->method_searchKey (_inLexique, operand_16150->mTargetLabel, var_cas_targetAddress, var_cas_requiredSelectedBank COMMA_SOURCE_FILE_AT_LINE (483)) ;
    }
    if ((((var_cas_requiredSelectedBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredSelectedBank)._operator_isNotEqual (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (484))))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = ((GGS_string (true, "The routine requires the "))._operator_concat (var_cas_requiredSelectedBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (485))))._operator_concat (GGS_string (true, " bank to be selected, but ")) ;
      if (((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (487)))._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString ("no bank is currentled selected") ;
      }else{
        var_cas_errorMessage.writeString ("the ") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (490)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (490))) ;
        var_cas_errorMessage.writeString (" bank is currentled selected") ;
      }
      operand_16150->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (492)) ;
    }
    ::routine_emitRCALLinstruction (_inLexique,  var_cas_inAddress,  var_cas_targetAddress,  operand_16150->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (498)) COMMA_SOURCE_FILE_AT_LINE (493)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_CLRWDT.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CLRWDT__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_CLRWDT * operand_17296,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17296 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_17296->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (508)) ;
    if (GGS_uint (true, 4U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (509)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_DAW.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_DAW__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_DAW * operand_17652,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17652 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_17652->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (519)) ;
    if (GGS_uint (true, 7U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (520)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_NOP.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_NOP__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_NOP * operand_18008,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18008 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_18008->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (530)) ;
    if (GGS_uint (true, 0U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (531)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_POP.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_POP__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_POP * operand_18364,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18364 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_18364->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (541)) ;
    if (GGS_uint (true, 6U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 6U) COMMA_SOURCE_FILE_AT_LINE (542)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_PUSH.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_PUSH__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_PUSH * operand_18721,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18721 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_18721->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (552)) ;
    if (GGS_uint (true, 5U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 5U) COMMA_SOURCE_FILE_AT_LINE (553)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_RESET.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RESET__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_RESET * operand_19079,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19079 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_19079->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (563)) ;
    if (GGS_uint (true, 255U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 255U) COMMA_SOURCE_FILE_AT_LINE (564)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_RETURN.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RETURN__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_RETURN * operand_19438,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19438 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_19438->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (574)) ;
    if (GGS_uint (true, 18U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 18U) COMMA_SOURCE_FILE_AT_LINE (575)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_SLEEP.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_SLEEP__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_SLEEP * operand_19796,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19796 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_19796->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (585)) ;
    if (GGS_uint (true, 3U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 3U) COMMA_SOURCE_FILE_AT_LINE (586)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_literalOperation.generateCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_literalOperation__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_literalOperation * operand_20165,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20165 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_20165->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (596)) ;
    if (((operand_20165->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (598)))._operator_strictSup (GGS_uint (true, 255U))).isBuiltAndTrue ()) {
      operand_20165->mLiteralValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "A literal value ("))._operator_concat (operand_20165->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (599)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (599))))._operator_concat (GGS_string (true, ") should be lower or equal to 255")) COMMA_SOURCE_FILE_AT_LINE (599)) ;
    }
    GGS_uint  var_cas_code ;
    operand_20165->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (602)) ;
    var_cas_code = (var_cas_code)._operator_or (operand_20165->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (603))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (603)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_LFSR.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LFSR__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_LFSR * operand_20783,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20783 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_20783->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (613)) ;
    if (((operand_20783->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (615)))._operator_strictSup (GGS_uint (true, 2U))).isBuiltAndTrue ()) {
      operand_20783->mFSRindex.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "LFSR index should be lower or equal to 2") COMMA_SOURCE_FILE_AT_LINE (616)) ;
    }
    GGS_uint  var_cas_sourceRegisterAddress ;
    const GGS_registerExpression  _temp_21157 = operand_20783->mRegisterExpression ;
    if (_temp_21157._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_21157._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_21157 (HERE), var_cas_inCodeGenerationContext, var_cas_sourceRegisterAddress COMMA_SOURCE_FILE_AT_LINE (619)) ;
      }
    }
    if (((GGS_uint (true, 60928U))._operator_or (operand_20783->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (620))._left_shift_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (620))))._operator_or (var_cas_sourceRegisterAddress._right_shift_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (620)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  ((GGS_uint (true, 60928U))._operator_or (operand_20783->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (620))._left_shift_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (620))))._operator_or (var_cas_sourceRegisterAddress._right_shift_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (620))) COMMA_SOURCE_FILE_AT_LINE (619)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or ((var_cas_sourceRegisterAddress)._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or ((var_cas_sourceRegisterAddress)._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (620)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_MOVLB.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVLB__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVLB * operand_21477,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21477 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_21477->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (630)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_LABEL.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LABEL__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_LABEL * operand_21814,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21814 != NULL) {
    var_cas_ioContinuesInSequence = GGS_bool (true, true) ;
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  var_cas_requiredSelectedBank ;
    const GGS_routineSymbolTable  _temp_22078 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (644)) ;
    if (_temp_22078._isBuilt ()) {
      _temp_22078 (HERE)->method_searchKey (_inLexique, operand_21814->mTargetLabel, var_cas_targetAddress, var_cas_requiredSelectedBank COMMA_SOURCE_FILE_AT_LINE (644)) ;
    }
    if (((var_cas_targetAddress)._operator_isNotEqual (var_cas_inAddress)).isBuiltAndTrue ()) {
      operand_21814->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((GGS_string (true, "Internal second pass error: the '"))._operator_concat (operand_21814->mTargetLabel))._operator_concat (GGS_string (true, "' label gets ")))._operator_concat (var_cas_inAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (647))))._operator_concat (GGS_string (true, " value in second pass, while it gets ")))._operator_concat (var_cas_targetAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (648))))._operator_concat (GGS_string (true, " in first pass")) COMMA_SOURCE_FILE_AT_LINE (648)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_MOVAW.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVAW__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVAW * operand_22527,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22527 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_22527->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (658)) ;
    GGS_uint  var_cas_registerAddress ;
    const GGS_registerExpression  _temp_22787 = operand_22527->mRegisterExpression ;
    if (_temp_22787._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_22787._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_22787 (HERE), var_cas_inCodeGenerationContext, var_cas_registerAddress COMMA_SOURCE_FILE_AT_LINE (661)) ;
      }
    }
    if (((var_cas_registerAddress)._operator_strictSup (GGS_uint (true, 255U))).isBuiltAndTrue ()) {
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "for MOVAW instruction, address ("))._operator_concat (var_cas_registerAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (666))))._operator_concat (GGS_string (true, ") should be lower or equal to 0xFF")) COMMA_SOURCE_FILE_AT_LINE (666)) ;
    }
    if ((GGS_uint (true, 3584U))._operator_or (var_cas_registerAddress)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 3584U))._operator_or (var_cas_registerAddress) COMMA_SOURCE_FILE_AT_LINE (667)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_TBLRD.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLRD__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_TBLRD * operand_23186,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23186 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_23186->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (677)) ;
    switch (operand_23186->mOption.enumValue ()) {
    case GGS_tableAccessOption::enum_simpleAccess:
      {
      if (GGS_uint (true, 8U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (680)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postIncrement:
      {
      if (GGS_uint (true, 9U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (681)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postDecrement:
      {
      if (GGS_uint (true, 10U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 10U) COMMA_SOURCE_FILE_AT_LINE (682)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_preIncrement:
      {
      if (GGS_uint (true, 11U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 11U) COMMA_SOURCE_FILE_AT_LINE (683)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_TBLWT.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLWT__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_TBLWT * operand_23723,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23723 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_23723->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (693)) ;
    switch (operand_23723->mOption.enumValue ()) {
    case GGS_tableAccessOption::enum_simpleAccess:
      {
      if (GGS_uint (true, 12U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 12U) COMMA_SOURCE_FILE_AT_LINE (696)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postIncrement:
      {
      if (GGS_uint (true, 13U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 13U) COMMA_SOURCE_FILE_AT_LINE (697)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postDecrement:
      {
      if (GGS_uint (true, 14U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 14U) COMMA_SOURCE_FILE_AT_LINE (698)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_preIncrement:
      {
      if (GGS_uint (true, 15U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 15U) COMMA_SOURCE_FILE_AT_LINE (699)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_MNOP.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MNOP__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_MNOP * operand_24259,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24259 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_24259->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (709)) ;
    if (((operand_24259->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (711)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      operand_24259->mOccurrenceFactor.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "No generated code") COMMA_SOURCE_FILE_AT_LINE (712)) ;
    }
    GGS_uint  var_cas_idx ;
    var_cas_idx = GGS_uint (true, 0U) ;
    GGS_uint _variant_24714 = operand_24259->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (715)) ;
    GGS_bool _condition_24714 (_variant_24714._isBuilt (), true) ;
    while (_condition_24714.isBuiltAndTrue ()) {
      _condition_24714 = (var_cas_idx)._operator_strictInf (operand_24259->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (716))) ;
      if (_condition_24714.isBuiltAndTrue ()) {
        if (_variant_24714.uintValue () == 0) {
          _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (719)) ;
          _condition_24714 = GGS_bool (true, false) ;
        }else{
          _variant_24714._decrement_operation (_inLexique COMMA_HERE) ;
          if (GGS_uint (true, 0U)._isBuilt ()) {
            ::routine_emitCode (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (717)) ;
          }
          var_cas_idx._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (719)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_FOREVER.generateCodeAtAddress'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FOREVER__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FOREVER * operand_24848,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24848 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_24848->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (729)) ;
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    GGS_uint  var_cas_currentAddress ;
    var_cas_currentAddress = var_cas_inAddress ;
    GGS_bool var_cas_continuesInSequence ;
    var_cas_continuesInSequence = GGS_bool (true, true) ;
    {
      GGS_instructionList::cEnumerator enumerator_25173 (operand_24848->mInstructionList, true) ;
      const GGS_instructionList::cElement * operand_25173 = NULL ;
      while (((operand_25173 = enumerator_25173.nextObject ()))) {
        macroValidPointer (operand_25173) ;
        const GGS_instruction  _temp_25211 = operand_25173->mInstruction ;
        if (_temp_25211._isBuilt ()) {
          typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_25211._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_25211 (HERE), var_cas_inCodeGenerationContext, var_cas_currentAddress, var_cas_continuesInSequence COMMA_SOURCE_FILE_AT_LINE (735)) ;
          }
        }
        GGS_uint  var_cas_lg ;
        const GGS_instruction  _temp_25328 = operand_25173->mInstruction ;
        if (_temp_25328._isBuilt ()) {
          _temp_25328 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (736)) ;
        }
        var_cas_currentAddress = var_cas_currentAddress._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (737)) ;
      }
    }
    ::routine_emitBRAinstruction (_inLexique,  var_cas_currentAddress,  var_cas_inAddress,  operand_24848->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (738)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_IF_SEMI_COLON.generateCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_SEMI_COLON__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_SEMI_COLON * operand_25656,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25656 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_25656->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (753)) ;
    GGS_uint  var_cas_registerAddress ;
    GGS_bool var_cas_useBSRregister ;
    GGS_bitSliceTable  automatic_var_6 ;
    const GGS_registerExpression  _temp_25934 = operand_25656->mRegisterExpression ;
    if (_temp_25934._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_25934._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_25934 (HERE), var_cas_inCodeGenerationContext, var_cas_registerAddress, var_cas_useBSRregister, automatic_var_6 COMMA_SOURCE_FILE_AT_LINE (757)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_25656->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (764)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_registerAddress)._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (768)) ;
    }
    GGS_bool var_cas_unusedContinuesInSequence ;
    var_cas_unusedContinuesInSequence = GGS_bool (true, true) ;
    const GGS_instruction  _temp_26295 = operand_25656->mInstruction ;
    if (_temp_26295._isBuilt ()) {
      typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_26295._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_26295 (HERE), var_cas_inCodeGenerationContext, var_cas_inAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (771)), var_cas_unusedContinuesInSequence COMMA_SOURCE_FILE_AT_LINE (771)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_IF_BitTest.generateCodeAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_BitTest__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_BitTest * operand_26512,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_26512 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_26512->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (780)) ;
    GGS_uint  var_cas_registerAddress ;
    GGS_bool var_cas_useBSRregister ;
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    const GGS_registerExpression  _temp_26822 = operand_26512->mRegisterExpression ;
    if (_temp_26822._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_26822._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_26822 (HERE), var_cas_inCodeGenerationContext, var_cas_registerAddress, var_cas_useBSRregister, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (785)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_26994 = operand_26512->mBitNumber ;
    if (_temp_26994._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_26994._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_26994 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (793)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_26512->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (795)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_registerAddress)._operator_and (GGS_uint (true, 255U))) ;
    var_cas_code = (var_cas_code)._operator_or (var_cas_bitNumber._left_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (800))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (800)) ;
    }
    GGS_bool var_cas_unusedContinuesInSequence ;
    var_cas_unusedContinuesInSequence = GGS_bool (true, true) ;
    const GGS_instruction  _temp_27316 = operand_26512->mInstruction ;
    if (_temp_27316._isBuilt ()) {
      typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_27316._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_27316 (HERE), var_cas_inCodeGenerationContext, var_cas_inAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (803)), var_cas_unusedContinuesInSequence COMMA_SOURCE_FILE_AT_LINE (803)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@instruction_computed_retlw.generateCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_retlw__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_retlw * operand_27537,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_27537 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_27537->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (812)) ;
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    if ((operand_27537->mUsesRelativeCall).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_inAddress,  var_cas_inCodeGenerationContext.reader_mComputedGoto2RoutineAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (816)),  operand_27537->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (815)) ;
    }else{
      ::routine_emitCALLinstruction (_inLexique,  var_cas_inCodeGenerationContext.reader_mComputedGoto2RoutineAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (818)) COMMA_SOURCE_FILE_AT_LINE (817)) ;
    }
    {
      GGS_luintlist::cEnumerator enumerator_28030 (operand_27537->mLiteralValues, true) ;
      const GGS_luintlist::cElement * operand_28030 = NULL ;
      while (((operand_28030 = enumerator_28030.nextObject ()))) {
        macroValidPointer (operand_28030) ;
        if (((operand_28030->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (821)))._operator_strictSup (GGS_uint (true, 255U))).isBuiltAndTrue ()) {
          GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "immediate value ("))._operator_concat (operand_28030->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (822)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (822))))._operator_concat (GGS_string (true, ") should be lower or equal to 255")) COMMA_SOURCE_FILE_AT_LINE (822)) ;
        }
        if ((GGS_uint (true, 3072U))._operator_or (operand_28030->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (824)))._isBuilt ()) {
          ::routine_emitCode (_inLexique,  (GGS_uint (true, 3072U))._operator_or (operand_28030->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (824))) COMMA_SOURCE_FILE_AT_LINE (823)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_computed_bra.generateCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_bra__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_bra * operand_28378,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_28378 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_28378->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (834)) ;
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    if ((operand_28378->mUsesRelativeCall).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_inAddress,  var_cas_inCodeGenerationContext.reader_mComputedGoto2RoutineAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (838)),  operand_28378->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (837)) ;
    }else{
      ::routine_emitCALLinstruction (_inLexique,  var_cas_inCodeGenerationContext.reader_mComputedGoto2RoutineAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (840)) COMMA_SOURCE_FILE_AT_LINE (839)) ;
    }
    GGS_uint  var_cas_address ;
    var_cas_address = var_cas_inAddress._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (842)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_28906 (operand_28378->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_28906 = NULL ;
      while (((operand_28906 = enumerator_28906.nextObject ()))) {
        macroValidPointer (operand_28906) ;
        GGS_uint  var_cas_targetAddress ;
        GGS_uint  var_cas_requiredSelectedBank ;
        const GGS_routineSymbolTable  _temp_29033 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (846)) ;
        if (_temp_29033._isBuilt ()) {
          _temp_29033 (HERE)->method_searchKey (_inLexique, operand_28906->mValue, var_cas_targetAddress, var_cas_requiredSelectedBank COMMA_SOURCE_FILE_AT_LINE (846)) ;
        }
        ::routine_emitBRAinstruction (_inLexique,  var_cas_address,  var_cas_targetAddress,  operand_28906->mValue.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (850)) COMMA_SOURCE_FILE_AT_LINE (846)) ;
        var_cas_address = var_cas_address._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (852)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_computed_goto.generateCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_goto__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_goto * operand_29353,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29353 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_29353->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (862)) ;
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    if ((operand_29353->mUsesRelativeCall).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_inAddress,  var_cas_inCodeGenerationContext.reader_mComputedGoto4RoutineAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (866)),  operand_29353->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (865)) ;
    }else{
      ::routine_emitCALLinstruction (_inLexique,  var_cas_inCodeGenerationContext.reader_mComputedGoto4RoutineAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (868)) COMMA_SOURCE_FILE_AT_LINE (867)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_29846 (operand_29353->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_29846 = NULL ;
      while (((operand_29846 = enumerator_29846.nextObject ()))) {
        macroValidPointer (operand_29846) ;
        GGS_uint  var_cas_targetAddress ;
        GGS_uint  var_cas_requiredSelectedBank ;
        const GGS_routineSymbolTable  _temp_29973 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (873)) ;
        if (_temp_29973._isBuilt ()) {
          _temp_29973 (HERE)->method_searchKey (_inLexique, operand_29846->mValue, var_cas_targetAddress, var_cas_requiredSelectedBank COMMA_SOURCE_FILE_AT_LINE (873)) ;
        }
        ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (873)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_structured_if.generateCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_structured_if__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_structured_if * operand_30225,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_30225 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_30225->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (886)) ;
    GGS_uint  var_cas_baseCode ;
    ::routine_getBccBaseCode (_inLexique,  operand_30225->mCondition,  var_cas_baseCode COMMA_SOURCE_FILE_AT_LINE (889)) ;
    GGS_uint  var_cas_thenInstructionsLength ;
    var_cas_thenInstructionsLength = GGS_uint (true, 0U) ;
    {
      GGS_instructionList::cEnumerator enumerator_30588 (operand_30225->mThenInstructionList, true) ;
      const GGS_instructionList::cElement * operand_30588 = NULL ;
      while (((operand_30588 = enumerator_30588.nextObject ()))) {
        macroValidPointer (operand_30588) ;
        GGS_uint  var_cas_lg ;
        const GGS_instruction  _temp_30641 = operand_30588->mInstruction ;
        if (_temp_30641._isBuilt ()) {
          _temp_30641 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (894)) ;
        }
        var_cas_thenInstructionsLength = var_cas_thenInstructionsLength._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (895)) ;
      }
    }
    ::routine_emitConditionalBranchInstruction (_inLexique,  var_cas_inAddress,  var_cas_inAddress._add_operation (_inLexique, var_cas_thenInstructionsLength COMMA_SOURCE_FILE_AT_LINE (900))._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (900)),  operand_30225->mInstructionLocation,  var_cas_baseCode COMMA_SOURCE_FILE_AT_LINE (896)) ;
    GGS_uint  var_cas_currentAddress ;
    var_cas_currentAddress = var_cas_inAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (905)) ;
    GGS_bool var_cas_continuesInSequence ;
    var_cas_continuesInSequence = GGS_bool (true, true) ;
    {
      GGS_instructionList::cEnumerator enumerator_31032 (operand_30225->mThenInstructionList, true) ;
      const GGS_instructionList::cElement * operand_31032 = NULL ;
      while (((operand_31032 = enumerator_31032.nextObject ()))) {
        macroValidPointer (operand_31032) ;
        const GGS_instruction  _temp_31074 = operand_31032->mInstruction ;
        if (_temp_31074._isBuilt ()) {
          typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_31074._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_31074 (HERE), var_cas_inCodeGenerationContext, var_cas_currentAddress, var_cas_continuesInSequence COMMA_SOURCE_FILE_AT_LINE (908)) ;
          }
        }
        GGS_uint  var_cas_lg ;
        const GGS_instruction  _temp_31214 = operand_31032->mInstruction ;
        if (_temp_31214._isBuilt ()) {
          _temp_31214 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (913)) ;
        }
        var_cas_currentAddress = var_cas_currentAddress._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (914)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Implementation of routine "analyze"                     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyze (C_Compiler & _inLexique,
                                const GGS_piccoloModel  var_cas_inPiccoloModel,
                                const GGS_string  var_cas_inSourceFileName COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyze at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_sourceFileBaseName ;
  var_cas_sourceFileBaseName = var_cas_inSourceFileName.reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (925)).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (925)) ;
  if (((var_cas_sourceFileBaseName)._operator_isNotEqual (var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (926)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (926)))).isBuiltAndTrue ()) {
    var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (927)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the program name ('"))._operator_concat (var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (927))))._operator_concat (GGS_string (true, "') should be identical to the file base name '")))._operator_concat (var_cas_sourceFileBaseName))._operator_concat (GGS_string (true, "'")) COMMA_SOURCE_FILE_AT_LINE (928)) ;
  }
  GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
  ::routine_parseDeviceDefinition (_inLexique,  var_cas_inPiccoloModel.reader_mDeviceName (_inLexique COMMA_SOURCE_FILE_AT_LINE (932)),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (931)) ;
  GGS_bool var_cas_hasHighInterrupt ;
  var_cas_hasHighInterrupt = GGS_bool (true, false) ;
  GGS_bool var_cas_hasLowInterrupt ;
  var_cas_hasLowInterrupt = GGS_bool (true, false) ;
  {
    GGS_interruptDefinitionList::cEnumerator enumerator_32434 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (936)), true) ;
    const GGS_interruptDefinitionList::cElement * operand_32434 = NULL ;
    while (((operand_32434 = enumerator_32434.nextObject ()))) {
      macroValidPointer (operand_32434) ;
      if (((operand_32434->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (937)))._operator_isEqual (GGS_string (true, "high"))).isBuiltAndTrue ()) {
        if ((var_cas_hasHighInterrupt).isBuiltAndTrue ()) {
          operand_32434->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Only one 'high' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (939)) ;
        }
        var_cas_hasHighInterrupt = GGS_bool (true, true) ;
      }else if (((operand_32434->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (942)))._operator_isEqual (GGS_string (true, "low"))).isBuiltAndTrue ()) {
        if ((var_cas_hasLowInterrupt).isBuiltAndTrue ()) {
          operand_32434->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Only one 'low' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (944)) ;
        }
        var_cas_hasLowInterrupt = GGS_bool (true, true) ;
      }else{
        operand_32434->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "An interrupt routine should be named 'low' or 'high'") COMMA_SOURCE_FILE_AT_LINE (948)) ;
      }
    }
  }
  GGS_uint  var_cas_currentROMaddress ;
  var_cas_currentROMaddress = GGS_uint (true, 24U) ;
  GGS_routineSymbolTable  var_cas_routineSymbolTable ;
  var_cas_routineSymbolTable = GGS_routineSymbolTable ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  if ((var_cas_hasLowInterrupt).isBuiltAndTrue ()) {
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_33224 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (956)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_33224 = NULL ;
      while (((operand_33224 = enumerator_33224.nextObject ()))) {
        macroValidPointer (operand_33224) ;
        if (((operand_33224->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (957)))._operator_isEqual (GGS_string (true, "low"))).isBuiltAndTrue ()) {
          GGS_uint  var_cas_currentlySelectedBank ;
          var_cas_currentlySelectedBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
          {
            GGS_instructionList::cEnumerator enumerator_33406 (operand_33224->mInstructionList, true) ;
            const GGS_instructionList::cElement * operand_33406 = NULL ;
            while (((operand_33406 = enumerator_33406.nextObject ()))) {
              macroValidPointer (operand_33406) ;
              const GGS_instruction  _temp_33450 = operand_33406->mInstruction ;
              if (_temp_33450._isBuilt ()) {
                typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_33450._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_33450 (HERE), var_cas_routineSymbolTable, var_cas_currentROMaddress, var_cas_currentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (960)) ;
                }
              }
              GGS_uint  var_cas_length ;
              const GGS_instruction  _temp_33586 = operand_33406->mInstruction ;
              if (_temp_33586._isBuilt ()) {
                _temp_33586 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (962)) ;
              }
              var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (963)) ;
            }
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (966)) ;
        }
      }
    }
  }
  GGS_uint  var_cas_highInterruptStartAddress ;
  var_cas_highInterruptStartAddress = var_cas_currentROMaddress ;
  if (((var_cas_hasLowInterrupt)._operator_not ()).isBuiltAndTrue ()) {
    var_cas_currentROMaddress = GGS_uint (true, 8U) ;
  }
  if ((var_cas_hasHighInterrupt).isBuiltAndTrue ()) {
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_34044 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (976)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_34044 = NULL ;
      while (((operand_34044 = enumerator_34044.nextObject ()))) {
        macroValidPointer (operand_34044) ;
        if (((operand_34044->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (977)))._operator_isEqual (GGS_string (true, "high"))).isBuiltAndTrue ()) {
          GGS_uint  var_cas_currentlySelectedBank ;
          var_cas_currentlySelectedBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
          {
            GGS_instructionList::cEnumerator enumerator_34227 (operand_34044->mInstructionList, true) ;
            const GGS_instructionList::cElement * operand_34227 = NULL ;
            while (((operand_34227 = enumerator_34227.nextObject ()))) {
              macroValidPointer (operand_34227) ;
              const GGS_instruction  _temp_34271 = operand_34227->mInstruction ;
              if (_temp_34271._isBuilt ()) {
                typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_34271._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_34271 (HERE), var_cas_routineSymbolTable, var_cas_currentROMaddress, var_cas_currentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (980)) ;
                }
              }
              GGS_uint  var_cas_length ;
              const GGS_instruction  _temp_34407 = operand_34227->mInstruction ;
              if (_temp_34407._isBuilt ()) {
                _temp_34407 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (982)) ;
              }
              var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (983)) ;
            }
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (986)) ;
        }
      }
    }
  }
  if ((((var_cas_hasHighInterrupt)._operator_not ())._operator_and ((var_cas_hasLowInterrupt)._operator_not ())).isBuiltAndTrue ()) {
    var_cas_currentROMaddress = GGS_uint (true, 4U) ;
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_34801 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (994)), true) ;
    const GGS_routineDefinitionList::cElement * operand_34801 = NULL ;
    while (((operand_34801 = enumerator_34801.nextObject ()))) {
      macroValidPointer (operand_34801) ;
      GGS_uint  var_cas_currentlySelectedBank ;
      var_cas_currentlySelectedBank = operand_34801->mBanksel.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (995)) ;
      var_cas_routineSymbolTable.modifier_insertKey (_inLexique, operand_34801->mRoutineName, var_cas_currentROMaddress, var_cas_currentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (996)) ;
      {
        GGS_instructionList::cEnumerator enumerator_35004 (operand_34801->mInstructionList, true) ;
        const GGS_instructionList::cElement * operand_35004 = NULL ;
        while (((operand_35004 = enumerator_35004.nextObject ()))) {
          macroValidPointer (operand_35004) ;
          const GGS_instruction  _temp_35044 = operand_35004->mInstruction ;
          if (_temp_35044._isBuilt ()) {
            typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_35044._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_35044 (HERE), var_cas_routineSymbolTable, var_cas_currentROMaddress, var_cas_currentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (998)) ;
            }
          }
          GGS_uint  var_cas_length ;
          const GGS_instruction  _temp_35172 = operand_35004->mInstruction ;
          if (_temp_35172._isBuilt ()) {
            _temp_35172 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1000)) ;
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1001)) ;
        }
      }
    }
  }
  GGS_uint  var_cas_computedGoto4RoutineAddress ;
  var_cas_computedGoto4RoutineAddress = var_cas_currentROMaddress ;
  GGS_uint  var_cas_computedGoto2RoutineAddress ;
  var_cas_computedGoto2RoutineAddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1006)) ;
  if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1007))).isBuiltAndTrue ()) {
    var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 12U) COMMA_SOURCE_FILE_AT_LINE (1008)) ;
  }else if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1009))).isBuiltAndTrue ()) {
    var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 10U) COMMA_SOURCE_FILE_AT_LINE (1010)) ;
  }
  GGS_ramBankTable  var_cas_ramBank ;
  var_cas_ramBank = var_cas_piccoloDeviceModel.reader_mRamBankTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (1013)) ;
  GGS_registerTable  var_cas_registerTable ;
  var_cas_registerTable = var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (1014)) ;
  {
    GGS_ramDefinitionList::cEnumerator enumerator_35872 (var_cas_inPiccoloModel.reader_mRamDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1015)), true) ;
    const GGS_ramDefinitionList::cElement * operand_35872 = NULL ;
    while (((operand_35872 = enumerator_35872.nextObject ()))) {
      macroValidPointer (operand_35872) ;
      GGS_uint  var_cas_lastAddressPlusOne ;
      GGS_uint  var_cas_firstFreeAddress ;
      const GGS_ramBankTable  _temp_36005 = var_cas_ramBank ;
      if (_temp_36005._isBuilt ()) {
        _temp_36005 (HERE)->method_searchKey (_inLexique, operand_35872->mBankName, var_cas_firstFreeAddress, var_cas_lastAddressPlusOne COMMA_SOURCE_FILE_AT_LINE (1019)) ;
      }
      {
        GGS_declarationInRamList::cEnumerator enumerator_36079 (operand_35872->mDeclaration, true) ;
        const GGS_declarationInRamList::cElement * operand_36079 = NULL ;
        while (((operand_36079 = enumerator_36079.nextObject ()))) {
          macroValidPointer (operand_36079) ;
          if (((operand_36079->mSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1021)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
            operand_36079->mSize.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "zero size is not allowed") COMMA_SOURCE_FILE_AT_LINE (1022)) ;
          }
          GGS_bitSliceTable  var_cas_bitSliceTable ;
          var_cas_bitSliceTable = GGS_bitSliceTable ::constructor_emptyMap (_inLexique COMMA_HERE) ;
          var_cas_registerTable.modifier_insertKey (_inLexique, operand_36079->mName, GGS_uintlist ::constructor_listWithValue (var_cas_firstFreeAddress), operand_36079->mSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1025)), var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (1025)) ;
          var_cas_firstFreeAddress = var_cas_firstFreeAddress._add_operation (_inLexique, operand_36079->mSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1026)) COMMA_SOURCE_FILE_AT_LINE (1026)) ;
          var_cas_ramBank.modifier_setMFirstFreeAddressForKey (_inLexique, var_cas_firstFreeAddress, operand_35872->mBankName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1027)) COMMA_SOURCE_FILE_AT_LINE (1027)) ;
          if (((var_cas_firstFreeAddress)._operator_strictSup (var_cas_lastAddressPlusOne)).isBuiltAndTrue ()) {
            operand_36079->mName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "overflow in '"))._operator_concat (operand_35872->mBankName))._operator_concat (GGS_string (true, "' ram bank for '")))._operator_concat (operand_36079->mName))._operator_concat (GGS_string (true, "' declaration")) COMMA_SOURCE_FILE_AT_LINE (1029)) ;
          }
        }
      }
    }
  }
  GGS_uint  var_cas_programSize ;
  var_cas_programSize = var_cas_currentROMaddress ;
  if (GGS_uint (true, 0U)._isBuilt ()) {
    ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (1034)) ;
  }
  if (((var_cas_routineSymbolTable.reader_hasKey (_inLexique, GGS_string (true, "main") COMMA_SOURCE_FILE_AT_LINE (1038)))._operator_not ()).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "there is no 'main' routine") COMMA_SOURCE_FILE_AT_LINE (1039)) ;
  }else{
    GGS_uint  var_cas_mainRoutineAddress ;
    GGS_uint  automatic_var_7 ;
    const GGS_routineSymbolTable  _temp_37108 = var_cas_routineSymbolTable ;
    if (_temp_37108._isBuilt ()) {
      _temp_37108 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "main"), GGS_location (_inLexique) COMMA_HERE), var_cas_mainRoutineAddress, automatic_var_7 COMMA_SOURCE_FILE_AT_LINE (1042)) ;
    }
    if ((GGS_uint (true, 61184U))._operator_or ((var_cas_mainRoutineAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1043)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61184U))._operator_or ((var_cas_mainRoutineAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1043)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (1042)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or (var_cas_mainRoutineAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (1044)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_mainRoutineAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (1044))) COMMA_SOURCE_FILE_AT_LINE (1043)) ;
    }
  }
  if (((var_cas_hasHighInterrupt)._operator_and (var_cas_hasLowInterrupt)).isBuiltAndTrue ()) {
    if (GGS_uint (true, 8U)._isBuilt ()) {
      ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (1049)) ;
    }
    if ((GGS_uint (true, 61184U))._operator_or ((var_cas_highInterruptStartAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1051)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61184U))._operator_or ((var_cas_highInterruptStartAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1051)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (1050)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or (var_cas_highInterruptStartAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (1052)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_highInterruptStartAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (1052))) COMMA_SOURCE_FILE_AT_LINE (1051)) ;
    }
  }
  GGS_codeGenerationContext var_cas_codeGenerationContext ;
  var_cas_codeGenerationContext = GGS_codeGenerationContext::constructor_new (var_cas_routineSymbolTable, var_cas_registerTable, GGS_uint (true, 0U), var_cas_computedGoto2RoutineAddress, var_cas_computedGoto4RoutineAddress) ;
  var_cas_currentROMaddress = GGS_uint (true, 24U) ;
  if ((var_cas_hasLowInterrupt).isBuiltAndTrue ()) {
    if (GGS_uint (true, 24U)._isBuilt ()) {
      ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (1064)) ;
    }
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_38096 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1066)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_38096 = NULL ;
      while (((operand_38096 = enumerator_38096.nextObject ()))) {
        macroValidPointer (operand_38096) ;
        if (((operand_38096->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1067)))._operator_isEqual (GGS_string (true, "low"))).isBuiltAndTrue ()) {
          var_cas_codeGenerationContext.mCurrentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
          GGS_bool var_cas_continuesInSequence ;
          var_cas_continuesInSequence = GGS_bool (true, true) ;
          {
            GGS_instructionList::cEnumerator enumerator_38327 (operand_38096->mInstructionList, true) ;
            const GGS_instructionList::cElement * operand_38327 = NULL ;
            while (((operand_38327 = enumerator_38327.nextObject ()))) {
              macroValidPointer (operand_38327) ;
              const GGS_instruction  _temp_38371 = operand_38327->mInstruction ;
              if (_temp_38371._isBuilt ()) {
                typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_38371._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_38371 (HERE), var_cas_codeGenerationContext, var_cas_currentROMaddress, var_cas_continuesInSequence COMMA_SOURCE_FILE_AT_LINE (1071)) ;
                }
              }
              GGS_uint  var_cas_length ;
              const GGS_instruction  _temp_38509 = operand_38327->mInstruction ;
              if (_temp_38509._isBuilt ()) {
                _temp_38509 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1073)) ;
              }
              var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1074)) ;
              ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (1074)) ;
            }
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1077)) ;
          if (GGS_uint (true, 17U)._isBuilt ()) {
            ::routine_emitCode (_inLexique,  GGS_uint (true, 17U) COMMA_SOURCE_FILE_AT_LINE (1077)) ;
          }
          ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (1078)) ;
        }
      }
    }
  }
  if (((var_cas_hasLowInterrupt)._operator_not ()).isBuiltAndTrue ()) {
    var_cas_currentROMaddress = GGS_uint (true, 8U) ;
    if (GGS_uint (true, 8U)._isBuilt ()) {
      ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (1085)) ;
    }
  }
  if ((var_cas_hasHighInterrupt).isBuiltAndTrue ()) {
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_39046 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1089)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_39046 = NULL ;
      while (((operand_39046 = enumerator_39046.nextObject ()))) {
        macroValidPointer (operand_39046) ;
        if (((operand_39046->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1090)))._operator_isEqual (GGS_string (true, "high"))).isBuiltAndTrue ()) {
          var_cas_codeGenerationContext.mCurrentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
          GGS_bool var_cas_continuesInSequence ;
          var_cas_continuesInSequence = GGS_bool (true, true) ;
          {
            GGS_instructionList::cEnumerator enumerator_39278 (operand_39046->mInstructionList, true) ;
            const GGS_instructionList::cElement * operand_39278 = NULL ;
            while (((operand_39278 = enumerator_39278.nextObject ()))) {
              macroValidPointer (operand_39278) ;
              const GGS_instruction  _temp_39322 = operand_39278->mInstruction ;
              if (_temp_39322._isBuilt ()) {
                typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_39322._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_39322 (HERE), var_cas_codeGenerationContext, var_cas_currentROMaddress, var_cas_continuesInSequence COMMA_SOURCE_FILE_AT_LINE (1094)) ;
                }
              }
              GGS_uint  var_cas_length ;
              const GGS_instruction  _temp_39460 = operand_39278->mInstruction ;
              if (_temp_39460._isBuilt ()) {
                _temp_39460 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1096)) ;
              }
              var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1097)) ;
              ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (1097)) ;
            }
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1100)) ;
          if (GGS_uint (true, 17U)._isBuilt ()) {
            ::routine_emitCode (_inLexique,  GGS_uint (true, 17U) COMMA_SOURCE_FILE_AT_LINE (1100)) ;
          }
          ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (1101)) ;
        }
      }
    }
  }
  if ((((var_cas_hasLowInterrupt)._operator_not ())._operator_and ((var_cas_hasHighInterrupt)._operator_not ())).isBuiltAndTrue ()) {
    var_cas_currentROMaddress = GGS_uint (true, 4U) ;
    if (GGS_uint (true, 4U)._isBuilt ()) {
      ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (1108)) ;
    }
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_39972 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1111)), true) ;
    const GGS_routineDefinitionList::cElement * operand_39972 = NULL ;
    while (((operand_39972 = enumerator_39972.nextObject ()))) {
      macroValidPointer (operand_39972) ;
      var_cas_codeGenerationContext.mCurrentBank = operand_39972->mBanksel.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1112)) ;
      if ((((operand_39972->mRoutineName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1113)))._operator_isEqual (GGS_string (true, "main")))._operator_and ((operand_39972->mBanksel.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1113)))._operator_isNotEqual (GGS_uint (true, 0U)))).isBuiltAndTrue ()) {
        operand_39972->mRoutineName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "as PIC18 is started with BSR register set to 0, the 'main' routine requires the 'banksel 0' declaration") COMMA_SOURCE_FILE_AT_LINE (1114)) ;
      }
      if ((((operand_39972->mRoutineName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1116)))._operator_isEqual (GGS_string (true, "main")))._operator_and ((operand_39972->mHasNoReturn)._operator_not ())).isBuiltAndTrue ()) {
        operand_39972->mRoutineName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "as the 'main' routine is an endless loop, it should be declared with 'noreturn' qualifier") COMMA_SOURCE_FILE_AT_LINE (1117)) ;
      }
      GGS_bool var_cas_continuesInSequence ;
      var_cas_continuesInSequence = GGS_bool (true, true) ;
      {
        GGS_instructionList::cEnumerator enumerator_40541 (operand_39972->mInstructionList, true) ;
        const GGS_instructionList::cElement * operand_40541 = NULL ;
        while (((operand_40541 = enumerator_40541.nextObject ()))) {
          macroValidPointer (operand_40541) ;
          const GGS_instruction  _temp_40581 = operand_40541->mInstruction ;
          if (_temp_40581._isBuilt ()) {
            typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_40581._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_40581 (HERE), var_cas_codeGenerationContext, var_cas_currentROMaddress, var_cas_continuesInSequence COMMA_SOURCE_FILE_AT_LINE (1121)) ;
            }
          }
          GGS_uint  var_cas_length ;
          const GGS_instruction  _temp_40711 = operand_40541->mInstruction ;
          if (_temp_40711._isBuilt ()) {
            _temp_40711 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1123)) ;
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1124)) ;
          ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (1124)) ;
        }
      }
    }
  }
  if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1129))).isBuiltAndTrue ()) {
    if (GGS_uint (true, 9448U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 9448U) COMMA_SOURCE_FILE_AT_LINE (1129)) ;
    }
    var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1131)) ;
  }
  if (((var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1133)))._operator_or (var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1133)))).isBuiltAndTrue ()) {
    if (GGS_uint (true, 9448U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 9448U) COMMA_SOURCE_FILE_AT_LINE (1133)) ;
    }
    if (GGS_uint (true, 9981U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 9981U) COMMA_SOURCE_FILE_AT_LINE (1134)) ;
    }
    if (GGS_uint (true, 3584U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 3584U) COMMA_SOURCE_FILE_AT_LINE (1135)) ;
    }
    if (GGS_uint (true, 8958U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 8958U) COMMA_SOURCE_FILE_AT_LINE (1136)) ;
    }
    if (GGS_uint (true, 18U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 18U) COMMA_SOURCE_FILE_AT_LINE (1137)) ;
    }
    var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 10U) COMMA_SOURCE_FILE_AT_LINE (1139)) ;
  }
  if (((var_cas_programSize)._operator_isNotEqual (var_cas_currentROMaddress)).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "Internal second pass error: the last address gets "))._operator_concat (var_cas_currentROMaddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (1143))))._operator_concat (GGS_string (true, " value in second pass, while it gets ")))._operator_concat (var_cas_programSize.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (1145))))._operator_concat (GGS_string (true, " in first pass")) COMMA_SOURCE_FILE_AT_LINE (1145)) ;
  }
  if (((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    GGS_string var_cas_contents ;
    ::routine_getGeneratedContents (_inLexique,  var_cas_contents COMMA_SOURCE_FILE_AT_LINE (1149)) ;
    GGS_string var_cas_destinationFile ;
    var_cas_destinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (1151)))._operator_concat (GGS_string (true, ".hex")) ;
    const GGS_string _temp_41994 = var_cas_contents ;
    if (_temp_41994._isBuilt ()) {
      _temp_41994 (HERE)->method_writeToFile (_inLexique, var_cas_destinationFile COMMA_SOURCE_FILE_AT_LINE (1152)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyze\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_piccolo_semantics (void) {
 enterCategoryMethod__instruction__enterLabelAtAddress (category_method__instruction__enterLabelAtAddress, gClassInfoFor__instruction.slotID ()) ;
 enterCategoryMethod__instruction__enterLabelAtAddress ((typeCategoryMethod__instruction__enterLabelAtAddress) category_method__instruction_LABEL__enterLabelAtAddress, gClassInfoFor__instruction_LABEL.slotID ()) ;
 enterCategoryMethod__instruction__enterLabelAtAddress ((typeCategoryMethod__instruction__enterLabelAtAddress) category_method__instruction_structured_if__enterLabelAtAddress, gClassInfoFor__instruction_structured_if.slotID ()) ;
 enterCategoryMethod__instruction__enterLabelAtAddress ((typeCategoryMethod__instruction__enterLabelAtAddress) category_method__instruction_FOREVER__enterLabelAtAddress, gClassInfoFor__instruction_FOREVER.slotID ()) ;
 enterCategoryMethod__registerExpression__getRegisterAddress (category_method__registerExpression__getRegisterAddress, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__registerExpression__getRegisterAddressingInformations (category_method__registerExpression__getRegisterAddressingInformations, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_FDA__generateCodeAtAddress, gClassInfoFor__instruction_FDA.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_FA__generateCodeAtAddress, gClassInfoFor__instruction_FA.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_MOVFF__generateCodeAtAddress, gClassInfoFor__instruction_MOVFF.slotID ()) ;
 enterCategoryMethod__bitNumberExpression__getBitNumber ((typeCategoryMethod__bitNumberExpression__getBitNumber) category_method__bitNumberLiteralValue__getBitNumber, gClassInfoFor__bitNumberLiteralValue.slotID ()) ;
 enterCategoryMethod__bitNumberExpression__getBitNumber ((typeCategoryMethod__bitNumberExpression__getBitNumber) category_method__bitNumberLabelValue__getBitNumber, gClassInfoFor__bitNumberLabelValue.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_FBA__generateCodeAtAddress, gClassInfoFor__instruction_FBA.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_conditionalBranch__generateCodeAtAddress, gClassInfoFor__instruction_conditionalBranch.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_BRA__generateCodeAtAddress, gClassInfoFor__instruction_BRA.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_GOTO__generateCodeAtAddress, gClassInfoFor__instruction_GOTO.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_CALL__generateCodeAtAddress, gClassInfoFor__instruction_CALL.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_RCALL__generateCodeAtAddress, gClassInfoFor__instruction_RCALL.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_CLRWDT__generateCodeAtAddress, gClassInfoFor__instruction_CLRWDT.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_DAW__generateCodeAtAddress, gClassInfoFor__instruction_DAW.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_NOP__generateCodeAtAddress, gClassInfoFor__instruction_NOP.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_POP__generateCodeAtAddress, gClassInfoFor__instruction_POP.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_PUSH__generateCodeAtAddress, gClassInfoFor__instruction_PUSH.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_RESET__generateCodeAtAddress, gClassInfoFor__instruction_RESET.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_RETURN__generateCodeAtAddress, gClassInfoFor__instruction_RETURN.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_SLEEP__generateCodeAtAddress, gClassInfoFor__instruction_SLEEP.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_literalOperation__generateCodeAtAddress, gClassInfoFor__instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_LFSR__generateCodeAtAddress, gClassInfoFor__instruction_LFSR.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_MOVLB__generateCodeAtAddress, gClassInfoFor__instruction_MOVLB.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_LABEL__generateCodeAtAddress, gClassInfoFor__instruction_LABEL.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_MOVAW__generateCodeAtAddress, gClassInfoFor__instruction_MOVAW.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_TBLRD__generateCodeAtAddress, gClassInfoFor__instruction_TBLRD.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_TBLWT__generateCodeAtAddress, gClassInfoFor__instruction_TBLWT.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_MNOP__generateCodeAtAddress, gClassInfoFor__instruction_MNOP.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_FOREVER__generateCodeAtAddress, gClassInfoFor__instruction_FOREVER.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_IF_SEMI_COLON__generateCodeAtAddress, gClassInfoFor__instruction_IF_SEMI_COLON.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_IF_BitTest__generateCodeAtAddress, gClassInfoFor__instruction_IF_BitTest.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_computed_retlw__generateCodeAtAddress, gClassInfoFor__instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_computed_bra__generateCodeAtAddress, gClassInfoFor__instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_computed_goto__generateCodeAtAddress, gClassInfoFor__instruction_computed_goto.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_structured_if__generateCodeAtAddress, gClassInfoFor__instruction_structured_if.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_piccolo_semantics (prologueRoutineFor_piccolo_semantics,
                                   NULL) ;

//---------------------------------------------------------------------------*

