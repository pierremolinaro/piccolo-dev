//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'piccolo_semantics.h'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       july 16th, 2008, at 20h2'15"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef piccolo_semantics_DEFINED
#define piccolo_semantics_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_binaryset.h"
#include "galgas/GGS_filewrapper.h"
#include "galgas/predefined_types.h"
#include "galgas/AC_galgas_class.h"
#include "galgas/AC_galgas_domain.h"
#include "galgas/AC_galgas_mapindex.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_listmap.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

// Include imported semantics
#include "piccolo_embedded_devices.h"
#include "piccolo_metamodel.h"
#include "piccolo_options.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_routineSymbolTable ;
class GGS_registerTable ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        Map '@routineSymbolTable'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_routineSymbolTable ;

class GGS_routineSymbolTable : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_routineSymbolTable cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_routineSymbolTable & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_routineSymbolTable & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_routineSymbolTable * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_routineSymbolTable * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_routineSymbolTable constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"
  public : void modifier_setMRoutineAddressForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint &  inParameter0 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_uint & inParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_uint & outParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_routineSymbolTable constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_routineSymbolTable & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_routineSymbolTable reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_routineSymbolTable & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_routineSymbolTable & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_uint   & _mRoutineAddress (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@instruction.enterLabelAtAddress'             *
//                                                                           *
//---------------------------------------------------------------------------*

typedef void (*typeCategoryMethod__instruction__enterLabelAtAddress)  (C_Compiler & _inLexique,
                                const cPtr_instruction * inObjectPtr,
                                GGS_routineSymbolTable  & var_cas_ioRoutineSymbolTable,
                                const GGS_uint   var_cas_inAddress
                                COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__instruction__enterLabelAtAddress (typeCategoryMethod__instruction__enterLabelAtAddress inRoutine,
                     const sint32 inClassID) ;

//---------------------------------------------------------------------------*

typeCategoryMethod__instruction__enterLabelAtAddress
findCategoryMethod__instruction__enterLabelAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                           Map '@registerTable'                            *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_registerTable ;

class GGS_registerTable : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_registerTable cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_registerTable & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_registerTable & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_registerTable * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_registerTable * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_registerTable constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"
  public : void modifier_setMRegisterAddressForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;
  public : void modifier_setMSizeForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint &  inParameter0,
                                const GGS_uint &  inParameter1 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0,
                                GGS_uint   & outParameter1 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_uint & inParameter0,
                                   const GGS_uint & inParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_uint & outParameter0,
                                   GGS_uint & outParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_registerTable constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_registerTable & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_registerTable reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_registerTable & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_registerTable & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_uint   & _mRegisterAddress (LOCATION_ARGS) const ;
    public : /* const */ GGS_uint   & _mSize (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            Routine 'analyze'                              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyze (C_Compiler &,
                                const GGS_piccoloModel  COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of map '@routineSymbolTable'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class e_routineSymbolTable {
  public : GGS_uint  mRoutineAddress ;

  public : e_routineSymbolTable (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_routineSymbolTable : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_routineSymbolTable (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_routineSymbolTable & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_routineSymbolTable * nextObject (void) const { return (elementOf_GGS_routineSymbolTable *) mNextItem ; }
  public : inline elementOf_GGS_routineSymbolTable * infObject (void) const { return (elementOf_GGS_routineSymbolTable *) mInfPtr ; }
  public : inline elementOf_GGS_routineSymbolTable * supObject (void) const { return (elementOf_GGS_routineSymbolTable *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_routineSymbolTable mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     Element of map '@registerTable'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class e_registerTable {
  public : GGS_uint  mRegisterAddress ;
  public : GGS_uint  mSize ;

  public : e_registerTable (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_registerTable : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_registerTable (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_registerTable & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_registerTable * nextObject (void) const { return (elementOf_GGS_registerTable *) mNextItem ; }
  public : inline elementOf_GGS_registerTable * infObject (void) const { return (elementOf_GGS_registerTable *) mInfPtr ; }
  public : inline elementOf_GGS_registerTable * supObject (void) const { return (elementOf_GGS_registerTable *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_registerTable mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*

#endif
