//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'piccolo_semantics.h'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      july 21th, 2008, at 14h50'41"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef piccolo_semantics_DEFINED
#define piccolo_semantics_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_binaryset.h"
#include "galgas/GGS_filewrapper.h"
#include "galgas/predefined_types.h"
#include "galgas/AC_galgas_class.h"
#include "galgas/AC_galgas_domain.h"
#include "galgas/AC_galgas_mapindex.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_listmap.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

// Include imported semantics
#include "piccolo_embedded_devices.h"
#include "piccolo_metamodel.h"
#include "piccolo_options.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_routineSymbolTable ;
class GGS_codeGenerationContext ;

void routine_setEmitAddress (C_Compiler &,
                                const GGS_uint   COMMA_LOCATION_ARGS) ;

void routine_currentEmitAddress (C_Compiler &,
                                GGS_uint  & COMMA_LOCATION_ARGS) ;

void routine_emitCode (C_Compiler &,
                                const GGS_uint   COMMA_LOCATION_ARGS) ;

void routine_getGeneratedContents (C_Compiler &,
                                GGS_string & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Routine 'checkCurrentEmitAddress'                      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkCurrentEmitAddress (C_Compiler &,
                                const GGS_uint   COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        Map '@routineSymbolTable'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_routineSymbolTable ;

class GGS_routineSymbolTable : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_routineSymbolTable cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_routineSymbolTable & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_routineSymbolTable & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_routineSymbolTable * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_routineSymbolTable * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_routineSymbolTable constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"
  public : void modifier_setMRoutineAddressForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;
  public : void modifier_setMRequiredSelectedBankForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint &  inParameter0,
                                const GGS_uint &  inParameter1 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0,
                                GGS_uint   & outParameter1 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_uint & inParameter0,
                                   const GGS_uint & inParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_uint & outParameter0,
                                   GGS_uint & outParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_routineSymbolTable constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_routineSymbolTable & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_routineSymbolTable reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_routineSymbolTable & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_routineSymbolTable & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_uint   & _mRoutineAddress (LOCATION_ARGS) const ;
    public : /* const */ GGS_uint   & _mRequiredSelectedBank (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@instruction.enterLabelAtAddress'             *
//                                                                           *
//---------------------------------------------------------------------------*

typedef void (*typeCategoryMethod__instruction__enterLabelAtAddress)  (C_Compiler & _inLexique,
                                const cPtr_instruction * inObjectPtr,
                                GGS_routineSymbolTable  & var_cas_ioRoutineSymbolTable,
                                const GGS_uint   var_cas_inAddress,
                                GGS_uint  & var_cas_ioCurrentlySelectedBank
                                COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__instruction__enterLabelAtAddress (typeCategoryMethod__instruction__enterLabelAtAddress inRoutine,
                     const sint32 inClassID) ;

//---------------------------------------------------------------------------*

typeCategoryMethod__instruction__enterLabelAtAddress
findCategoryMethod__instruction__enterLabelAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) ;

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@registerExpression.getRegisterAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

typedef void (*typeCategoryMethod__registerExpression__getRegisterAddress)  (C_Compiler & _inLexique,
                                const cPtr_registerExpression * inObjectPtr,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                GGS_uint  & var_cas_outRegisterAddress
                                COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__getRegisterAddress (typeCategoryMethod__registerExpression__getRegisterAddress inRoutine,
                     const sint32 inClassID) ;

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__getRegisterAddress
findCategoryMethod__registerExpression__getRegisterAddress (AC_galgasClassRunTimeInformation * inClassPtr) ;

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@registerExpression.getRegisterAddressingInformations'   *
//                                                                           *
//---------------------------------------------------------------------------*

typedef void (*typeCategoryMethod__registerExpression__getRegisterAddressingInformations)  (C_Compiler & _inLexique,
                                const cPtr_registerExpression * inObjectPtr,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                GGS_uint  & var_cas_outRegisterAddress,
                                GGS_bool & var_cas_outUseBSRregister,
                                GGS_bitSliceTable  & var_cas_outBitSliceTable
                                COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__getRegisterAddressingInformations (typeCategoryMethod__registerExpression__getRegisterAddressingInformations inRoutine,
                     const sint32 inClassID) ;

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__getRegisterAddressingInformations
findCategoryMethod__registerExpression__getRegisterAddressingInformations (AC_galgasClassRunTimeInformation * inClassPtr) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Routine 'checkInstructionIsReachable'                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkInstructionIsReachable (C_Compiler &,
                                GGS_bool &,
                                const GGS_location   COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@instruction.generateCodeAtAddress'            *
//                                                                           *
//---------------------------------------------------------------------------*

typedef void (*typeCategoryMethod__instruction__generateCodeAtAddress)  (C_Compiler & _inLexique,
                                const cPtr_instruction * inObjectPtr,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__instruction__generateCodeAtAddress (typeCategoryMethod__instruction__generateCodeAtAddress inRoutine,
                     const sint32 inClassID) ;

//---------------------------------------------------------------------------*

typeCategoryMethod__instruction__generateCodeAtAddress
findCategoryMethod__instruction__generateCodeAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) ;

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@bitNumberExpression.getBitNumber'             *
//                                                                           *
//---------------------------------------------------------------------------*

typedef void (*typeCategoryMethod__bitNumberExpression__getBitNumber)  (C_Compiler & _inLexique,
                                const cPtr_bitNumberExpression * inObjectPtr,
                                const GGS_bitSliceTable   var_cas_inBitSliceTable,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__bitNumberExpression__getBitNumber (typeCategoryMethod__bitNumberExpression__getBitNumber inRoutine,
                     const sint32 inClassID) ;

//---------------------------------------------------------------------------*

typeCategoryMethod__bitNumberExpression__getBitNumber
findCategoryMethod__bitNumberExpression__getBitNumber (AC_galgasClassRunTimeInformation * inClassPtr) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Routine 'emitConditionalBranchInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitConditionalBranchInstruction (C_Compiler &,
                                const GGS_uint  ,
                                const GGS_uint  ,
                                const GGS_location  ,
                                const GGS_conditional_branch  COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       Routine 'emitBRAinstruction'                        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitBRAinstruction (C_Compiler &,
                                const GGS_uint  ,
                                const GGS_uint  ,
                                const GGS_location   COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      Routine 'emitGOTOinstruction'                        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitGOTOinstruction (C_Compiler &,
                                const GGS_uint   COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      Routine 'emitCALLinstruction'                        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitCALLinstruction (C_Compiler &,
                                const GGS_uint   COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      Routine 'emitRCALLinstruction'                       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitRCALLinstruction (C_Compiler &,
                                const GGS_uint  ,
                                const GGS_uint  ,
                                const GGS_location   COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@structured_if_condition.emitInstruction'         *
//                                                                           *
//---------------------------------------------------------------------------*

typedef void (*typeCategoryMethod__structured_if_condition__emitInstruction)  (C_Compiler & _inLexique,
                                const cPtr_structured_if_condition * inObjectPtr,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inConditionalBranchInstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation
                                COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__structured_if_condition__emitInstruction (typeCategoryMethod__structured_if_condition__emitInstruction inRoutine,
                     const sint32 inClassID) ;

//---------------------------------------------------------------------------*

typeCategoryMethod__structured_if_condition__emitInstruction
findCategoryMethod__structured_if_condition__emitInstruction (AC_galgasClassRunTimeInformation * inClassPtr) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            Routine 'analyze'                              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyze (C_Compiler &,
                                const GGS_piccoloModel ,
                                const GGS_string  COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of map '@routineSymbolTable'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class e_routineSymbolTable {
  public : GGS_uint  mRoutineAddress ;
  public : GGS_uint  mRequiredSelectedBank ;

  public : e_routineSymbolTable (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_routineSymbolTable : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_routineSymbolTable (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_routineSymbolTable & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_routineSymbolTable * nextObject (void) const { return (elementOf_GGS_routineSymbolTable *) mNextItem ; }
  public : inline elementOf_GGS_routineSymbolTable * infObject (void) const { return (elementOf_GGS_routineSymbolTable *) mInfPtr ; }
  public : inline elementOf_GGS_routineSymbolTable * supObject (void) const { return (elementOf_GGS_routineSymbolTable *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_routineSymbolTable mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Declarations for 'codeGenerationContext' struct               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_codeGenerationContext {
//--- Default constructor
  public : GGS_codeGenerationContext (void) ;

//--- Virtual destructor
  public : virtual ~GGS_codeGenerationContext (void) ;

//--- Handle 'drop' instruction
  public : void _drop (void) ;

//--- Method '_isBuilt'
  public : bool _isBuilt (void) const ;

//--- Support for method call handling in GALGAS
  public : inline const GGS_codeGenerationContext * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
  public : inline GGS_codeGenerationContext * operator () (UNUSED_LOCATION_ARGS) { return this ; }

//--- Comparison
  public : GGS_bool _operator_isEqual (const GGS_codeGenerationContext & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_codeGenerationContext & inOperand) const ;

//--- Reader 'description'
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;
//--- Galgas 'new' destructor
  public : static GGS_codeGenerationContext constructor_new (const GGS_routineSymbolTable & argument_0,
                 const GGS_registerTable & argument_1,
                 const GGS_uint & argument_2,
                 const GGS_uint & argument_3,
                 const GGS_uint & argument_4) ;

//--- Readers
  public : inline GGS_routineSymbolTable 
  reader_mRoutineSymbolTable (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mRoutineSymbolTable ;
  }

  public : inline GGS_registerTable 
  reader_mRegisterTable (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mRegisterTable ;
  }

  public : inline GGS_uint 
  reader_mCurrentBank (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mCurrentBank ;
  }

  public : inline GGS_uint 
  reader_mComputedGoto2RoutineAddress (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mComputedGoto2RoutineAddress ;
  }

  public : inline GGS_uint 
  reader_mComputedGoto4RoutineAddress (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mComputedGoto4RoutineAddress ;
  }

//--- Attributes
  public : GGS_routineSymbolTable  mRoutineSymbolTable ;
  public : GGS_registerTable  mRegisterTable ;
  public : GGS_uint  mCurrentBank ;
  public : GGS_uint  mComputedGoto2RoutineAddress ;
  public : GGS_uint  mComputedGoto4RoutineAddress ;
} ;

//---------------------------------------------------------------------------*

#endif
