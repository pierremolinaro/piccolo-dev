//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'piccolo_syntax.cpp'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      august 1st, 2008, at 16h44'45"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "piccolo_syntax.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_syntax.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'start_symbol'              *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_start_symbol_piccolo_syntax_66_4_ (piccolo_lexique & _inLexique,
                                GGS_piccoloModel &var_cas_outPiccoloModel) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_program) COMMA_HERE) ;
  GGS_lstring  var_cas_programName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_programName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  GGS_lstring  var_cas_deviceName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_deviceName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A) COMMA_HERE) ;
  GGS_interruptDefinitionList  var_cas_interruptDefinitionList ;
  var_cas_interruptDefinitionList = GGS_interruptDefinitionList ::constructor_emptyList () ;
  GGS_routineDefinitionList  var_cas_routineDefinitionList ;
  var_cas_routineDefinitionList = GGS_routineDefinitionList ::constructor_emptyList () ;
  GGS_ramDefinitionList  var_cas_ramDefinitionList ;
  var_cas_ramDefinitionList = GGS_ramDefinitionList ::constructor_emptyList () ;
  GGS_configDefinitionList  var_cas_configDefinitionList ;
  var_cas_configDefinitionList = GGS_configDefinitionList ::constructor_emptyList () ;
  GGS_bool var_cas_acceptDefaultConfiguration ;
  var_cas_acceptDefaultConfiguration = GGS_bool (true, false) ;
  GGS_bool var_cas_needsComputedGoto2 ;
  var_cas_needsComputedGoto2 = GGS_bool (true, false) ;
  GGS_bool var_cas_needsComputedGoto4 ;
  var_cas_needsComputedGoto4 = GGS_bool (true, false) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_piccolo_syntax_0 (_inLexique)) {
        case 2 : {
          nt_configuration_definition_ (_inLexique, var_cas_configDefinitionList, var_cas_acceptDefaultConfiguration) ;
          } break ;
        case 3 : {
          nt_ram_definition_ (_inLexique, var_cas_ramDefinitionList) ;
          } break ;
        case 4 : {
          nt_interrupt_definition_ (_inLexique, var_cas_interruptDefinitionList, var_cas_needsComputedGoto2, var_cas_needsComputedGoto4) ;
          } break ;
        case 5 : {
          nt_routine_definition_ (_inLexique, var_cas_routineDefinitionList, var_cas_needsComputedGoto2, var_cas_needsComputedGoto4) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
  var_cas_outPiccoloModel = GGS_piccoloModel::constructor_new (var_cas_programName, var_cas_deviceName, var_cas_configDefinitionList, var_cas_acceptDefaultConfiguration, var_cas_ramDefinitionList, var_cas_interruptDefinitionList, var_cas_routineDefinitionList, var_cas_needsComputedGoto2, var_cas_needsComputedGoto4, GGS_location (_inLexique)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'configuration_definition'        *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_configuration_definition_piccolo_syntax_115_4_ (piccolo_lexique & _inLexique,
                                GGS_configDefinitionList  &var_cas_ioConfigDefinitionList,
                                GGS_bool &var_cas_ioAcceptDefaultConfiguration) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_config) COMMA_HERE) ;
  GGS_configSettingList  var_cas_settingList ;
  var_cas_settingList = GGS_configSettingList ::constructor_emptyList () ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B) COMMA_HERE) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_piccolo_syntax_1 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_default) COMMA_HERE) ;
          if ((var_cas_ioAcceptDefaultConfiguration).isBuiltAndTrue ()) {
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "'default' for configuration is already set") COMMA_SOURCE_FILE_AT_LINE (126)) ;
          }
          var_cas_ioAcceptDefaultConfiguration = GGS_bool (true, true) ;
          } break ;
        case 3 : {
          GGS_lstring  var_cas_settingName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_settingName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A) COMMA_HERE) ;
          GGS_lstring  var_cas_settingValue ;
          switch (select_piccolo_syntax_2 (_inLexique)) {
            case 1 : {
              _inLexique._assignFromAttribute_tokenString (var_cas_settingValue) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              _inLexique._assignFromAttribute_tokenString (var_cas_settingValue) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_literal_5Fstring) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          var_cas_settingList._addAssign_operation (var_cas_settingName, var_cas_settingValue) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D) COMMA_HERE) ;
  var_cas_ioConfigDefinitionList._addAssign_operation (var_cas_settingList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'declaration_in_ram'           *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_declaration_in_ram_piccolo_syntax_146_4_ (piccolo_lexique & _inLexique,
                                GGS_declarationInRam  &var_cas_outDeclaration) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_byte) COMMA_HERE) ;
  GGS_lstring  var_cas_name ;
  _inLexique._assignFromAttribute_tokenString (var_cas_name) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  GGS_luint  var_cas_size ;
  switch (select_piccolo_syntax_3 (_inLexique)) {
    case 1 : {
      var_cas_size = GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 1U), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5B) COMMA_HERE) ;
      _inLexique._assignFromAttribute_uint32value (var_cas_size) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5D) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_bitSliceTable  var_cas_bitSliceTable ;
  var_cas_bitSliceTable = GGS_bitSliceTable ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  switch (select_piccolo_syntax_4 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3C) COMMA_HERE) ;
      GGS_sint  var_cas_sliceIndex ;
      var_cas_sliceIndex = GGS_sint (true, 8L) ;
      { bool syntaxRepeat_5 = true ;
        while (syntaxRepeat_5) {
            switch (select_piccolo_syntax_6 (_inLexique)) {
              case 1 : {
                GGS_uint  var_cas_sliceWidth ;
                var_cas_sliceWidth = GGS_uint (true, 0U) ;
                { bool syntaxRepeat_7 = true ;
                  while (syntaxRepeat_7) {
                      GGS_uint  var_cas_sliceBase ;
                      var_cas_sliceBase = GGS_uint (true, 0U) ;
                      if (((var_cas_sliceIndex)._operator_supOrEqual (GGS_sint (true, 0L))).isBuiltAndTrue ()) {
                        var_cas_sliceBase = var_cas_sliceIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (170)) ;
                      }
                      GGS_lstring  var_cas_sliceName ;
                      _inLexique._assignFromAttribute_tokenString (var_cas_sliceName) ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
                      switch (select_piccolo_syntax_8 (_inLexique)) {
                        case 1 : {
                          if ((((var_cas_sliceWidth)._operator_isNotEqual (GGS_uint (true, 0U)))._operator_and ((var_cas_sliceWidth)._operator_isNotEqual (GGS_uint (true, 1U)))).isBuiltAndTrue ()) {
                            var_cas_sliceName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "a slice of 1 bit is expected for '"))._operator_concat (var_cas_sliceName))._operator_concat (GGS_string (true, "'")) COMMA_SOURCE_FILE_AT_LINE (175)) ;
                          }
                          var_cas_sliceWidth = GGS_uint (true, 1U) ;
                          } break ;
                        case 2 : {
                          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5B) COMMA_HERE) ;
                          GGS_luint  var_cas_sliceSize ;
                          _inLexique._assignFromAttribute_uint32value (var_cas_sliceSize) ;
                          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
                          if ((((var_cas_sliceWidth)._operator_isNotEqual (GGS_uint (true, 0U)))._operator_and ((var_cas_sliceWidth)._operator_isNotEqual (var_cas_sliceSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (181))))).isBuiltAndTrue ()) {
                            var_cas_sliceName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "a slice of "))._operator_concat (var_cas_sliceWidth.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (182))))._operator_concat (GGS_string (true, " bits is expected for '")))._operator_concat (var_cas_sliceName))._operator_concat (GGS_string (true, "'")) COMMA_SOURCE_FILE_AT_LINE (182)) ;
                          }
                          var_cas_sliceWidth = var_cas_sliceSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (184)) ;
                          var_cas_sliceBase = var_cas_sliceBase._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (185))._substract_operation (_inLexique, var_cas_sliceSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (185)) COMMA_SOURCE_FILE_AT_LINE (185)) ;
                          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5D) COMMA_HERE) ;
                          } break ;
                        default :
                          break ;
                      }
                      GGS_uint  var_cas_base ;
                      var_cas_base = GGS_uint (true, 0U) ;
                      if (((var_cas_sliceIndex)._operator_supOrEqual (var_cas_sliceWidth.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (189)))).isBuiltAndTrue ()) {
                        var_cas_base = var_cas_sliceIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (190))._substract_operation (_inLexique, var_cas_sliceWidth COMMA_SOURCE_FILE_AT_LINE (190)) ;
                      }
                      var_cas_bitSliceTable.modifier_insertKey (_inLexique, var_cas_sliceName, var_cas_base, var_cas_sliceWidth COMMA_SOURCE_FILE_AT_LINE (192)) ;
                    switch (select_repeat_piccolo_syntax_7 (_inLexique)) {
                      case 2 : {
                        _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2F) COMMA_HERE) ;
                        } break ;
                      default :
                        syntaxRepeat_7 = false ;
                        break ;
                    }
                  }
                }
                var_cas_sliceIndex = var_cas_sliceIndex._substract_operation (_inLexique, var_cas_sliceWidth.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (196)) COMMA_SOURCE_FILE_AT_LINE (196)) ;
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2D) COMMA_HERE) ;
                var_cas_sliceIndex._decrement_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (199)) ;
                } break ;
              default :
                break ;
            }
          switch (select_repeat_piccolo_syntax_5 (_inLexique)) {
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_5 = false ;
              break ;
          }
        }
      }
      if (((var_cas_sliceIndex)._operator_isNotEqual (GGS_sint (true, 0L))).isBuiltAndTrue ()) {
        var_cas_name.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "Incorrect bit definition for register '"))._operator_concat (var_cas_name))._operator_concat (GGS_string (true, "': ")))._operator_concat (GGS_sint (true, 8L)._substract_operation (_inLexique, var_cas_sliceIndex COMMA_SOURCE_FILE_AT_LINE (205)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (205))))._operator_concat (GGS_string (true, " bits (s) are defined, instead of 8")) COMMA_SOURCE_FILE_AT_LINE (205)) ;
      }
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3E) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  var_cas_outDeclaration = GGS_byteDeclarationInRam ::constructor_new (_inLexique, var_cas_name, var_cas_size, var_cas_bitSliceTable COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'declaration_in_ram'           *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_declaration_in_ram_piccolo_syntax_214_4_ (piccolo_lexique & _inLexique,
                                GGS_declarationInRam  &var_cas_outDeclaration) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_common) COMMA_HERE) ;
  GGS_commonBranchList  var_cas_commonBranchList ;
  var_cas_commonBranchList = GGS_commonBranchList ::constructor_emptyList () ;
  { bool syntaxRepeat_9 = true ;
    while (syntaxRepeat_9) {
        GGS_declarationInRamList  var_cas_declarationInRamList ;
        var_cas_declarationInRamList = GGS_declarationInRamList ::constructor_emptyList () ;
        { bool syntaxRepeat_10 = true ;
          while (syntaxRepeat_10) {
            switch (select_repeat_piccolo_syntax_10 (_inLexique)) {
              case 2 : {
                GGS_declarationInRam  var_cas_declaration ;
                nt_declaration_in_ram_ (_inLexique, var_cas_declaration) ;
                var_cas_declarationInRamList._addAssign_operation (var_cas_declaration) ;
                } break ;
              default :
                syntaxRepeat_10 = false ;
                break ;
            }
          }
        }
        var_cas_commonBranchList._addAssign_operation (var_cas_declarationInRamList, GGS_location (_inLexique)) ;
      switch (select_repeat_piccolo_syntax_9 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7C) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_9 = false ;
          break ;
      }
    }
  }
  var_cas_outDeclaration = GGS_commonDeclarationInRam ::constructor_new (_inLexique, var_cas_commonBranchList COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'ram_definition'             *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_ram_definition_piccolo_syntax_237_4_ (piccolo_lexique & _inLexique,
                                GGS_ramDefinitionList  &var_cas_ioRamDefinitionList) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_ram) COMMA_HERE) ;
  GGS_lstring  var_cas_bankName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_bankName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B) COMMA_HERE) ;
  GGS_declarationInRamList  var_cas_declarationInRamList ;
  var_cas_declarationInRamList = GGS_declarationInRamList ::constructor_emptyList () ;
  { bool syntaxRepeat_11 = true ;
    while (syntaxRepeat_11) {
      switch (select_repeat_piccolo_syntax_11 (_inLexique)) {
        case 2 : {
          GGS_declarationInRam  var_cas_declaration ;
          nt_declaration_in_ram_ (_inLexique, var_cas_declaration) ;
          var_cas_declarationInRamList._addAssign_operation (var_cas_declaration) ;
          } break ;
        default :
          syntaxRepeat_11 = false ;
          break ;
      }
    }
  }
  var_cas_ioRamDefinitionList._addAssign_operation (var_cas_bankName, var_cas_declarationInRamList) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'instruction_list'            *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_instruction_list_piccolo_syntax_256_4_ (piccolo_lexique & _inLexique,
                                GGS_instructionList  &var_cas_outInstructionList,
                                GGS_bool &var_cas_ioNeedsComputedGoto2,
                                GGS_bool &var_cas_ioNeedsComputedGoto4) {
  var_cas_outInstructionList = GGS_instructionList ::constructor_emptyList () ;
  { bool syntaxRepeat_12 = true ;
    while (syntaxRepeat_12) {
      switch (select_repeat_piccolo_syntax_12 (_inLexique)) {
        case 2 : {
          GGS_piccolo_instruction  var_cas_instruction ;
          nt_simple_instruction_ (_inLexique, var_cas_instruction) ;
          var_cas_outInstructionList._addAssign_operation (var_cas_instruction) ;
          } break ;
        case 3 : {
          GGS_piccolo_instruction  var_cas_instruction ;
          nt_structured_instruction_ (_inLexique, var_cas_instruction, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
          var_cas_outInstructionList._addAssign_operation (var_cas_instruction) ;
          } break ;
        default :
          syntaxRepeat_12 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'interrupt_definition'          *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_interrupt_definition_piccolo_syntax_280_4_ (piccolo_lexique & _inLexique,
                                GGS_interruptDefinitionList  &var_cas_ioInterruptDefinitionList,
                                GGS_bool &var_cas_ioNeedsComputedGoto2,
                                GGS_bool &var_cas_ioNeedsComputedGoto4) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_interrupt) COMMA_HERE) ;
  GGS_lstring  var_cas_interruptName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_interruptName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B) COMMA_HERE) ;
  GGS_instructionList  var_cas_instructionList ;
  nt_instruction_list_ (_inLexique, var_cas_instructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D) COMMA_HERE) ;
  var_cas_ioInterruptDefinitionList._addAssign_operation (var_cas_interruptName, var_cas_instructionList, GGS_location (_inLexique)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'routine_definition'           *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_routine_definition_piccolo_syntax_300_4_ (piccolo_lexique & _inLexique,
                                GGS_routineDefinitionList  &var_cas_ioRoutineDefinitionList,
                                GGS_bool &var_cas_ioNeedsComputedGoto2,
                                GGS_bool &var_cas_ioNeedsComputedGoto4) {
  GGS_bool var_cas_noreturn ;
  switch (select_piccolo_syntax_13 (_inLexique)) {
    case 1 : {
      var_cas_noreturn = GGS_bool (true, false) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_noreturn) COMMA_HERE) ;
      var_cas_noreturn = GGS_bool (true, true) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_routine) COMMA_HERE) ;
  GGS_lstring  var_cas_routineName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_routineName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  GGS_luint  var_cas_banksel ;
  switch (select_piccolo_syntax_14 (_inLexique)) {
    case 1 : {
      var_cas_banksel = GGS_luint ::constructor_new (_inLexique, GGS_uint ::constructor_max (_inLexique COMMA_HERE), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_requiresbank) COMMA_HERE) ;
      _inLexique._assignFromAttribute_uint32value (var_cas_banksel) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B) COMMA_HERE) ;
  GGS_instructionList  var_cas_instructionList ;
  nt_instruction_list_ (_inLexique, var_cas_instructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D) COMMA_HERE) ;
  var_cas_ioRoutineDefinitionList._addAssign_operation (var_cas_routineName, var_cas_banksel, var_cas_noreturn, var_cas_instructionList, GGS_location (_inLexique)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'register_parsing'            *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_register_parsing_piccolo_syntax_334_4_ (piccolo_lexique & _inLexique,
                                GGS_registerExpression  &var_cas_outRegisterExpression) {
  GGS_lstring  var_cas_registerName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_registerName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  GGS_luint  var_cas_offset ;
  switch (select_piccolo_syntax_15 (_inLexique)) {
    case 1 : {
      var_cas_offset = GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5B) COMMA_HERE) ;
      _inLexique._assignFromAttribute_uint32value (var_cas_offset) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5D) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  var_cas_outRegisterExpression = GGS_registerExpression ::constructor_new (_inLexique, var_cas_registerName, var_cas_offset COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'bit_number_parsing'           *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_bit_number_parsing_piccolo_syntax_352_4_ (piccolo_lexique & _inLexique,
                                GGS_bitNumberExpression  &var_cas_outBitNumber) {
  GGS_lstring  var_cas_bitNumberLabel ;
  _inLexique._assignFromAttribute_tokenString (var_cas_bitNumberLabel) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  GGS_luint  var_cas_bitIndex ;
  switch (select_piccolo_syntax_16 (_inLexique)) {
    case 1 : {
      var_cas_bitIndex = GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5B) COMMA_HERE) ;
      _inLexique._assignFromAttribute_uint32value (var_cas_bitIndex) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5D) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  var_cas_outBitNumber = GGS_bitNumberLabelValue ::constructor_new (_inLexique, var_cas_bitNumberLabel, var_cas_bitIndex COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'bit_number_parsing'           *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_bit_number_parsing_piccolo_syntax_367_4_ (piccolo_lexique & _inLexique,
                                GGS_bitNumberExpression  &var_cas_outBitNumber) {
  GGS_luint  var_cas_bitNumberLiteral ;
  _inLexique._assignFromAttribute_uint32value (var_cas_bitNumberLiteral) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
  var_cas_outBitNumber = GGS_bitNumberLiteralValue ::constructor_new (_inLexique, var_cas_bitNumberLiteral COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'literal_value_parsing'          *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_literal_value_parsing_piccolo_syntax_374_4_ (piccolo_lexique & _inLexique,
                                GGS_luint  &var_cas_outLiteralValue) {
  _inLexique._assignFromAttribute_uint32value (var_cas_outLiteralValue) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'literal_value_parsing'          *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_literal_value_parsing_piccolo_syntax_380_4_ (piccolo_lexique & _inLexique,
                                GGS_luint  &var_cas_outLiteralValue) {
  GGS_lchar  var_cas_literalCharValue ;
  _inLexique._assignFromAttribute_charValue (var_cas_literalCharValue) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_literal_5Fchar) COMMA_HERE) ;
  var_cas_outLiteralValue = GGS_luint ::constructor_new (_inLexique, var_cas_literalCharValue.reader_char (_inLexique COMMA_SOURCE_FILE_AT_LINE (382)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (382)), var_cas_literalCharValue.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (382)) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'optional_w_as_dest'           *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_optional_w_as_dest_piccolo_syntax_387_4_ (piccolo_lexique & _inLexique,
                                GGS_bool &var_cas_out_W_isDestination) {
  switch (select_piccolo_syntax_17 (_inLexique)) {
    case 1 : {
      var_cas_out_W_isDestination = GGS_bool (true, false) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
      var_cas_out_W_isDestination = GGS_bool (true, true) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'condition_factor'            *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_condition_factor_piccolo_syntax_399_4_ (piccolo_lexique & _inLexique,
                                GGS_conditionExpression  &var_cas_outCondition) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__21) COMMA_HERE) ;
  GGS_conditionExpression  var_cas_condition ;
  nt_condition_factor_ (_inLexique, var_cas_condition) ;
  var_cas_outCondition = GGS_negateCondition ::constructor_new (_inLexique, var_cas_condition COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'condition_factor'            *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_condition_factor_piccolo_syntax_410_4_ (piccolo_lexique & _inLexique,
                                GGS_conditionExpression  &var_cas_outCondition) {
  nt_condition_expression_ (_inLexique, var_cas_outCondition) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'condition_factor'            *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_condition_factor_piccolo_syntax_418_4_ (piccolo_lexique & _inLexique,
                                GGS_conditionExpression  &var_cas_outCondition) {
  switch (select_piccolo_syntax_18 (_inLexique)) {
    case 1 : {
      GGS_bool var_cas_isIncrement ;
      switch (select_piccolo_syntax_19 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_incf) COMMA_HERE) ;
          var_cas_isIncrement = GGS_bool (true, true) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_decf) COMMA_HERE) ;
          var_cas_isIncrement = GGS_bool (true, false) ;
          } break ;
        default :
          break ;
      }
      GGS_registerExpression  var_cas_registerExpression ;
      nt_register_parsing_ (_inLexique, var_cas_registerExpression) ;
      GGS_bool var_cas_W_isDestination ;
      switch (select_piccolo_syntax_20 (_inLexique)) {
        case 1 : {
          var_cas_W_isDestination = GGS_bool (true, false) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          var_cas_W_isDestination = GGS_bool (true, true) ;
          } break ;
        default :
          break ;
      }
      GGS_lstring  var_cas_conditionString ;
      _inLexique._assignFromAttribute_tokenString (var_cas_conditionString) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      GGS_string var_cas_condition ;
      var_cas_condition = var_cas_conditionString.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (437)).reader_uppercaseString (_inLexique COMMA_SOURCE_FILE_AT_LINE (437)) ;
      GGS_bool var_cas_branchIfZero ;
      if (((var_cas_condition)._operator_isEqual (GGS_string (true, "Z"))).isBuiltAndTrue ()) {
        var_cas_branchIfZero = GGS_bool (true, true) ;
      }else if (((var_cas_condition)._operator_isEqual (GGS_string (true, "NZ"))).isBuiltAndTrue ()) {
        var_cas_branchIfZero = GGS_bool (true, false) ;
      }else{
        var_cas_conditionString.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "invalid '"))._operator_concat (var_cas_conditionString))._operator_concat (GGS_string (true, "' condition; valid ones are: 'z' and 'nz'")) COMMA_SOURCE_FILE_AT_LINE (447)) ;
        var_cas_branchIfZero._drop () ;
      }
      var_cas_outCondition = GGS_incDecRegisterInCondition ::constructor_new (_inLexique, var_cas_registerExpression, var_cas_isIncrement, var_cas_W_isDestination, var_cas_branchIfZero COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_registerExpression  var_cas_registerExpression ;
      nt_register_parsing_ (_inLexique, var_cas_registerExpression) ;
      GGS_registerComparison var_cas_comparison ;
      switch (select_piccolo_syntax_21 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__21_3D) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          var_cas_comparison = GGS_registerComparison::constructor_notEqual (_inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3D_3D) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          var_cas_comparison = GGS_registerComparison::constructor_equal (_inLexique COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3C_3D) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          var_cas_comparison = GGS_registerComparison::constructor_lowerOrEqual (_inLexique COMMA_HERE) ;
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3E_3D) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          var_cas_comparison = GGS_registerComparison::constructor_greaterOrEqual (_inLexique COMMA_HERE) ;
          } break ;
        case 5 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3C) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          var_cas_comparison = GGS_registerComparison::constructor_lower (_inLexique COMMA_HERE) ;
          } break ;
        case 6 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3E) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          var_cas_comparison = GGS_registerComparison::constructor_greater (_inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      var_cas_outCondition = GGS_registerComparisonCondition ::constructor_new (_inLexique, var_cas_registerExpression, var_cas_comparison COMMA_HERE) ;
      } break ;
    case 3 : {
      GGS_registerExpression  var_cas_registerExpression ;
      nt_register_parsing_ (_inLexique, var_cas_registerExpression) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2E) COMMA_HERE) ;
      GGS_bitNumberExpression  var_cas_bitNumberExpression ;
      nt_bit_number_parsing_ (_inLexique, var_cas_bitNumberExpression) ;
      GGS_lstring  var_cas_conditionString ;
      _inLexique._assignFromAttribute_tokenString (var_cas_conditionString) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      GGS_string var_cas_condition ;
      var_cas_condition = var_cas_conditionString.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (483)).reader_uppercaseString (_inLexique COMMA_SOURCE_FILE_AT_LINE (483)) ;
      GGS_bool var_cas_BTFSSinstruction ;
      if (((var_cas_condition)._operator_isEqual (GGS_string (true, "Z"))).isBuiltAndTrue ()) {
        var_cas_BTFSSinstruction = GGS_bool (true, true) ;
      }else if (((var_cas_condition)._operator_isEqual (GGS_string (true, "NZ"))).isBuiltAndTrue ()) {
        var_cas_BTFSSinstruction = GGS_bool (true, false) ;
      }else{
        var_cas_conditionString.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "invalid '"))._operator_concat (var_cas_conditionString))._operator_concat (GGS_string (true, "' condition; valid ones are: 'z' and 'nz'")) COMMA_SOURCE_FILE_AT_LINE (493)) ;
        var_cas_BTFSSinstruction._drop () ;
      }
      var_cas_outCondition = GGS_bitTest_in_structured_if_condition ::constructor_new (_inLexique, var_cas_registerExpression, var_cas_bitNumberExpression, var_cas_BTFSSinstruction COMMA_HERE) ;
      } break ;
    case 4 : {
      GGS_registerExpression  var_cas_registerName ;
      nt_register_parsing_ (_inLexique, var_cas_registerName) ;
      GGS_lstring  var_cas_conditionString ;
      _inLexique._assignFromAttribute_tokenString (var_cas_conditionString) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      GGS_string var_cas_condition ;
      var_cas_condition = var_cas_conditionString.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (504)).reader_uppercaseString (_inLexique COMMA_SOURCE_FILE_AT_LINE (504)) ;
      GGS_bool var_cas_branchIfZero ;
      if (((var_cas_condition)._operator_isEqual (GGS_string (true, "Z"))).isBuiltAndTrue ()) {
        var_cas_branchIfZero = GGS_bool (true, true) ;
      }else if (((var_cas_condition)._operator_isEqual (GGS_string (true, "NZ"))).isBuiltAndTrue ()) {
        var_cas_branchIfZero = GGS_bool (true, false) ;
      }else{
        var_cas_conditionString.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "invalid '"))._operator_concat (var_cas_conditionString))._operator_concat (GGS_string (true, "' condition; valid ones are: 'z' and 'nz'")) COMMA_SOURCE_FILE_AT_LINE (514)) ;
        var_cas_branchIfZero._drop () ;
      }
      var_cas_outCondition = GGS_registerTestCondition ::constructor_new (_inLexique, var_cas_registerName, var_cas_branchIfZero COMMA_HERE) ;
      } break ;
    case 5 : {
      GGS_conditional_branch var_cas_conditional_branch ;
      GGS_lstring  var_cas_conditionString ;
      _inLexique._assignFromAttribute_tokenString (var_cas_conditionString) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      GGS_string var_cas_condition ;
      var_cas_condition = var_cas_conditionString.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (520)).reader_uppercaseString (_inLexique COMMA_SOURCE_FILE_AT_LINE (520)) ;
      if (((var_cas_condition)._operator_isEqual (GGS_string (true, "Z"))).isBuiltAndTrue ()) {
        var_cas_conditional_branch = GGS_conditional_branch::constructor_bz (_inLexique COMMA_HERE) ;
      }else if (((var_cas_condition)._operator_isEqual (GGS_string (true, "NZ"))).isBuiltAndTrue ()) {
        var_cas_conditional_branch = GGS_conditional_branch::constructor_bnz (_inLexique COMMA_HERE) ;
      }else if (((var_cas_condition)._operator_isEqual (GGS_string (true, "NN"))).isBuiltAndTrue ()) {
        var_cas_conditional_branch = GGS_conditional_branch::constructor_bnn (_inLexique COMMA_HERE) ;
      }else if (((var_cas_condition)._operator_isEqual (GGS_string (true, "N"))).isBuiltAndTrue ()) {
        var_cas_conditional_branch = GGS_conditional_branch::constructor_bn (_inLexique COMMA_HERE) ;
      }else if (((var_cas_condition)._operator_isEqual (GGS_string (true, "C"))).isBuiltAndTrue ()) {
        var_cas_conditional_branch = GGS_conditional_branch::constructor_bc (_inLexique COMMA_HERE) ;
      }else if (((var_cas_condition)._operator_isEqual (GGS_string (true, "NC"))).isBuiltAndTrue ()) {
        var_cas_conditional_branch = GGS_conditional_branch::constructor_bnc (_inLexique COMMA_HERE) ;
      }else if (((var_cas_condition)._operator_isEqual (GGS_string (true, "OV"))).isBuiltAndTrue ()) {
        var_cas_conditional_branch = GGS_conditional_branch::constructor_bov (_inLexique COMMA_HERE) ;
      }else if (((var_cas_condition)._operator_isEqual (GGS_string (true, "NOV"))).isBuiltAndTrue ()) {
        var_cas_conditional_branch = GGS_conditional_branch::constructor_bnov (_inLexique COMMA_HERE) ;
      }else{
        var_cas_conditionString.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "invalid '"))._operator_concat (var_cas_conditionString))._operator_concat (GGS_string (true, "' condition; valid ones are: 'z', 'nz', 'n', 'nn', 'c', 'nc', 'ov' and 'nov'")) COMMA_SOURCE_FILE_AT_LINE (541)) ;
        var_cas_conditional_branch._drop () ;
      }
      var_cas_outCondition = GGS_bcc_in_structured_if_condition ::constructor_new (_inLexique, var_cas_conditional_branch COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'condition_expression'          *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_condition_expression_piccolo_syntax_549_4_ (piccolo_lexique & _inLexique,
                                GGS_conditionExpression  &var_cas_outCondition) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__28) COMMA_HERE) ;
  nt_condition_term_ (_inLexique, var_cas_outCondition) ;
  { bool syntaxRepeat_22 = true ;
    while (syntaxRepeat_22) {
      switch (select_repeat_piccolo_syntax_22 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7C) COMMA_HERE) ;
          GGS_conditionExpression  var_cas_c ;
          nt_condition_term_ (_inLexique, var_cas_c) ;
          GGS_conditionExpression  var_cas_rc ;
          var_cas_rc = GGS_negateCondition ::constructor_new (_inLexique, var_cas_c COMMA_HERE) ;
          GGS_conditionExpression  var_cas_lc ;
          var_cas_lc = GGS_negateCondition ::constructor_new (_inLexique, var_cas_outCondition COMMA_HERE) ;
          var_cas_outCondition = GGS_negateCondition ::constructor_new (_inLexique, GGS_andCondition ::constructor_new (_inLexique, var_cas_lc, var_cas_rc COMMA_HERE) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_22 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__29) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'condition_term'             *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_condition_term_piccolo_syntax_568_4_ (piccolo_lexique & _inLexique,
                                GGS_conditionExpression  &var_cas_outCondition) {
  nt_condition_factor_ (_inLexique, var_cas_outCondition) ;
  { bool syntaxRepeat_23 = true ;
    while (syntaxRepeat_23) {
      switch (select_repeat_piccolo_syntax_23 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__26) COMMA_HERE) ;
          GGS_conditionExpression  var_cas_c ;
          nt_condition_factor_ (_inLexique, var_cas_c) ;
          var_cas_outCondition = GGS_andCondition ::constructor_new (_inLexique, var_cas_outCondition, var_cas_c COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_23 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'structured_instruction'         *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_structured_instruction_piccolo_syntax_583_4_ (piccolo_lexique & _inLexique,
                                GGS_piccolo_instruction  &var_cas_outInstruction,
                                GGS_bool &var_cas_ioNeedsComputedGoto2,
                                GGS_bool &var_cas_ioNeedsComputedGoto4) {
  switch (select_piccolo_syntax_24 (_inLexique)) {
    case 1 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_banksel) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_luint  var_cas_bank ;
      _inLexique._assignFromAttribute_uint32value (var_cas_bank) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_banksel ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_bank COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_nobank) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_nobanksel ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_banksave) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_registerExpression  var_cas_register ;
      nt_register_parsing_ (_inLexique, var_cas_register) ;
      GGS_instructionList  var_cas_instructionList ;
      nt_instruction_list_ (_inLexique, var_cas_instructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_savebank ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_register, var_cas_instructionList, GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 4 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_computed) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_retlw) COMMA_HERE) ;
      GGS_luintlist  var_cas_argumentList ;
      var_cas_argumentList = GGS_luintlist ::constructor_emptyList () ;
      { bool syntaxRepeat_25 = true ;
        while (syntaxRepeat_25) {
            GGS_luint  var_cas_literalValue ;
            nt_literal_value_parsing_ (_inLexique, var_cas_literalValue) ;
            var_cas_argumentList._addAssign_operation (var_cas_literalValue) ;
          switch (select_repeat_piccolo_syntax_25 (_inLexique)) {
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_25 = false ;
              break ;
          }
        }
      }
      var_cas_outInstruction = GGS_instruction_computed_retlw ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_argumentList, GGS_bool (true, true) COMMA_HERE) ;
      var_cas_ioNeedsComputedGoto2 = GGS_bool (true, true) ;
      } break ;
    case 5 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_computed) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bra) COMMA_HERE) ;
      GGS_lstringlist  var_cas_argumentList ;
      var_cas_argumentList = GGS_lstringlist ::constructor_emptyList () ;
      { bool syntaxRepeat_26 = true ;
        while (syntaxRepeat_26) {
            GGS_lstring  var_cas_targetRoutine ;
            _inLexique._assignFromAttribute_tokenString (var_cas_targetRoutine) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
            var_cas_argumentList._addAssign_operation (var_cas_targetRoutine) ;
          switch (select_repeat_piccolo_syntax_26 (_inLexique)) {
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_26 = false ;
              break ;
          }
        }
      }
      var_cas_outInstruction = GGS_instruction_computed_bra ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_argumentList, GGS_bool (true, true) COMMA_HERE) ;
      var_cas_ioNeedsComputedGoto2 = GGS_bool (true, true) ;
      } break ;
    case 6 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_computed) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_goto) COMMA_HERE) ;
      GGS_lstringlist  var_cas_argumentList ;
      var_cas_argumentList = GGS_lstringlist ::constructor_emptyList () ;
      { bool syntaxRepeat_27 = true ;
        while (syntaxRepeat_27) {
            GGS_lstring  var_cas_targetRoutine ;
            _inLexique._assignFromAttribute_tokenString (var_cas_targetRoutine) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
            var_cas_argumentList._addAssign_operation (var_cas_targetRoutine) ;
          switch (select_repeat_piccolo_syntax_27 (_inLexique)) {
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_27 = false ;
              break ;
          }
        }
      }
      var_cas_outInstruction = GGS_instruction_computed_goto ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_argumentList, GGS_bool (true, true) COMMA_HERE) ;
      var_cas_ioNeedsComputedGoto4 = GGS_bool (true, true) ;
      } break ;
    case 7 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_forever) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_instructionList  var_cas_instructionList ;
      nt_instruction_list_ (_inLexique, var_cas_instructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_FOREVER ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_instructionList, GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 8 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_if) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_registerExpression  var_cas_registerName ;
      nt_register_parsing_ (_inLexique, var_cas_registerName) ;
      GGS_if_semi_colon_op var_cas_opCode ;
      switch (select_piccolo_syntax_28 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__21_3D) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          var_cas_opCode = GGS_if_semi_colon_op::constructor_CPFSEQ (_inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3C_3D) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          var_cas_opCode = GGS_if_semi_colon_op::constructor_CPFSGT (_inLexique COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3E_3D) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          var_cas_opCode = GGS_if_semi_colon_op::constructor_CPFSLT (_inLexique COMMA_HERE) ;
          } break ;
        case 4 : {
          GGS_lstring  var_cas_conditionString ;
          _inLexique._assignFromAttribute_tokenString (var_cas_conditionString) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
          GGS_string var_cas_condition ;
          var_cas_condition = var_cas_conditionString.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (687)).reader_uppercaseString (_inLexique COMMA_SOURCE_FILE_AT_LINE (687)) ;
          if (((var_cas_condition)._operator_isNotEqual (GGS_string (true, "NZ"))).isBuiltAndTrue ()) {
            var_cas_conditionString.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "invalid '"))._operator_concat (var_cas_condition))._operator_concat (GGS_string (true, "' condition; it should be 'nz'")) COMMA_SOURCE_FILE_AT_LINE (689)) ;
          }
          var_cas_opCode = GGS_if_semi_colon_op::constructor_TSTFSZ (_inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A) COMMA_HERE) ;
      GGS_piccolo_instruction  var_cas_instruction ;
      nt_simple_instruction_ (_inLexique, var_cas_instruction) ;
      var_cas_outInstruction = GGS_instruction_IF_FA_SEMI_COLON ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_instruction, var_cas_opCode, var_cas_registerName COMMA_HERE) ;
      } break ;
    case 9 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_if) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_registerExpression  var_cas_registerName ;
      nt_register_parsing_ (_inLexique, var_cas_registerName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2E) COMMA_HERE) ;
      GGS_bitNumberExpression  var_cas_bitNumber ;
      nt_bit_number_parsing_ (_inLexique, var_cas_bitNumber) ;
      GGS_bool var_cas_skipIfSet ;
      GGS_lstring  var_cas_conditionString ;
      _inLexique._assignFromAttribute_tokenString (var_cas_conditionString) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      GGS_string var_cas_condition ;
      var_cas_condition = var_cas_conditionString.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (712)).reader_uppercaseString (_inLexique COMMA_SOURCE_FILE_AT_LINE (712)) ;
      if (((var_cas_condition)._operator_isEqual (GGS_string (true, "Z"))).isBuiltAndTrue ()) {
        var_cas_skipIfSet = GGS_bool (true, true) ;
      }else if (((var_cas_condition)._operator_isEqual (GGS_string (true, "NZ"))).isBuiltAndTrue ()) {
        var_cas_skipIfSet = GGS_bool (true, false) ;
      }else{
        var_cas_conditionString.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "invalid '"))._operator_concat (var_cas_condition))._operator_concat (GGS_string (true, "' condition; it should be 'z' or 'nz'")) COMMA_SOURCE_FILE_AT_LINE (718)) ;
        var_cas_skipIfSet._drop () ;
      }
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A) COMMA_HERE) ;
      GGS_piccolo_instruction  var_cas_instruction ;
      nt_simple_instruction_ (_inLexique, var_cas_instruction) ;
      var_cas_outInstruction = GGS_instruction_IF_BitTest ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_instruction, var_cas_skipIfSet, var_cas_registerName, var_cas_bitNumber COMMA_HERE) ;
      } break ;
    case 10 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_if) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_bool var_cas_increment ;
      switch (select_piccolo_syntax_29 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_decf) COMMA_HERE) ;
          var_cas_increment = GGS_bool (true, false) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_incf) COMMA_HERE) ;
          var_cas_increment = GGS_bool (true, true) ;
          } break ;
        default :
          break ;
      }
      GGS_registerExpression  var_cas_registerName ;
      nt_register_parsing_ (_inLexique, var_cas_registerName) ;
      GGS_bool var_cas_w_isTarget ;
      switch (select_piccolo_syntax_30 (_inLexique)) {
        case 1 : {
          var_cas_w_isTarget = GGS_bool (true, false) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          var_cas_w_isTarget = GGS_bool (true, true) ;
          } break ;
        default :
          break ;
      }
      GGS_bool var_cas_skipIfZero ;
      GGS_lstring  var_cas_conditionString ;
      _inLexique._assignFromAttribute_tokenString (var_cas_conditionString) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      GGS_string var_cas_condition ;
      var_cas_condition = var_cas_conditionString.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (749)).reader_uppercaseString (_inLexique COMMA_SOURCE_FILE_AT_LINE (749)) ;
      if (((var_cas_condition)._operator_isEqual (GGS_string (true, "Z"))).isBuiltAndTrue ()) {
        var_cas_skipIfZero = GGS_bool (true, false) ;
      }else if (((var_cas_condition)._operator_isEqual (GGS_string (true, "NZ"))).isBuiltAndTrue ()) {
        var_cas_skipIfZero = GGS_bool (true, true) ;
      }else{
        var_cas_conditionString.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "invalid '"))._operator_concat (var_cas_condition))._operator_concat (GGS_string (true, "' condition; it should be 'z' or 'nz'")) COMMA_SOURCE_FILE_AT_LINE (755)) ;
        var_cas_skipIfZero._drop () ;
      }
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A) COMMA_HERE) ;
      GGS_piccolo_instruction  var_cas_instruction ;
      nt_simple_instruction_ (_inLexique, var_cas_instruction) ;
      var_cas_outInstruction = GGS_instruction_IF_IncDec ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_instruction, var_cas_increment, var_cas_skipIfZero, var_cas_registerName, var_cas_w_isTarget COMMA_HERE) ;
      } break ;
    case 11 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_if) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_conditionExpression  var_cas_structured_if_condition ;
      nt_condition_expression_ (_inLexique, var_cas_structured_if_condition) ;
      GGS_instructionList  var_cas_thenInstructionList ;
      nt_instruction_list_ (_inLexique, var_cas_thenInstructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
      GGS_partList  var_cas_elsifPartList ;
      var_cas_elsifPartList = GGS_partList ::constructor_emptyList () ;
      { bool syntaxRepeat_31 = true ;
        while (syntaxRepeat_31) {
          switch (select_repeat_piccolo_syntax_31 (_inLexique)) {
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_elsif) COMMA_HERE) ;
              GGS_conditionExpression  var_cas_condition ;
              nt_condition_expression_ (_inLexique, var_cas_condition) ;
              GGS_instructionList  var_cas_instructionList ;
              nt_instruction_list_ (_inLexique, var_cas_instructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
              var_cas_elsifPartList._addAssign_operation (var_cas_condition, var_cas_instructionList, GGS_location (_inLexique)) ;
              } break ;
            default :
              syntaxRepeat_31 = false ;
              break ;
          }
        }
      }
      GGS_instructionList  var_cas_elseInstructionList ;
      switch (select_piccolo_syntax_32 (_inLexique)) {
        case 1 : {
          var_cas_elseInstructionList = GGS_instructionList ::constructor_emptyList () ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_else) COMMA_HERE) ;
          nt_instruction_list_ (_inLexique, var_cas_elseInstructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
          } break ;
        default :
          break ;
      }
      GGS_location  var_cas_endOfElsePartLocation ;
      var_cas_endOfElsePartLocation = GGS_location (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_structured_if ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_structured_if_condition, var_cas_thenInstructionList, var_cas_elsifPartList, var_cas_elseInstructionList, var_cas_endOfElsePartLocation COMMA_HERE) ;
      } break ;
    case 12 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_do) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_instructionList  var_cas_repeatedInstructionList ;
      nt_instruction_list_ (_inLexique, var_cas_repeatedInstructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
      GGS_location  var_cas_endOfRepeatedInstructionList ;
      var_cas_endOfRepeatedInstructionList = GGS_location (_inLexique) ;
      GGS_partList  var_cas_whilePartList ;
      var_cas_whilePartList = GGS_partList ::constructor_emptyList () ;
      { bool syntaxRepeat_33 = true ;
        while (syntaxRepeat_33) {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_while) COMMA_HERE) ;
            GGS_conditionExpression  var_cas_whileCondition ;
            nt_condition_expression_ (_inLexique, var_cas_whileCondition) ;
            GGS_instructionList  var_cas_instructionList ;
            nt_instruction_list_ (_inLexique, var_cas_instructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
            var_cas_whilePartList._addAssign_operation (var_cas_whileCondition, var_cas_instructionList, GGS_location (_inLexique)) ;
          switch (select_repeat_piccolo_syntax_33 (_inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat_33 = false ;
              break ;
          }
        }
      }
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_do_while ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_repeatedInstructionList, var_cas_endOfRepeatedInstructionList, var_cas_whilePartList COMMA_HERE) ;
      } break ;
    case 13 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_mnop) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_luint  var_cas_occurrenceFactor ;
      _inLexique._assignFromAttribute_uint32value (var_cas_occurrenceFactor) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_MNOP ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_occurrenceFactor COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'simple_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_simple_instruction_piccolo_syntax_855_4_ (piccolo_lexique & _inLexique,
                                GGS_piccolo_instruction  &var_cas_outInstruction) {
  switch (select_piccolo_syntax_34 (_inLexique)) {
    case 1 : {
      GGS_instruction_FDA_base_code var_cas_baseCode ;
      switch (select_piccolo_syntax_35 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_addwf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_ADDWF (_inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_addwfc) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_ADDWFC (_inLexique COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_andwf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_ANDWF (_inLexique COMMA_HERE) ;
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_comf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_COMF (_inLexique COMMA_HERE) ;
          } break ;
        case 5 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_decf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_DECF (_inLexique COMMA_HERE) ;
          } break ;
        case 6 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_incf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_INCF (_inLexique COMMA_HERE) ;
          } break ;
        case 7 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_iorwf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_IORWF (_inLexique COMMA_HERE) ;
          } break ;
        case 8 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_movf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_MOVF (_inLexique COMMA_HERE) ;
          } break ;
        case 9 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_rlcf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_RLCF (_inLexique COMMA_HERE) ;
          } break ;
        case 10 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_rlncf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_RLNCF (_inLexique COMMA_HERE) ;
          } break ;
        case 11 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_rrcf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_RRCF (_inLexique COMMA_HERE) ;
          } break ;
        case 12 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_rrncf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_RRNCF (_inLexique COMMA_HERE) ;
          } break ;
        case 13 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_subfwb) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_SUBFWB (_inLexique COMMA_HERE) ;
          } break ;
        case 14 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_subwf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_SUBWF (_inLexique COMMA_HERE) ;
          } break ;
        case 15 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_subwfb) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_SUBWFB (_inLexique COMMA_HERE) ;
          } break ;
        case 16 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_swapf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_SWAPF (_inLexique COMMA_HERE) ;
          } break ;
        case 17 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_xorwf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_XORWF (_inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_registerExpression  var_cas_registerName ;
      nt_register_parsing_ (_inLexique, var_cas_registerName) ;
      GGS_bool var_cas_W_isDestination ;
      nt_optional_w_as_dest_ (_inLexique, var_cas_W_isDestination) ;
      var_cas_outInstruction = GGS_instruction_FDA ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_baseCode, var_cas_registerName, var_cas_W_isDestination COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_FA_instruction_base_code var_cas_FAinstruction ;
      switch (select_piccolo_syntax_36 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_clrf) COMMA_HERE) ;
          var_cas_FAinstruction = GGS_FA_instruction_base_code::constructor_CLRF (_inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_movwf) COMMA_HERE) ;
          var_cas_FAinstruction = GGS_FA_instruction_base_code::constructor_MOVWF (_inLexique COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_mulwf) COMMA_HERE) ;
          var_cas_FAinstruction = GGS_FA_instruction_base_code::constructor_MULWF (_inLexique COMMA_HERE) ;
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_negf) COMMA_HERE) ;
          var_cas_FAinstruction = GGS_FA_instruction_base_code::constructor_NEGF (_inLexique COMMA_HERE) ;
          } break ;
        case 5 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_setf) COMMA_HERE) ;
          var_cas_FAinstruction = GGS_FA_instruction_base_code::constructor_SETF (_inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_registerExpression  var_cas_registerName ;
      nt_register_parsing_ (_inLexique, var_cas_registerName) ;
      var_cas_outInstruction = GGS_instruction_FA ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_FAinstruction, var_cas_registerName COMMA_HERE) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_movff) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_registerExpression  var_cas_sourceRegisterName ;
      nt_register_parsing_ (_inLexique, var_cas_sourceRegisterName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C) COMMA_HERE) ;
      GGS_registerExpression  var_cas_destinationRegisterName ;
      nt_register_parsing_ (_inLexique, var_cas_destinationRegisterName) ;
      var_cas_outInstruction = GGS_instruction_MOVFF ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_sourceRegisterName, var_cas_destinationRegisterName COMMA_HERE) ;
      } break ;
    case 4 : {
      GGS_bit_oriented_op var_cas_bitOrientedOp ;
      switch (select_piccolo_syntax_37 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bcf) COMMA_HERE) ;
          var_cas_bitOrientedOp = GGS_bit_oriented_op::constructor_BCF (_inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bsf) COMMA_HERE) ;
          var_cas_bitOrientedOp = GGS_bit_oriented_op::constructor_BSF (_inLexique COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_btg) COMMA_HERE) ;
          var_cas_bitOrientedOp = GGS_bit_oriented_op::constructor_BTG (_inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_registerExpression  var_cas_registerName ;
      nt_register_parsing_ (_inLexique, var_cas_registerName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2E) COMMA_HERE) ;
      GGS_bitNumberExpression  var_cas_bitNumber ;
      nt_bit_number_parsing_ (_inLexique, var_cas_bitNumber) ;
      var_cas_outInstruction = GGS_instruction_FBA ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_bitOrientedOp, var_cas_registerName, var_cas_bitNumber COMMA_HERE) ;
      } break ;
    case 5 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_jsr) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_lstring  var_cas_targetLabelName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_targetLabelName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_JSR ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_targetLabelName, GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE) ;
      } break ;
    case 6 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_call) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_lstring  var_cas_targetLabelName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_targetLabelName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_JSR ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_targetLabelName, GGS_jumpInstructionKind::constructor_absolute (_inLexique COMMA_HERE) COMMA_HERE) ;
      } break ;
    case 7 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_rcall) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_lstring  var_cas_targetLabelName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_targetLabelName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_JSR ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_targetLabelName, GGS_jumpInstructionKind::constructor_relative (_inLexique COMMA_HERE) COMMA_HERE) ;
      } break ;
    case 8 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_jump) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_lstring  var_cas_targetLabelName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_targetLabelName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_JUMP ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_targetLabelName, GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE) ;
      } break ;
    case 9 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_goto) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_lstring  var_cas_targetLabelName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_targetLabelName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_JUMP ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_targetLabelName, GGS_jumpInstructionKind::constructor_absolute (_inLexique COMMA_HERE) COMMA_HERE) ;
      } break ;
    case 10 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bra) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_lstring  var_cas_targetLabelName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_targetLabelName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_JUMP ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_targetLabelName, GGS_jumpInstructionKind::constructor_relative (_inLexique COMMA_HERE) COMMA_HERE) ;
      } break ;
    case 11 : {
      GGS_conditional_branch var_cas_condition ;
      switch (select_piccolo_syntax_38 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bc) COMMA_HERE) ;
          var_cas_condition = GGS_conditional_branch::constructor_bc (_inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bnc) COMMA_HERE) ;
          var_cas_condition = GGS_conditional_branch::constructor_bnc (_inLexique COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bn) COMMA_HERE) ;
          var_cas_condition = GGS_conditional_branch::constructor_bn (_inLexique COMMA_HERE) ;
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bnn) COMMA_HERE) ;
          var_cas_condition = GGS_conditional_branch::constructor_bnn (_inLexique COMMA_HERE) ;
          } break ;
        case 5 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bov) COMMA_HERE) ;
          var_cas_condition = GGS_conditional_branch::constructor_bov (_inLexique COMMA_HERE) ;
          } break ;
        case 6 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bnov) COMMA_HERE) ;
          var_cas_condition = GGS_conditional_branch::constructor_bnov (_inLexique COMMA_HERE) ;
          } break ;
        case 7 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bz) COMMA_HERE) ;
          var_cas_condition = GGS_conditional_branch::constructor_bz (_inLexique COMMA_HERE) ;
          } break ;
        case 8 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bnz) COMMA_HERE) ;
          var_cas_condition = GGS_conditional_branch::constructor_bnz (_inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_lstring  var_cas_targetLabelName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_targetLabelName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_JUMPCC ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_targetLabelName, var_cas_condition, GGS_bool (true, true) COMMA_HERE) ;
      } break ;
    case 12 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_jump) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_conditional_branch var_cas_conditional_branch ;
      GGS_lstring  var_cas_conditionString ;
      _inLexique._assignFromAttribute_tokenString (var_cas_conditionString) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      GGS_string var_cas_condition ;
      var_cas_condition = var_cas_conditionString.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1067)).reader_uppercaseString (_inLexique COMMA_SOURCE_FILE_AT_LINE (1067)) ;
      if (((var_cas_condition)._operator_isEqual (GGS_string (true, "Z"))).isBuiltAndTrue ()) {
        var_cas_conditional_branch = GGS_conditional_branch::constructor_bz (_inLexique COMMA_HERE) ;
      }else if (((var_cas_condition)._operator_isEqual (GGS_string (true, "NZ"))).isBuiltAndTrue ()) {
        var_cas_conditional_branch = GGS_conditional_branch::constructor_bnz (_inLexique COMMA_HERE) ;
      }else if (((var_cas_condition)._operator_isEqual (GGS_string (true, "NN"))).isBuiltAndTrue ()) {
        var_cas_conditional_branch = GGS_conditional_branch::constructor_bnn (_inLexique COMMA_HERE) ;
      }else if (((var_cas_condition)._operator_isEqual (GGS_string (true, "N"))).isBuiltAndTrue ()) {
        var_cas_conditional_branch = GGS_conditional_branch::constructor_bn (_inLexique COMMA_HERE) ;
      }else if (((var_cas_condition)._operator_isEqual (GGS_string (true, "C"))).isBuiltAndTrue ()) {
        var_cas_conditional_branch = GGS_conditional_branch::constructor_bc (_inLexique COMMA_HERE) ;
      }else if (((var_cas_condition)._operator_isEqual (GGS_string (true, "NC"))).isBuiltAndTrue ()) {
        var_cas_conditional_branch = GGS_conditional_branch::constructor_bnc (_inLexique COMMA_HERE) ;
      }else if (((var_cas_condition)._operator_isEqual (GGS_string (true, "OV"))).isBuiltAndTrue ()) {
        var_cas_conditional_branch = GGS_conditional_branch::constructor_bov (_inLexique COMMA_HERE) ;
      }else if (((var_cas_condition)._operator_isEqual (GGS_string (true, "NOV"))).isBuiltAndTrue ()) {
        var_cas_conditional_branch = GGS_conditional_branch::constructor_bnov (_inLexique COMMA_HERE) ;
      }else{
        var_cas_conditionString.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "invalid '"))._operator_concat (var_cas_conditionString))._operator_concat (GGS_string (true, "' condition; valid ones are: 'z', 'nz', 'n', 'nn', 'c', 'nc', 'ov' and 'nov'")) COMMA_SOURCE_FILE_AT_LINE (1088)) ;
        var_cas_conditional_branch._drop () ;
      }
      GGS_lstring  var_cas_targetLabelName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_targetLabelName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_JUMPCC ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_targetLabelName, var_cas_conditional_branch, GGS_bool (true, false) COMMA_HERE) ;
      } break ;
    case 13 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_clrwdt) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_CLRWDT ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 14 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_daw) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_DAW ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 15 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_nop) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_NOP ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 16 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_pop) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_POP ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 17 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_push) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_PUSH ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 18 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_reset) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_RESET ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 19 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_sleep) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_SLEEP ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 20 : {
      GGS_literal_instruction_opcode var_cas_literalInstruction ;
      switch (select_piccolo_syntax_39 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_addlw) COMMA_HERE) ;
          var_cas_literalInstruction = GGS_literal_instruction_opcode::constructor_ADDLW (_inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_andlw) COMMA_HERE) ;
          var_cas_literalInstruction = GGS_literal_instruction_opcode::constructor_ANDLW (_inLexique COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_iorlw) COMMA_HERE) ;
          var_cas_literalInstruction = GGS_literal_instruction_opcode::constructor_IORLW (_inLexique COMMA_HERE) ;
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_movlw) COMMA_HERE) ;
          var_cas_literalInstruction = GGS_literal_instruction_opcode::constructor_MOVLW (_inLexique COMMA_HERE) ;
          } break ;
        case 5 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_mullw) COMMA_HERE) ;
          var_cas_literalInstruction = GGS_literal_instruction_opcode::constructor_MULLW (_inLexique COMMA_HERE) ;
          } break ;
        case 6 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_sublw) COMMA_HERE) ;
          var_cas_literalInstruction = GGS_literal_instruction_opcode::constructor_SUBLW (_inLexique COMMA_HERE) ;
          } break ;
        case 7 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_xorlw) COMMA_HERE) ;
          var_cas_literalInstruction = GGS_literal_instruction_opcode::constructor_XORLW (_inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_luint  var_cas_literalValue ;
      nt_literal_value_parsing_ (_inLexique, var_cas_literalValue) ;
      var_cas_outInstruction = GGS_instruction_literalOperation ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_literalInstruction, var_cas_literalValue COMMA_HERE) ;
      } break ;
    case 21 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_lfsr) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_luint  var_cas_FSRindex ;
      _inLexique._assignFromAttribute_uint32value (var_cas_FSRindex) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C) COMMA_HERE) ;
      GGS_registerExpression  var_cas_registerName ;
      nt_register_parsing_ (_inLexique, var_cas_registerName) ;
      var_cas_outInstruction = GGS_instruction_LFSR ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_FSRindex, var_cas_registerName COMMA_HERE) ;
      } break ;
    case 22 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_movaw) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_registerExpression  var_cas_registerName ;
      nt_register_parsing_ (_inLexique, var_cas_registerName) ;
      var_cas_outInstruction = GGS_instruction_MOVAW ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_registerName COMMA_HERE) ;
      } break ;
    case 23 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_tblrd) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_tableAccessOption var_cas_accessOption ;
      switch (select_piccolo_syntax_40 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2A) COMMA_HERE) ;
          var_cas_accessOption = GGS_tableAccessOption::constructor_simpleAccess (_inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2A_2B) COMMA_HERE) ;
          var_cas_accessOption = GGS_tableAccessOption::constructor_postIncrement (_inLexique COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2A_2D) COMMA_HERE) ;
          var_cas_accessOption = GGS_tableAccessOption::constructor_postDecrement (_inLexique COMMA_HERE) ;
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2B_2A) COMMA_HERE) ;
          var_cas_accessOption = GGS_tableAccessOption::constructor_preIncrement (_inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      var_cas_outInstruction = GGS_instruction_TBLRD ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_accessOption COMMA_HERE) ;
      } break ;
    case 24 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_tblwt) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_tableAccessOption var_cas_accessOption ;
      switch (select_piccolo_syntax_41 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2A) COMMA_HERE) ;
          var_cas_accessOption = GGS_tableAccessOption::constructor_simpleAccess (_inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2A_2B) COMMA_HERE) ;
          var_cas_accessOption = GGS_tableAccessOption::constructor_postIncrement (_inLexique COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2A_2D) COMMA_HERE) ;
          var_cas_accessOption = GGS_tableAccessOption::constructor_postDecrement (_inLexique COMMA_HERE) ;
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2B_2A) COMMA_HERE) ;
          var_cas_accessOption = GGS_tableAccessOption::constructor_preIncrement (_inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      var_cas_outInstruction = GGS_instruction_TBLWT ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_accessOption COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

