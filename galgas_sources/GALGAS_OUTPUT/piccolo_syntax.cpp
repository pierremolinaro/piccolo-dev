//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'piccolo_syntax.cpp'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       july 16th, 2008, at 12h1'39"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "piccolo_syntax.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_syntax.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'start_symbol'              *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_start_symbol_piccolo_syntax_19_4_ (piccolo_lexique & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_program) COMMA_HERE) ;
  GGS_lstring  var_cas_programName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_programName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  GGS_lstring  var_cas_controllerName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_controllerName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_piccolo_syntax_0 (_inLexique)) {
        case 2 : {
          nt_configuration_definition_ (_inLexique) ;
          } break ;
        case 3 : {
          nt_ram_definition_ (_inLexique) ;
          } break ;
        case 4 : {
          nt_interrupt_definition_ (_inLexique) ;
          } break ;
        case 5 : {
          nt_routine_definition_ (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'configuration_definition'        *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_configuration_definition_piccolo_syntax_39_4_ (piccolo_lexique & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_config) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'ram_definition'             *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_ram_definition_piccolo_syntax_47_4_ (piccolo_lexique & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_ram) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'interrupt_definition'          *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_interrupt_definition_piccolo_syntax_55_4_ (piccolo_lexique & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_interrupt) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B) COMMA_HERE) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_piccolo_syntax_1 (_inLexique)) {
        case 2 : {
          nt_instruction_ (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'routine_definition'           *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_routine_definition_piccolo_syntax_67_4_ (piccolo_lexique & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_routine) COMMA_HERE) ;
  GGS_lstring  var_cas_routineName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_routineName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bsr) COMMA_HERE) ;
  GGS_luint  var_cas_assumedBSRvalue ;
  _inLexique._assignFromAttribute_uint32value (var_cas_assumedBSRvalue) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_unsigned_5Fliteral_5Finteger) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B) COMMA_HERE) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_repeat_piccolo_syntax_2 (_inLexique)) {
        case 2 : {
          nt_instruction_ (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'instruction'               *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_instruction_piccolo_syntax_82_4_ (piccolo_lexique & _inLexique) {
  switch (select_piccolo_syntax_3 (_inLexique)) {
    case 1 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_addwf) COMMA_HERE) ;
      nt_register_parsing_ (_inLexique) ;
      nt_optional_w_as_dest_ (_inLexique) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_addwfc) COMMA_HERE) ;
      nt_register_parsing_ (_inLexique) ;
      nt_optional_w_as_dest_ (_inLexique) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'register_parsing'            *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_register_parsing_piccolo_syntax_96_4_ (piccolo_lexique & _inLexique) {
  GGS_lstring  var_cas_registerName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_registerName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'optional_w_as_dest'           *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_optional_w_as_dest_piccolo_syntax_102_4_ (piccolo_lexique & _inLexique) {
  switch (select_piccolo_syntax_4 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

