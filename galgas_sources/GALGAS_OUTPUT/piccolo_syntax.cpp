//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'piccolo_syntax.cpp'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     november 7th, 2009, at 14h40'55"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "piccolo_syntax.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_syntax.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'start_symbol'              *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_start_symbol_piccolo_syntax_130_19_ (piccolo_lexique & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_pic_31__38_) COMMA_HERE) ;
  GGS_lstring  var_cas_programName ;
  inLexique.assignFromAttribute_tokenString (var_cas_programName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  GGS_lstring  var_cas_deviceNameOrBootloaderReference ;
  GGS_programKind var_cas_programKind ;
  switch (select_piccolo_syntax_0 (inLexique)) {
    case 1 : {
      var_cas_programKind = GGS_programKind::constructor_regularProgram (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_implements) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bootloader) COMMA_HERE) ;
      var_cas_programKind = GGS_programKind::constructor_bootloaderProgram (inLexique COMMA_HERE) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_uses) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bootloader) COMMA_HERE) ;
      var_cas_programKind = GGS_programKind::constructor_userProgram (inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.assignFromAttribute_tokenString (var_cas_deviceNameOrBootloaderReference) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A_) COMMA_HERE) ;
  GGS_interruptDefinitionList  var_cas_interruptDefinitionList = GGS_interruptDefinitionList ::constructor_emptyList () ;
  GGS_routineDefinitionList  var_cas_routineDefinitionList = GGS_routineDefinitionList ::constructor_emptyList () ;
  GGS_ramDefinitionList  var_cas_ramDefinitionList = GGS_ramDefinitionList ::constructor_emptyList () ;
  GGS_configDefinitionList  var_cas_configDefinitionList = GGS_configDefinitionList ::constructor_emptyList () ;
  GGS_constantDefinitionList  var_cas_constantDefinitionList = GGS_constantDefinitionList ::constructor_emptyList () ;
  GGS_bool var_cas_acceptDefaultConfiguration = GGS_bool (false) ;
  GGS_bool var_cas_needsComputedGoto2 = GGS_bool (false) ;
  GGS_bool var_cas_needsComputedGoto4 = GGS_bool (false) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_piccolo_syntax_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_mark) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_literal_5F_string) COMMA_HERE) ;
          } break ;
        case 3 : {
          nt_configuration_definition_ (inLexique, var_cas_configDefinitionList, var_cas_acceptDefaultConfiguration) ;
          } break ;
        case 4 : {
          nt_ram_definition_ (inLexique, var_cas_ramDefinitionList) ;
          } break ;
        case 5 : {
          nt_constant_definition_ (inLexique, var_cas_constantDefinitionList) ;
          } break ;
        case 6 : {
          nt_interrupt_definition_ (inLexique, var_cas_interruptDefinitionList, var_cas_needsComputedGoto2, var_cas_needsComputedGoto4) ;
          } break ;
        case 7 : {
          nt_routine_definition_ (inLexique, var_cas_routineDefinitionList, var_cas_needsComputedGoto2, var_cas_needsComputedGoto4) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
  const GGS_bool cond_4961 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
  if (cond_4961.isBuiltAndTrue ()) {
    GGS_piccoloModel var_cas_piccoloModel = GGS_piccoloModel::constructor_new (var_cas_programName, var_cas_programKind, var_cas_deviceNameOrBootloaderReference, var_cas_configDefinitionList, var_cas_acceptDefaultConfiguration, var_cas_ramDefinitionList, var_cas_interruptDefinitionList, var_cas_constantDefinitionList, var_cas_routineDefinitionList, var_cas_needsComputedGoto2, var_cas_needsComputedGoto4, GGS_location (inLexique)) ;
    ::routine_pic18_analyze (inLexique,  var_cas_piccoloModel,  GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (196)) ;
  }else if (cond_4961.isBuiltAndFalse ()) {
    GGS_string var_cas_hexDestinationFile = (GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (198))).operator_concat (GGS_string (".hex")) ;
    const GGS_bool cond_5174 = var_cas_hexDestinationFile.reader_fileExists (inLexique COMMA_SOURCE_FILE_AT_LINE (199)) ;
    if (cond_5174.isBuiltAndTrue ()) {
      GGS_string::class_method_deleteFile (inLexique, var_cas_hexDestinationFile COMMA_SOURCE_FILE_AT_LINE (200)) ;
    }
    GGS_string var_cas_asmDestinationFile = (GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (202))).operator_concat (GGS_string (".asm")) ;
    const GGS_bool cond_5392 = var_cas_asmDestinationFile.reader_fileExists (inLexique COMMA_SOURCE_FILE_AT_LINE (203)) ;
    if (cond_5392.isBuiltAndTrue ()) {
      GGS_string::class_method_deleteFile (inLexique, var_cas_asmDestinationFile COMMA_SOURCE_FILE_AT_LINE (204)) ;
    }
  }
}

//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_start_symbol_piccolo_syntax_130_19_importBootloaderSpecification (piccolo_lexique & inLexique,
                                GGS_piccoloDeviceModel &var_cas_outPiccoloDeviceModel,
                                GGS_uint  &var_cas_outAccessBankSplitOffset,
                                GGS_ramBankTable  &var_cas_outRamBank,
                                GGS_registerTable  &var_cas_outRegisterTable,
                                GGS_bootloaderReservedRAMmap  &var_cas_outBootloaderReservedRAMmap,
                                GGS_routineDeclarationList  &var_cas_outBootloaderRoutineDeclarationList,
                                GGS_routineDeclarationList  &var_cas_outUserRoutineDeclarationList,
                                GGS_luint  &var_cas_outBootloaderReservedROMsize) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_pic_31__38_) COMMA_HERE) ;
  GGS_lstring  var_cas_programName ;
  inLexique.assignFromAttribute_tokenString (var_cas_programName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  var_cas_programName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this file does not define a bootloader specification") COMMA_SOURCE_FILE_AT_LINE (225)) ;
  var_cas_outPiccoloDeviceModel.drop () ;
  var_cas_outAccessBankSplitOffset.drop () ;
  var_cas_outRamBank.drop () ;
  var_cas_outRegisterTable.drop () ;
  var_cas_outBootloaderReservedRAMmap.drop () ;
  var_cas_outBootloaderRoutineDeclarationList.drop () ;
  var_cas_outUserRoutineDeclarationList.drop () ;
  var_cas_outBootloaderReservedROMsize.drop () ;
  switch (select_piccolo_syntax_0 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_implements) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bootloader) COMMA_HERE) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_uses) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bootloader) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_piccolo_syntax_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_mark) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_literal_5F_string) COMMA_HERE) ;
          } break ;
        case 3 : {
          nt_configuration_definition_parse (inLexique) ;
          } break ;
        case 4 : {
          nt_ram_definition_parse (inLexique) ;
          } break ;
        case 5 : {
          nt_constant_definition_parse (inLexique) ;
          } break ;
        case 6 : {
          nt_interrupt_definition_parse (inLexique) ;
          } break ;
        case 7 : {
          nt_routine_definition_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'configuration_definition'        *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_configuration_definition_piccolo_syntax_256_31_ (piccolo_lexique & inLexique,
                                GGS_configDefinitionList  &var_cas_ioConfigDefinitionList,
                                GGS_bool &var_cas_ioAcceptDefaultConfiguration) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_configuration) COMMA_HERE) ;
  GGS_location  var_cas_defLocation = GGS_location (inLexique) ;
  GGS_configSettingList  var_cas_settingList = GGS_configSettingList ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B_) COMMA_HERE) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_repeat_piccolo_syntax_2 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_default) COMMA_HERE) ;
          const GGS_bool cond_7047 = var_cas_ioAcceptDefaultConfiguration ;
          if (cond_7047.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("'default' for configuration is already set") COMMA_SOURCE_FILE_AT_LINE (268)) ;
          }
          var_cas_ioAcceptDefaultConfiguration = GGS_bool (true) ;
          } break ;
        case 3 : {
          GGS_lstring  var_cas_settingName ;
          inLexique.assignFromAttribute_tokenString (var_cas_settingName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A_) COMMA_HERE) ;
          GGS_lstring  var_cas_settingValue ;
          switch (select_piccolo_syntax_3 (inLexique)) {
            case 1 : {
              inLexique.assignFromAttribute_tokenString (var_cas_settingValue) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.assignFromAttribute_tokenString (var_cas_settingValue) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_literal_5F_string) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          var_cas_settingList.addAssign_operation (var_cas_settingName, var_cas_settingValue) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D_) COMMA_HERE) ;
  var_cas_ioConfigDefinitionList.addAssign_operation (var_cas_defLocation, var_cas_settingList) ;
}

//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_configuration_definition_piccolo_syntax_256_31_parse (piccolo_lexique & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_configuration) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B_) COMMA_HERE) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_repeat_piccolo_syntax_2 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_default) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A_) COMMA_HERE) ;
          switch (select_piccolo_syntax_3 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_literal_5F_string) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'declaration_in_ram'           *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_declaration_in_ram_piccolo_syntax_288_25_ (piccolo_lexique & inLexique,
                                GGS_declarationInRam  &var_cas_outDeclaration) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_byte) COMMA_HERE) ;
  GGS_lstring  var_cas_name ;
  inLexique.assignFromAttribute_tokenString (var_cas_name) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  GGS_luint  var_cas_size ;
  switch (select_piccolo_syntax_4 (inLexique)) {
    case 1 : {
      var_cas_size = GGS_luint ::constructor_new (inLexique, GGS_uint (1U), GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5B_) COMMA_HERE) ;
      inLexique.assignFromAttribute_uint32value (var_cas_size) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_bitSliceTable  var_cas_bitSliceTable = GGS_bitSliceTable ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_string var_cas_bitDefinitionString ;
  switch (select_piccolo_syntax_5 (inLexique)) {
    case 1 : {
      var_cas_bitDefinitionString = GGS_string ("") ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3C_) COMMA_HERE) ;
      var_cas_bitDefinitionString = GGS_string (" <") ;
      GGS_sint  var_cas_sliceIndex = GGS_sint (8L) ;
      { bool syntaxRepeat_6 = true ;
        while (syntaxRepeat_6) {
            switch (select_piccolo_syntax_7 (inLexique)) {
              case 1 : {
                GGS_uint  var_cas_sliceWidth = GGS_uint (0U) ;
                { bool syntaxRepeat_8 = true ;
                  while (syntaxRepeat_8) {
                      GGS_uint  var_cas_sliceBase = GGS_uint (0U) ;
                      const GGS_bool cond_8130 = (var_cas_sliceIndex).operator_supOrEqual (GGS_sint (0L)) ;
                      if (cond_8130.isBuiltAndTrue ()) {
                        var_cas_sliceBase = var_cas_sliceIndex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (315)) ;
                      }
                      GGS_lstring  var_cas_sliceName ;
                      inLexique.assignFromAttribute_tokenString (var_cas_sliceName) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
                      switch (select_piccolo_syntax_9 (inLexique)) {
                        case 1 : {
                          const GGS_bool cond_8360 = ((var_cas_sliceWidth).operator_isNotEqual (GGS_uint (0U))).operator_and ((var_cas_sliceWidth).operator_isNotEqual (GGS_uint (1U))) ;
                          if (cond_8360.isBuiltAndTrue ()) {
                            var_cas_sliceName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("a slice of 1 bit is expected for '")).operator_concat (var_cas_sliceName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (321)) ;
                          }
                          var_cas_sliceWidth = GGS_uint (1U) ;
                          var_cas_bitDefinitionString.dotAssign_operation (var_cas_sliceName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (323))) ;
                          } break ;
                        case 2 : {
                          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5B_) COMMA_HERE) ;
                          GGS_luint  var_cas_sliceSize ;
                          inLexique.assignFromAttribute_uint32value (var_cas_sliceSize) ;
                          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
                          const GGS_bool cond_8730 = ((var_cas_sliceWidth).operator_isNotEqual (GGS_uint (0U))).operator_and ((var_cas_sliceWidth).operator_isNotEqual (var_cas_sliceSize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (327)))) ;
                          if (cond_8730.isBuiltAndTrue ()) {
                            var_cas_sliceName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("a slice of ")).operator_concat (var_cas_sliceWidth.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (328)))).operator_concat (GGS_string (" bits is expected for '"))).operator_concat (var_cas_sliceName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (329)) ;
                          }
                          var_cas_sliceWidth = var_cas_sliceSize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (330)) ;
                          var_cas_sliceBase = var_cas_sliceBase.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (331)).substract_operation (inLexique, var_cas_sliceSize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (331)) COMMA_SOURCE_FILE_AT_LINE (331)) ;
                          var_cas_bitDefinitionString.dotAssign_operation (var_cas_sliceName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (332))) ;
                          var_cas_bitDefinitionString.appendCString ("[") ;
                          var_cas_bitDefinitionString.dotAssign_operation (var_cas_sliceSize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (332)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (332))) ;
                          var_cas_bitDefinitionString.appendCString ("]") ;
                          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5D_) COMMA_HERE) ;
                          } break ;
                        default :
                          break ;
                      }
                      GGS_uint  var_cas_base = GGS_uint (0U) ;
                      const GGS_bool cond_9123 = (var_cas_sliceIndex).operator_supOrEqual (var_cas_sliceWidth.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (336))) ;
                      if (cond_9123.isBuiltAndTrue ()) {
                        var_cas_base = var_cas_sliceIndex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (337)).substract_operation (inLexique, var_cas_sliceWidth COMMA_SOURCE_FILE_AT_LINE (337)) ;
                      }
                      var_cas_bitSliceTable.modifier_insertKey (inLexique, var_cas_sliceName, var_cas_base, var_cas_sliceWidth COMMA_SOURCE_FILE_AT_LINE (339)) ;
                    switch (select_repeat_piccolo_syntax_8 (inLexique)) {
                      case 2 : {
                        inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2F_) COMMA_HERE) ;
                        var_cas_bitDefinitionString.appendCString ("/") ;
                        } break ;
                      default :
                        syntaxRepeat_8 = false ;
                        break ;
                    }
                  }
                }
                var_cas_sliceIndex = var_cas_sliceIndex.substract_operation (inLexique, var_cas_sliceWidth.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (344)) COMMA_SOURCE_FILE_AT_LINE (344)) ;
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2D_) COMMA_HERE) ;
                var_cas_bitDefinitionString.appendCString ("-") ;
                var_cas_sliceIndex.decrement_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (348)) ;
                } break ;
              default :
                break ;
            }
          switch (select_repeat_piccolo_syntax_6 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
              var_cas_bitDefinitionString.appendCString (", ") ;
              } break ;
            default :
              syntaxRepeat_6 = false ;
              break ;
          }
        }
      }
      const GGS_bool cond_9701 = (var_cas_sliceIndex).operator_isNotEqual (GGS_sint (0L)) ;
      if (cond_9701.isBuiltAndTrue ()) {
        var_cas_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("Incorrect bit definition for register '")).operator_concat (var_cas_name)).operator_concat (GGS_string ("': "))).operator_concat (GGS_sint (8L).substract_operation (inLexique, var_cas_sliceIndex COMMA_SOURCE_FILE_AT_LINE (355)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (355)))).operator_concat (GGS_string (" bits (s) are defined, instead of 8")) COMMA_SOURCE_FILE_AT_LINE (356)) ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3E_) COMMA_HERE) ;
      var_cas_bitDefinitionString.appendCString (">") ;
      } break ;
    default :
      break ;
  }
  var_cas_outDeclaration = GGS_byteDeclarationInRam ::constructor_new (inLexique, var_cas_name, var_cas_size, var_cas_bitSliceTable, var_cas_bitDefinitionString COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_declaration_in_ram_piccolo_syntax_288_25_parse (piccolo_lexique & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_byte) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  switch (select_piccolo_syntax_4 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5B_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  switch (select_piccolo_syntax_5 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3C_) COMMA_HERE) ;
      { bool syntaxRepeat_6 = true ;
        while (syntaxRepeat_6) {
            switch (select_piccolo_syntax_7 (inLexique)) {
              case 1 : {
                { bool syntaxRepeat_8 = true ;
                  while (syntaxRepeat_8) {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
                      switch (select_piccolo_syntax_9 (inLexique)) {
                        case 1 : {
                          } break ;
                        case 2 : {
                          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5B_) COMMA_HERE) ;
                          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
                          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5D_) COMMA_HERE) ;
                          } break ;
                        default :
                          break ;
                      }
                    switch (select_repeat_piccolo_syntax_8 (inLexique)) {
                      case 2 : {
                        inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2F_) COMMA_HERE) ;
                        } break ;
                      default :
                        syntaxRepeat_8 = false ;
                        break ;
                    }
                  }
                }
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2D_) COMMA_HERE) ;
                } break ;
              default :
                break ;
            }
          switch (select_repeat_piccolo_syntax_6 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_6 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3E_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'declaration_in_ram'           *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_declaration_in_ram_piccolo_syntax_365_25_ (piccolo_lexique & inLexique,
                                GGS_declarationInRam  &var_cas_outDeclaration) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_common) COMMA_HERE) ;
  GGS_commonBranchList  var_cas_commonBranchList = GGS_commonBranchList ::constructor_emptyList () ;
  { bool syntaxRepeat_10 = true ;
    while (syntaxRepeat_10) {
        GGS_declarationInRamList  var_cas_declarationInRamList = GGS_declarationInRamList ::constructor_emptyList () ;
        { bool syntaxRepeat_11 = true ;
          while (syntaxRepeat_11) {
            switch (select_repeat_piccolo_syntax_11 (inLexique)) {
              case 2 : {
                GGS_declarationInRam  var_cas_declaration ;
                nt_declaration_in_ram_ (inLexique, var_cas_declaration) ;
                var_cas_declarationInRamList.addAssign_operation (var_cas_declaration) ;
                } break ;
              default :
                syntaxRepeat_11 = false ;
                break ;
            }
          }
        }
        var_cas_commonBranchList.addAssign_operation (var_cas_declarationInRamList, GGS_location (inLexique)) ;
      switch (select_repeat_piccolo_syntax_10 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_10 = false ;
          break ;
      }
    }
  }
  var_cas_outDeclaration = GGS_commonDeclarationInRam ::constructor_new (inLexique, var_cas_commonBranchList COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_declaration_in_ram_piccolo_syntax_365_25_parse (piccolo_lexique & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_common) COMMA_HERE) ;
  { bool syntaxRepeat_10 = true ;
    while (syntaxRepeat_10) {
        { bool syntaxRepeat_11 = true ;
          while (syntaxRepeat_11) {
            switch (select_repeat_piccolo_syntax_11 (inLexique)) {
              case 2 : {
                nt_declaration_in_ram_parse (inLexique) ;
                } break ;
              default :
                syntaxRepeat_11 = false ;
                break ;
            }
          }
        }
      switch (select_repeat_piccolo_syntax_10 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_10 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'ram_definition'             *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_ram_definition_piccolo_syntax_388_21_ (piccolo_lexique & inLexique,
                                GGS_ramDefinitionList  &var_cas_ioRamDefinitionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_ram) COMMA_HERE) ;
  GGS_lstring  var_cas_bankName ;
  inLexique.assignFromAttribute_tokenString (var_cas_bankName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B_) COMMA_HERE) ;
  GGS_declarationInRamList  var_cas_declarationInRamList = GGS_declarationInRamList ::constructor_emptyList () ;
  { bool syntaxRepeat_12 = true ;
    while (syntaxRepeat_12) {
      switch (select_repeat_piccolo_syntax_12 (inLexique)) {
        case 2 : {
          GGS_declarationInRam  var_cas_declaration ;
          nt_declaration_in_ram_ (inLexique, var_cas_declaration) ;
          var_cas_declarationInRamList.addAssign_operation (var_cas_declaration) ;
          } break ;
        default :
          syntaxRepeat_12 = false ;
          break ;
      }
    }
  }
  var_cas_ioRamDefinitionList.addAssign_operation (var_cas_bankName, var_cas_declarationInRamList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_ram_definition_piccolo_syntax_388_21_parse (piccolo_lexique & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_ram) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B_) COMMA_HERE) ;
  { bool syntaxRepeat_12 = true ;
    while (syntaxRepeat_12) {
      switch (select_repeat_piccolo_syntax_12 (inLexique)) {
        case 2 : {
          nt_declaration_in_ram_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_12 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'constant_definition'           *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_constant_definition_piccolo_syntax_407_26_ (piccolo_lexique & inLexique,
                                GGS_constantDefinitionList  &var_cas_ioConstantDefinitionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_const) COMMA_HERE) ;
  GGS_lstring  var_cas_constantName ;
  inLexique.assignFromAttribute_tokenString (var_cas_constantName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3D_) COMMA_HERE) ;
  GGS_immediatExpression  var_cas_expression ;
  nt_immediate_expression_ (inLexique, var_cas_expression) ;
  var_cas_ioConstantDefinitionList.addAssign_operation (var_cas_constantName, var_cas_expression) ;
}

//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_constant_definition_piccolo_syntax_407_26_parse (piccolo_lexique & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_const) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3D_) COMMA_HERE) ;
  nt_immediate_expression_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'instruction_list'            *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_instruction_list_piccolo_syntax_420_23_ (piccolo_lexique & inLexique,
                                GGS_instructionList  &var_cas_outInstructionList,
                                GGS_bool &var_cas_ioNeedsComputedGoto2,
                                GGS_bool &var_cas_ioNeedsComputedGoto4) {
  var_cas_outInstructionList = GGS_instructionList ::constructor_emptyList () ;
  { bool syntaxRepeat_13 = true ;
    while (syntaxRepeat_13) {
      switch (select_repeat_piccolo_syntax_13 (inLexique)) {
        case 2 : {
          GGS_piccolo_instruction  var_cas_instruction ;
          nt_simple_instruction_ (inLexique, var_cas_instruction) ;
          var_cas_outInstructionList.addAssign_operation (var_cas_instruction) ;
          } break ;
        case 3 : {
          GGS_piccolo_instruction  var_cas_instruction ;
          nt_structured_instruction_ (inLexique, var_cas_instruction, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
          var_cas_outInstructionList.addAssign_operation (var_cas_instruction) ;
          } break ;
        default :
          syntaxRepeat_13 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_instruction_list_piccolo_syntax_420_23_parse (piccolo_lexique & inLexique) {
  { bool syntaxRepeat_13 = true ;
    while (syntaxRepeat_13) {
      switch (select_repeat_piccolo_syntax_13 (inLexique)) {
        case 2 : {
          nt_simple_instruction_parse (inLexique) ;
          } break ;
        case 3 : {
          nt_structured_instruction_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_13 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'interrupt_definition'          *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_interrupt_definition_piccolo_syntax_444_27_ (piccolo_lexique & inLexique,
                                GGS_interruptDefinitionList  &var_cas_ioInterruptDefinitionList,
                                GGS_bool &var_cas_ioNeedsComputedGoto2,
                                GGS_bool &var_cas_ioNeedsComputedGoto4) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_interrupt) COMMA_HERE) ;
  GGS_lstring  var_cas_interruptName ;
  inLexique.assignFromAttribute_tokenString (var_cas_interruptName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  GGS_bool var_cas_isFast ;
  switch (select_piccolo_syntax_14 (inLexique)) {
    case 1 : {
      var_cas_isFast = GGS_bool (false) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_fast) COMMA_HERE) ;
      var_cas_isFast = GGS_bool (true) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B_) COMMA_HERE) ;
  GGS_instructionList  var_cas_instructionList ;
  nt_instruction_list_ (inLexique, var_cas_instructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D_) COMMA_HERE) ;
  var_cas_ioInterruptDefinitionList.addAssign_operation (var_cas_interruptName, var_cas_isFast, var_cas_instructionList, GGS_location (inLexique)) ;
}

//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_interrupt_definition_piccolo_syntax_444_27_parse (piccolo_lexique & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_interrupt) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  switch (select_piccolo_syntax_14 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_fast) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B_) COMMA_HERE) ;
  nt_instruction_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'routine_definition'           *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_routine_definition_piccolo_syntax_471_25_ (piccolo_lexique & inLexique,
                                GGS_routineDefinitionList  &var_cas_ioRoutineDefinitionList,
                                GGS_bool &var_cas_ioNeedsComputedGoto2,
                                GGS_bool &var_cas_ioNeedsComputedGoto4) {
  GGS_bool var_cas_noreturn ;
  switch (select_piccolo_syntax_15 (inLexique)) {
    case 1 : {
      var_cas_noreturn = GGS_bool (false) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_noreturn) COMMA_HERE) ;
      var_cas_noreturn = GGS_bool (true) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_routine) COMMA_HERE) ;
  GGS_lstring  var_cas_routineName ;
  inLexique.assignFromAttribute_tokenString (var_cas_routineName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  GGS_luint  var_cas_requiredBank ;
  GGS_luint  var_cas_returnedBank ;
  GGS_bool var_cas_preservesBank ;
  switch (select_piccolo_syntax_16 (inLexique)) {
    case 1 : {
      var_cas_requiredBank = GGS_luint ::constructor_new (inLexique, GGS_uint ::constructor_max (inLexique COMMA_HERE), GGS_location (inLexique) COMMA_HERE) ;
      var_cas_returnedBank = GGS_luint ::constructor_new (inLexique, GGS_uint ::constructor_max (inLexique COMMA_HERE), GGS_location (inLexique) COMMA_HERE) ;
      var_cas_preservesBank = GGS_bool (false) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bank) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A_) COMMA_HERE) ;
      switch (select_piccolo_syntax_17 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_preserved) COMMA_HERE) ;
          const GGS_bool cond_13252 = var_cas_noreturn ;
          if (cond_13252.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a \"noreturn\" routine cannot accept \"bank:preserved\" setting") COMMA_SOURCE_FILE_AT_LINE (499)) ;
          }
          var_cas_preservesBank = GGS_bool (true) ;
          var_cas_requiredBank = GGS_luint ::constructor_new (inLexique, GGS_uint ::constructor_max (inLexique COMMA_HERE), GGS_location (inLexique) COMMA_HERE) ;
          var_cas_returnedBank = GGS_luint ::constructor_new (inLexique, GGS_uint ::constructor_max (inLexique COMMA_HERE), GGS_location (inLexique) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_requires) COMMA_HERE) ;
          inLexique.assignFromAttribute_uint32value (var_cas_requiredBank) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
          var_cas_preservesBank = GGS_bool (false) ;
          switch (select_piccolo_syntax_18 (inLexique)) {
            case 1 : {
              var_cas_returnedBank = GGS_luint ::constructor_new (inLexique, GGS_uint ::constructor_max (inLexique COMMA_HERE), GGS_location (inLexique) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_ensures) COMMA_HERE) ;
              inLexique.assignFromAttribute_uint32value (var_cas_returnedBank) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
              const GGS_bool cond_13750 = var_cas_noreturn ;
              if (cond_13750.isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a \"noreturn\" routine cannot accept \"bank:returned\" setting") COMMA_SOURCE_FILE_AT_LINE (514)) ;
              }
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_ensures) COMMA_HERE) ;
          inLexique.assignFromAttribute_uint32value (var_cas_returnedBank) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
          const GGS_bool cond_13952 = var_cas_noreturn ;
          if (cond_13952.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a \"noreturn\" routine cannot accept \"bank:returned\" setting") COMMA_SOURCE_FILE_AT_LINE (521)) ;
          }
          var_cas_preservesBank = GGS_bool (false) ;
          var_cas_requiredBank = GGS_luint ::constructor_new (inLexique, GGS_uint ::constructor_max (inLexique COMMA_HERE), GGS_location (inLexique) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B_) COMMA_HERE) ;
  GGS_instructionList  var_cas_instructionList ;
  nt_instruction_list_ (inLexique, var_cas_instructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D_) COMMA_HERE) ;
  var_cas_ioRoutineDefinitionList.addAssign_operation (var_cas_routineName, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank, var_cas_noreturn, var_cas_instructionList, GGS_location (inLexique)) ;
}

//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_routine_definition_piccolo_syntax_471_25_parse (piccolo_lexique & inLexique) {
  switch (select_piccolo_syntax_15 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_noreturn) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_routine) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  switch (select_piccolo_syntax_16 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bank) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A_) COMMA_HERE) ;
      switch (select_piccolo_syntax_17 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_preserved) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_requires) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
          switch (select_piccolo_syntax_18 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_ensures) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_ensures) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B_) COMMA_HERE) ;
  nt_instruction_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'register_parsing'            *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_register_parsing_piccolo_syntax_539_23_ (piccolo_lexique & inLexique,
                                GGS_registerExpression  &var_cas_outRegisterExpression) {
  GGS_lstring  var_cas_registerName ;
  inLexique.assignFromAttribute_tokenString (var_cas_registerName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  GGS_luint  var_cas_offset ;
  switch (select_piccolo_syntax_19 (inLexique)) {
    case 1 : {
      var_cas_offset = GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5B_) COMMA_HERE) ;
      inLexique.assignFromAttribute_uint32value (var_cas_offset) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  var_cas_outRegisterExpression = GGS_registerExpression ::constructor_new (inLexique, var_cas_registerName, var_cas_offset COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_register_parsing_piccolo_syntax_539_23_parse (piccolo_lexique & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  switch (select_piccolo_syntax_19 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5B_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'bit_number_parsing'           *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_bit_number_parsing_piccolo_syntax_557_25_ (piccolo_lexique & inLexique,
                                GGS_bitNumberExpression  &var_cas_outBitNumber) {
  GGS_lstring  var_cas_bitNumberLabel ;
  inLexique.assignFromAttribute_tokenString (var_cas_bitNumberLabel) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  GGS_luint  var_cas_bitIndex ;
  switch (select_piccolo_syntax_20 (inLexique)) {
    case 1 : {
      var_cas_bitIndex = GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5B_) COMMA_HERE) ;
      inLexique.assignFromAttribute_uint32value (var_cas_bitIndex) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  var_cas_outBitNumber = GGS_bitNumberLabelValue ::constructor_new (inLexique, var_cas_bitNumberLabel, var_cas_bitIndex COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_bit_number_parsing_piccolo_syntax_557_25_parse (piccolo_lexique & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  switch (select_piccolo_syntax_20 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5B_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'bit_number_parsing'           *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_bit_number_parsing_piccolo_syntax_572_25_ (piccolo_lexique & inLexique,
                                GGS_bitNumberExpression  &var_cas_outBitNumber) {
  GGS_luint  var_cas_bitNumberLiteral ;
  inLexique.assignFromAttribute_uint32value (var_cas_bitNumberLiteral) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
  var_cas_outBitNumber = GGS_bitNumberLiteralValue ::constructor_new (inLexique, var_cas_bitNumberLiteral COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_bit_number_parsing_piccolo_syntax_572_25_parse (piccolo_lexique & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'optional_w_as_dest'           *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_optional_w_as_dest_piccolo_syntax_579_25_ (piccolo_lexique & inLexique,
                                GGS_bool &var_cas_out_W_isDestination) {
  switch (select_piccolo_syntax_21 (inLexique)) {
    case 1 : {
      var_cas_out_W_isDestination = GGS_bool (false) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
      var_cas_out_W_isDestination = GGS_bool (true) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_optional_w_as_dest_piccolo_syntax_579_25_parse (piccolo_lexique & inLexique) {
  switch (select_piccolo_syntax_21 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'condition_factor'            *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_condition_factor_piccolo_syntax_591_23_ (piccolo_lexique & inLexique,
                                GGS_conditionExpression  &var_cas_outCondition) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__21_) COMMA_HERE) ;
  GGS_conditionExpression  var_cas_condition ;
  nt_condition_factor_ (inLexique, var_cas_condition) ;
  var_cas_outCondition = GGS_negateCondition ::constructor_new (inLexique, var_cas_condition COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_condition_factor_piccolo_syntax_591_23_parse (piccolo_lexique & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__21_) COMMA_HERE) ;
  nt_condition_factor_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'condition_factor'            *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_condition_factor_piccolo_syntax_602_23_ (piccolo_lexique & inLexique,
                                GGS_conditionExpression  &var_cas_outCondition) {
  nt_condition_expression_ (inLexique, var_cas_outCondition) ;
}

//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_condition_factor_piccolo_syntax_602_23_parse (piccolo_lexique & inLexique) {
  nt_condition_expression_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'condition_factor'            *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_condition_factor_piccolo_syntax_610_23_ (piccolo_lexique & inLexique,
                                GGS_conditionExpression  &var_cas_outCondition) {
  switch (select_piccolo_syntax_22 (inLexique)) {
    case 1 : {
      GGS_bool var_cas_isIncrement ;
      switch (select_piccolo_syntax_23 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_incf) COMMA_HERE) ;
          var_cas_isIncrement = GGS_bool (true) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_decf) COMMA_HERE) ;
          var_cas_isIncrement = GGS_bool (false) ;
          } break ;
        default :
          break ;
      }
      GGS_registerExpression  var_cas_registerExpression ;
      nt_register_parsing_ (inLexique, var_cas_registerExpression) ;
      GGS_bool var_cas_W_isDestination ;
      switch (select_piccolo_syntax_24 (inLexique)) {
        case 1 : {
          var_cas_W_isDestination = GGS_bool (false) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          var_cas_W_isDestination = GGS_bool (true) ;
          } break ;
        default :
          break ;
      }
      GGS_lstring  var_cas_conditionString ;
      inLexique.assignFromAttribute_tokenString (var_cas_conditionString) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      GGS_string var_cas_condition = var_cas_conditionString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (629)).reader_uppercaseString (inLexique COMMA_SOURCE_FILE_AT_LINE (629)) ;
      GGS_bool var_cas_branchIfZero ;
      const GGS_bool cond_16754 = (var_cas_condition).operator_isEqual (GGS_string ("Z")) ;
      if (cond_16754.isBuiltAndTrue ()) {
        var_cas_branchIfZero = GGS_bool (true) ;
      }else if (cond_16754.isBuiltAndFalse ()) {
        const GGS_bool cond_16816 = (var_cas_condition).operator_isEqual (GGS_string ("NZ")) ;
        if (cond_16816.isBuiltAndTrue ()) {
          var_cas_branchIfZero = GGS_bool (false) ;
        }else if (cond_16816.isBuiltAndFalse ()) {
          var_cas_conditionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("invalid '")).operator_concat (var_cas_conditionString)).operator_concat (GGS_string ("' condition; valid ones are: 'z' and 'nz'")) COMMA_SOURCE_FILE_AT_LINE (640)) ;
          var_cas_branchIfZero.drop () ;
        }
      }
      var_cas_outCondition = GGS_incDecRegisterInCondition ::constructor_new (inLexique, var_cas_registerExpression, var_cas_isIncrement, var_cas_W_isDestination, var_cas_branchIfZero COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_registerExpression  var_cas_registerExpression ;
      nt_register_parsing_ (inLexique, var_cas_registerExpression) ;
      GGS_registerComparison var_cas_comparison ;
      switch (select_piccolo_syntax_25 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__21__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          var_cas_comparison = GGS_registerComparison::constructor_notEqual (inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3D__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          var_cas_comparison = GGS_registerComparison::constructor_equal (inLexique COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3C__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          var_cas_comparison = GGS_registerComparison::constructor_lowerOrEqual (inLexique COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3E__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          var_cas_comparison = GGS_registerComparison::constructor_greaterOrEqual (inLexique COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3C_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          var_cas_comparison = GGS_registerComparison::constructor_lower (inLexique COMMA_HERE) ;
          } break ;
        case 6 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3E_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          var_cas_comparison = GGS_registerComparison::constructor_greater (inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      var_cas_outCondition = GGS_registerComparisonCondition ::constructor_new (inLexique, var_cas_registerExpression, var_cas_comparison COMMA_HERE) ;
      } break ;
    case 3 : {
      GGS_registerExpression  var_cas_registerExpression ;
      nt_register_parsing_ (inLexique, var_cas_registerExpression) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2E_) COMMA_HERE) ;
      GGS_bitNumberExpression  var_cas_bitNumberExpression ;
      nt_bit_number_parsing_ (inLexique, var_cas_bitNumberExpression) ;
      GGS_bool var_cas_BTFSSinstruction ;
      switch (select_piccolo_syntax_26 (inLexique)) {
        case 1 : {
          var_cas_BTFSSinstruction = GGS_bool (false) ;
          } break ;
        case 2 : {
          GGS_lstring  var_cas_conditionString ;
          inLexique.assignFromAttribute_tokenString (var_cas_conditionString) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
          GGS_string var_cas_condition = var_cas_conditionString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (679)).reader_uppercaseString (inLexique COMMA_SOURCE_FILE_AT_LINE (679)) ;
          const GGS_bool cond_18699 = (var_cas_condition).operator_isEqual (GGS_string ("Z")) ;
          if (cond_18699.isBuiltAndTrue ()) {
            var_cas_BTFSSinstruction = GGS_bool (true) ;
            GGS_string var_cas_s = (GGS_string ("! ")).operator_concat (var_cas_registerExpression.reader_mRegisterName (inLexique COMMA_SOURCE_FILE_AT_LINE (682)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (682))) ;
            const GGS_bool cond_18504 = (var_cas_registerExpression.reader_mOffset (inLexique COMMA_SOURCE_FILE_AT_LINE (683)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (683))).operator_strictSup (GGS_uint (0U)) ;
            if (cond_18504.isBuiltAndTrue ()) {
              var_cas_s.appendCString (" [") ;
              var_cas_s.dotAssign_operation (var_cas_registerExpression.reader_mOffset (inLexique COMMA_SOURCE_FILE_AT_LINE (684)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (684)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (684))) ;
              var_cas_s.appendCString ("]") ;
            }
            var_cas_s.appendCString (".") ;
            const GGS_bitNumberExpression  temp_18557 = var_cas_bitNumberExpression ;
            if (temp_18557.isBuilt ()) {
              temp_18557 (HERE)->method_display (inLexique, var_cas_s COMMA_SOURCE_FILE_AT_LINE (686)) ;
            }
            var_cas_conditionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("In Piccolo 1.2.0 and later, this construction is deprecated; use '")).operator_concat (var_cas_s)).operator_concat (GGS_string ("' instead")) COMMA_SOURCE_FILE_AT_LINE (687)) ;
          }else if (cond_18699.isBuiltAndFalse ()) {
            const GGS_bool cond_19162 = (var_cas_condition).operator_isEqual (GGS_string ("NZ")) ;
            if (cond_19162.isBuiltAndTrue ()) {
              var_cas_BTFSSinstruction = GGS_bool (false) ;
              GGS_string var_cas_s = var_cas_registerExpression.reader_mRegisterName (inLexique COMMA_SOURCE_FILE_AT_LINE (690)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (690)) ;
              const GGS_bool cond_18968 = (var_cas_registerExpression.reader_mOffset (inLexique COMMA_SOURCE_FILE_AT_LINE (691)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (691))).operator_strictSup (GGS_uint (0U)) ;
              if (cond_18968.isBuiltAndTrue ()) {
                var_cas_s.appendCString (" [") ;
                var_cas_s.dotAssign_operation (var_cas_registerExpression.reader_mOffset (inLexique COMMA_SOURCE_FILE_AT_LINE (692)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (692)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (692))) ;
                var_cas_s.appendCString ("]") ;
              }
              var_cas_s.appendCString (".") ;
              const GGS_bitNumberExpression  temp_19021 = var_cas_bitNumberExpression ;
              if (temp_19021.isBuilt ()) {
                temp_19021 (HERE)->method_display (inLexique, var_cas_s COMMA_SOURCE_FILE_AT_LINE (694)) ;
              }
              var_cas_conditionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("In Piccolo 1.2.0 and later, this construction is deprecated; use '")).operator_concat (var_cas_s)).operator_concat (GGS_string ("' instead")) COMMA_SOURCE_FILE_AT_LINE (695)) ;
            }else if (cond_19162.isBuiltAndFalse ()) {
              var_cas_conditionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("invalid '")).operator_concat (var_cas_conditionString)).operator_concat (GGS_string ("' condition; valid ones are: 'z' and 'nz'")) COMMA_SOURCE_FILE_AT_LINE (701)) ;
              var_cas_BTFSSinstruction.drop () ;
            }
          }
          } break ;
        default :
          break ;
      }
      var_cas_outCondition = GGS_bitTest_in_structured_if_condition ::constructor_new (inLexique, var_cas_registerExpression, var_cas_bitNumberExpression, var_cas_BTFSSinstruction COMMA_HERE) ;
      } break ;
    case 4 : {
      GGS_registerExpression  var_cas_registerName ;
      nt_register_parsing_ (inLexique, var_cas_registerName) ;
      GGS_lstring  var_cas_conditionString ;
      inLexique.assignFromAttribute_tokenString (var_cas_conditionString) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      GGS_string var_cas_condition = var_cas_conditionString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (712)).reader_uppercaseString (inLexique COMMA_SOURCE_FILE_AT_LINE (712)) ;
      GGS_bool var_cas_branchIfZero ;
      const GGS_bool cond_19785 = (var_cas_condition).operator_isEqual (GGS_string ("Z")) ;
      if (cond_19785.isBuiltAndTrue ()) {
        var_cas_branchIfZero = GGS_bool (true) ;
      }else if (cond_19785.isBuiltAndFalse ()) {
        const GGS_bool cond_19847 = (var_cas_condition).operator_isEqual (GGS_string ("NZ")) ;
        if (cond_19847.isBuiltAndTrue ()) {
          var_cas_branchIfZero = GGS_bool (false) ;
        }else if (cond_19847.isBuiltAndFalse ()) {
          var_cas_conditionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("invalid '")).operator_concat (var_cas_conditionString)).operator_concat (GGS_string ("' condition; valid ones are: 'z' and 'nz'")) COMMA_SOURCE_FILE_AT_LINE (723)) ;
          var_cas_branchIfZero.drop () ;
        }
      }
      var_cas_outCondition = GGS_registerTestCondition ::constructor_new (inLexique, var_cas_registerName, var_cas_branchIfZero COMMA_HERE) ;
      } break ;
    case 5 : {
      GGS_conditional_branch var_cas_conditional_branch ;
      GGS_lstring  var_cas_conditionString ;
      inLexique.assignFromAttribute_tokenString (var_cas_conditionString) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      GGS_string var_cas_condition = var_cas_conditionString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (728)).reader_uppercaseString (inLexique COMMA_SOURCE_FILE_AT_LINE (728)) ;
      const GGS_bool cond_20340 = (var_cas_condition).operator_isEqual (GGS_string ("Z")) ;
      if (cond_20340.isBuiltAndTrue ()) {
        var_cas_conditional_branch = GGS_conditional_branch::constructor_bz (inLexique COMMA_HERE) ;
      }else if (cond_20340.isBuiltAndFalse ()) {
        const GGS_bool cond_20429 = (var_cas_condition).operator_isEqual (GGS_string ("NZ")) ;
        if (cond_20429.isBuiltAndTrue ()) {
          var_cas_conditional_branch = GGS_conditional_branch::constructor_bnz (inLexique COMMA_HERE) ;
        }else if (cond_20429.isBuiltAndFalse ()) {
          const GGS_bool cond_20518 = (var_cas_condition).operator_isEqual (GGS_string ("NN")) ;
          if (cond_20518.isBuiltAndTrue ()) {
            var_cas_conditional_branch = GGS_conditional_branch::constructor_bnn (inLexique COMMA_HERE) ;
          }else if (cond_20518.isBuiltAndFalse ()) {
            const GGS_bool cond_20605 = (var_cas_condition).operator_isEqual (GGS_string ("N")) ;
            if (cond_20605.isBuiltAndTrue ()) {
              var_cas_conditional_branch = GGS_conditional_branch::constructor_bn (inLexique COMMA_HERE) ;
            }else if (cond_20605.isBuiltAndFalse ()) {
              const GGS_bool cond_20692 = (var_cas_condition).operator_isEqual (GGS_string ("C")) ;
              if (cond_20692.isBuiltAndTrue ()) {
                var_cas_conditional_branch = GGS_conditional_branch::constructor_bc (inLexique COMMA_HERE) ;
              }else if (cond_20692.isBuiltAndFalse ()) {
                const GGS_bool cond_20781 = (var_cas_condition).operator_isEqual (GGS_string ("NC")) ;
                if (cond_20781.isBuiltAndTrue ()) {
                  var_cas_conditional_branch = GGS_conditional_branch::constructor_bnc (inLexique COMMA_HERE) ;
                }else if (cond_20781.isBuiltAndFalse ()) {
                  const GGS_bool cond_20870 = (var_cas_condition).operator_isEqual (GGS_string ("OV")) ;
                  if (cond_20870.isBuiltAndTrue ()) {
                    var_cas_conditional_branch = GGS_conditional_branch::constructor_bov (inLexique COMMA_HERE) ;
                  }else if (cond_20870.isBuiltAndFalse ()) {
                    const GGS_bool cond_20960 = (var_cas_condition).operator_isEqual (GGS_string ("NOV")) ;
                    if (cond_20960.isBuiltAndTrue ()) {
                      var_cas_conditional_branch = GGS_conditional_branch::constructor_bnov (inLexique COMMA_HERE) ;
                    }else if (cond_20960.isBuiltAndFalse ()) {
                      var_cas_conditionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("invalid '")).operator_concat (var_cas_conditionString)).operator_concat (GGS_string ("' condition; valid ones are: 'z', 'nz', 'n', 'nn', 'c', 'nc', 'ov' and 'nov'")) COMMA_SOURCE_FILE_AT_LINE (750)) ;
                      var_cas_conditional_branch.drop () ;
                    }
                  }
                }
              }
            }
          }
        }
      }
      var_cas_outCondition = GGS_bcc_in_structured_if_condition ::constructor_new (inLexique, var_cas_conditional_branch COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_condition_factor_piccolo_syntax_610_23_parse (piccolo_lexique & inLexique) {
  switch (select_piccolo_syntax_22 (inLexique)) {
    case 1 : {
      switch (select_piccolo_syntax_23 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_incf) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_decf) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      nt_register_parsing_parse (inLexique) ;
      switch (select_piccolo_syntax_24 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      } break ;
    case 2 : {
      nt_register_parsing_parse (inLexique) ;
      switch (select_piccolo_syntax_25 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__21__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3D__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3C__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3E__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3C_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          } break ;
        case 6 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3E_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 3 : {
      nt_register_parsing_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2E_) COMMA_HERE) ;
      nt_bit_number_parsing_parse (inLexique) ;
      switch (select_piccolo_syntax_26 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 4 : {
      nt_register_parsing_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'condition_expression'          *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_condition_expression_piccolo_syntax_757_27_ (piccolo_lexique & inLexique,
                                GGS_conditionExpression  &var_cas_outCondition) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__28_) COMMA_HERE) ;
  nt_condition_term_ (inLexique, var_cas_outCondition) ;
  { bool syntaxRepeat_27 = true ;
    while (syntaxRepeat_27) {
      switch (select_repeat_piccolo_syntax_27 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7C_) COMMA_HERE) ;
          GGS_conditionExpression  var_cas_c ;
          nt_condition_term_ (inLexique, var_cas_c) ;
          GGS_conditionExpression  var_cas_rc = GGS_negateCondition ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
          GGS_conditionExpression  var_cas_lc = GGS_negateCondition ::constructor_new (inLexique, var_cas_outCondition COMMA_HERE) ;
          var_cas_outCondition = GGS_negateCondition ::constructor_new (inLexique, GGS_andCondition ::constructor_new (inLexique, var_cas_lc, var_cas_rc COMMA_HERE) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_27 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_condition_expression_piccolo_syntax_757_27_parse (piccolo_lexique & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__28_) COMMA_HERE) ;
  nt_condition_term_parse (inLexique) ;
  { bool syntaxRepeat_27 = true ;
    while (syntaxRepeat_27) {
      switch (select_repeat_piccolo_syntax_27 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7C_) COMMA_HERE) ;
          nt_condition_term_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_27 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'condition_term'             *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_condition_term_piccolo_syntax_776_21_ (piccolo_lexique & inLexique,
                                GGS_conditionExpression  &var_cas_outCondition) {
  nt_condition_factor_ (inLexique, var_cas_outCondition) ;
  { bool syntaxRepeat_28 = true ;
    while (syntaxRepeat_28) {
      switch (select_repeat_piccolo_syntax_28 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__26_) COMMA_HERE) ;
          GGS_conditionExpression  var_cas_c ;
          nt_condition_factor_ (inLexique, var_cas_c) ;
          var_cas_outCondition = GGS_andCondition ::constructor_new (inLexique, var_cas_outCondition, var_cas_c COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_28 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_condition_term_piccolo_syntax_776_21_parse (piccolo_lexique & inLexique) {
  nt_condition_factor_parse (inLexique) ;
  { bool syntaxRepeat_28 = true ;
    while (syntaxRepeat_28) {
      switch (select_repeat_piccolo_syntax_28 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__26_) COMMA_HERE) ;
          nt_condition_factor_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_28 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'structured_instruction'         *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_structured_instruction_piccolo_syntax_791_29_ (piccolo_lexique & inLexique,
                                GGS_piccolo_instruction  &var_cas_outInstruction,
                                GGS_bool &var_cas_ioNeedsComputedGoto2,
                                GGS_bool &var_cas_ioNeedsComputedGoto4) {
  switch (select_piccolo_syntax_29 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_banksel) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_luint  var_cas_bank ;
      inLexique.assignFromAttribute_uint32value (var_cas_bank) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_banksel ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_bank COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_nobank) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_nobanksel ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_banksave) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_registerExpression  var_cas_register ;
      nt_register_parsing_ (inLexique, var_cas_register) ;
      GGS_instructionList  var_cas_instructionList ;
      nt_instruction_list_ (inLexique, var_cas_instructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_savebank ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_register, var_cas_instructionList, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_computed) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5B_) COMMA_HERE) ;
      GGS_immediatExpression  var_cas_sizeExpression ;
      nt_immediate_expression_ (inLexique, var_cas_sizeExpression) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5D_) COMMA_HERE) ;
      switch (select_piccolo_syntax_30 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_retlw) COMMA_HERE) ;
          GGS_immediatExpressionList  var_cas_argumentList = GGS_immediatExpressionList ::constructor_emptyList () ;
          { bool syntaxRepeat_31 = true ;
            while (syntaxRepeat_31) {
                GGS_immediatExpression  var_cas_expression ;
                nt_immediate_expression_ (inLexique, var_cas_expression) ;
                var_cas_argumentList.addAssign_operation (var_cas_expression) ;
              switch (select_repeat_piccolo_syntax_31 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_31 = false ;
                  break ;
              }
            }
          }
          var_cas_outInstruction = GGS_instruction_computed_retlw ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_sizeExpression, var_cas_argumentList, GGS_bool (true) COMMA_HERE) ;
          var_cas_ioNeedsComputedGoto2 = GGS_bool (true) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bra) COMMA_HERE) ;
          GGS_lstringlist  var_cas_argumentList = GGS_lstringlist ::constructor_emptyList () ;
          { bool syntaxRepeat_32 = true ;
            while (syntaxRepeat_32) {
                GGS_lstring  var_cas_targetRoutine ;
                inLexique.assignFromAttribute_tokenString (var_cas_targetRoutine) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
                var_cas_argumentList.addAssign_operation (var_cas_targetRoutine) ;
              switch (select_repeat_piccolo_syntax_32 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_32 = false ;
                  break ;
              }
            }
          }
          var_cas_outInstruction = GGS_instruction_computed_bra ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_sizeExpression, var_cas_argumentList, GGS_bool (true) COMMA_HERE) ;
          var_cas_ioNeedsComputedGoto2 = GGS_bool (true) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_goto) COMMA_HERE) ;
          GGS_lstringlist  var_cas_argumentList = GGS_lstringlist ::constructor_emptyList () ;
          { bool syntaxRepeat_33 = true ;
            while (syntaxRepeat_33) {
                GGS_lstring  var_cas_targetRoutine ;
                inLexique.assignFromAttribute_tokenString (var_cas_targetRoutine) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
                var_cas_argumentList.addAssign_operation (var_cas_targetRoutine) ;
              switch (select_repeat_piccolo_syntax_33 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_33 = false ;
                  break ;
              }
            }
          }
          var_cas_outInstruction = GGS_instruction_computed_goto ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_sizeExpression, var_cas_argumentList, GGS_bool (true) COMMA_HERE) ;
          var_cas_ioNeedsComputedGoto4 = GGS_bool (true) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_rcall) COMMA_HERE) ;
          GGS_lstringlist  var_cas_argumentList = GGS_lstringlist ::constructor_emptyList () ;
          { bool syntaxRepeat_34 = true ;
            while (syntaxRepeat_34) {
                GGS_lstring  var_cas_targetRoutine ;
                inLexique.assignFromAttribute_tokenString (var_cas_targetRoutine) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
                var_cas_argumentList.addAssign_operation (var_cas_targetRoutine) ;
              switch (select_repeat_piccolo_syntax_34 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_34 = false ;
                  break ;
              }
            }
          }
          var_cas_outInstruction = GGS_instruction_computed_rcall ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_sizeExpression, var_cas_argumentList, GGS_bool (true) COMMA_HERE) ;
          var_cas_ioNeedsComputedGoto4 = GGS_bool (true) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_forever) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_instructionList  var_cas_instructionList ;
      nt_instruction_list_ (inLexique, var_cas_instructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_FOREVER ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_instructionList, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_if) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_registerExpression  var_cas_registerName ;
      nt_register_parsing_ (inLexique, var_cas_registerName) ;
      GGS_if_semi_colon_op var_cas_opCode ;
      switch (select_piccolo_syntax_35 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__21__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          var_cas_opCode = GGS_if_semi_colon_op::constructor_CPFSEQ (inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3C__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          var_cas_opCode = GGS_if_semi_colon_op::constructor_CPFSGT (inLexique COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3E__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          var_cas_opCode = GGS_if_semi_colon_op::constructor_CPFSLT (inLexique COMMA_HERE) ;
          } break ;
        case 4 : {
          GGS_lstring  var_cas_conditionString ;
          inLexique.assignFromAttribute_tokenString (var_cas_conditionString) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
          GGS_string var_cas_condition = var_cas_conditionString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (916)).reader_uppercaseString (inLexique COMMA_SOURCE_FILE_AT_LINE (916)) ;
          const GGS_bool cond_25754 = (var_cas_condition).operator_isNotEqual (GGS_string ("NZ")) ;
          if (cond_25754.isBuiltAndTrue ()) {
            var_cas_conditionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("invalid '")).operator_concat (var_cas_condition)).operator_concat (GGS_string ("' condition; it should be 'nz'")) COMMA_SOURCE_FILE_AT_LINE (919)) ;
          }
          var_cas_opCode = GGS_if_semi_colon_op::constructor_TSTFSZ (inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A_) COMMA_HERE) ;
      GGS_piccolo_instruction  var_cas_instruction ;
      nt_simple_instruction_ (inLexique, var_cas_instruction) ;
      var_cas_outInstruction = GGS_instruction_IF_FA_SEMI_COLON ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_instruction, var_cas_opCode, var_cas_registerName COMMA_HERE) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_if) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_registerExpression  var_cas_registerName ;
      GGS_bitNumberExpression  var_cas_bitNumber ;
      GGS_bool var_cas_skipIfSet ;
      switch (select_piccolo_syntax_36 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__21_) COMMA_HERE) ;
          nt_register_parsing_ (inLexique, var_cas_registerName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2E_) COMMA_HERE) ;
          nt_bit_number_parsing_ (inLexique, var_cas_bitNumber) ;
          var_cas_skipIfSet = GGS_bool (true) ;
          } break ;
        case 2 : {
          nt_register_parsing_ (inLexique, var_cas_registerName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2E_) COMMA_HERE) ;
          nt_bit_number_parsing_ (inLexique, var_cas_bitNumber) ;
          switch (select_piccolo_syntax_37 (inLexique)) {
            case 1 : {
              var_cas_skipIfSet = GGS_bool (false) ;
              } break ;
            case 2 : {
              GGS_lstring  var_cas_conditionString ;
              inLexique.assignFromAttribute_tokenString (var_cas_conditionString) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
              GGS_string var_cas_condition = var_cas_conditionString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (951)).reader_uppercaseString (inLexique COMMA_SOURCE_FILE_AT_LINE (951)) ;
              const GGS_bool cond_27108 = (var_cas_condition).operator_isEqual (GGS_string ("Z")) ;
              if (cond_27108.isBuiltAndTrue ()) {
                var_cas_skipIfSet = GGS_bool (true) ;
                GGS_string var_cas_s = (GGS_string ("if ! ")).operator_concat (var_cas_registerName.reader_mRegisterName (inLexique COMMA_SOURCE_FILE_AT_LINE (954))) ;
                const GGS_bool cond_26895 = (var_cas_registerName.reader_mOffset (inLexique COMMA_SOURCE_FILE_AT_LINE (955)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (955))).operator_strictSup (GGS_uint (0U)) ;
                if (cond_26895.isBuiltAndTrue ()) {
                  var_cas_s.appendCString (" [") ;
                  var_cas_s.dotAssign_operation (var_cas_registerName.reader_mOffset (inLexique COMMA_SOURCE_FILE_AT_LINE (956)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (956)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (956))) ;
                  var_cas_s.appendCString ("]") ;
                }
                var_cas_s.appendCString (".") ;
                const GGS_bitNumberExpression  temp_26940 = var_cas_bitNumber ;
                if (temp_26940.isBuilt ()) {
                  temp_26940 (HERE)->method_display (inLexique, var_cas_s COMMA_SOURCE_FILE_AT_LINE (958)) ;
                }
                var_cas_s.appendCString (" :") ;
                var_cas_conditionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("In Piccolo 1.2.0 and later, this construction is deprecated; use '")).operator_concat (var_cas_s)).operator_concat (GGS_string ("' instead")) COMMA_SOURCE_FILE_AT_LINE (960)) ;
              }else if (cond_27108.isBuiltAndFalse ()) {
                const GGS_bool cond_27573 = (var_cas_condition).operator_isEqual (GGS_string ("NZ")) ;
                if (cond_27573.isBuiltAndTrue ()) {
                  var_cas_skipIfSet = GGS_bool (false) ;
                  GGS_string var_cas_s = (GGS_string ("if ")).operator_concat (var_cas_registerName.reader_mRegisterName (inLexique COMMA_SOURCE_FILE_AT_LINE (963))) ;
                  const GGS_bool cond_27361 = (var_cas_registerName.reader_mOffset (inLexique COMMA_SOURCE_FILE_AT_LINE (964)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (964))).operator_strictSup (GGS_uint (0U)) ;
                  if (cond_27361.isBuiltAndTrue ()) {
                    var_cas_s.appendCString (" [") ;
                    var_cas_s.dotAssign_operation (var_cas_registerName.reader_mOffset (inLexique COMMA_SOURCE_FILE_AT_LINE (965)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (965)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (965))) ;
                    var_cas_s.appendCString ("]") ;
                  }
                  var_cas_s.appendCString (".") ;
                  const GGS_bitNumberExpression  temp_27406 = var_cas_bitNumber ;
                  if (temp_27406.isBuilt ()) {
                    temp_27406 (HERE)->method_display (inLexique, var_cas_s COMMA_SOURCE_FILE_AT_LINE (967)) ;
                  }
                  var_cas_s.appendCString (" :") ;
                  var_cas_conditionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("In Piccolo 1.2.0 and later, this construction is deprecated; use '")).operator_concat (var_cas_s)).operator_concat (GGS_string ("' instead")) COMMA_SOURCE_FILE_AT_LINE (969)) ;
                }else if (cond_27573.isBuiltAndFalse ()) {
                  var_cas_conditionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("invalid '")).operator_concat (var_cas_condition)).operator_concat (GGS_string ("' condition; it should be 'z' or 'nz'")) COMMA_SOURCE_FILE_AT_LINE (972)) ;
                  var_cas_skipIfSet.drop () ;
                }
              }
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A_) COMMA_HERE) ;
      GGS_piccolo_instruction  var_cas_instruction ;
      nt_simple_instruction_ (inLexique, var_cas_instruction) ;
      var_cas_outInstruction = GGS_instruction_IF_BitTest ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_instruction, var_cas_skipIfSet, var_cas_registerName, var_cas_bitNumber COMMA_HERE) ;
      } break ;
    case 8 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_if) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_bool var_cas_increment ;
      switch (select_piccolo_syntax_38 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_decf) COMMA_HERE) ;
          var_cas_increment = GGS_bool (false) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_incf) COMMA_HERE) ;
          var_cas_increment = GGS_bool (true) ;
          } break ;
        default :
          break ;
      }
      GGS_registerExpression  var_cas_registerName ;
      nt_register_parsing_ (inLexique, var_cas_registerName) ;
      GGS_bool var_cas_w_isTarget ;
      switch (select_piccolo_syntax_39 (inLexique)) {
        case 1 : {
          var_cas_w_isTarget = GGS_bool (false) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          var_cas_w_isTarget = GGS_bool (true) ;
          } break ;
        default :
          break ;
      }
      GGS_bool var_cas_skipIfZero ;
      GGS_lstring  var_cas_conditionString ;
      inLexique.assignFromAttribute_tokenString (var_cas_conditionString) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      GGS_string var_cas_condition = var_cas_conditionString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1004)).reader_uppercaseString (inLexique COMMA_SOURCE_FILE_AT_LINE (1004)) ;
      const GGS_bool cond_28584 = (var_cas_condition).operator_isEqual (GGS_string ("Z")) ;
      if (cond_28584.isBuiltAndTrue ()) {
        var_cas_skipIfZero = GGS_bool (false) ;
      }else if (cond_28584.isBuiltAndFalse ()) {
        const GGS_bool cond_28643 = (var_cas_condition).operator_isEqual (GGS_string ("NZ")) ;
        if (cond_28643.isBuiltAndTrue ()) {
          var_cas_skipIfZero = GGS_bool (true) ;
        }else if (cond_28643.isBuiltAndFalse ()) {
          var_cas_conditionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("invalid '")).operator_concat (var_cas_condition)).operator_concat (GGS_string ("' condition; it should be 'z' or 'nz'")) COMMA_SOURCE_FILE_AT_LINE (1011)) ;
          var_cas_skipIfZero.drop () ;
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A_) COMMA_HERE) ;
      GGS_piccolo_instruction  var_cas_instruction ;
      nt_simple_instruction_ (inLexique, var_cas_instruction) ;
      var_cas_outInstruction = GGS_instruction_IF_IncDec ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_instruction, var_cas_increment, var_cas_skipIfZero, var_cas_registerName, var_cas_w_isTarget COMMA_HERE) ;
      } break ;
    case 9 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_if) COMMA_HERE) ;
      nt_structured_if_instruction_ (inLexique, var_cas_outInstruction, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
      } break ;
    case 10 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_do) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_instructionList  var_cas_repeatedInstructionList ;
      nt_instruction_list_ (inLexique, var_cas_repeatedInstructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
      GGS_location  var_cas_endOfRepeatedInstructionList = GGS_location (inLexique) ;
      GGS_partList  var_cas_whilePartList = GGS_partList ::constructor_emptyList () ;
      { bool syntaxRepeat_40 = true ;
        while (syntaxRepeat_40) {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_while) COMMA_HERE) ;
            GGS_conditionExpression  var_cas_whileCondition ;
            nt_condition_expression_ (inLexique, var_cas_whileCondition) ;
            GGS_instructionList  var_cas_instructionList ;
            nt_instruction_list_ (inLexique, var_cas_instructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
            var_cas_whilePartList.addAssign_operation (var_cas_whileCondition, var_cas_instructionList, GGS_location (inLexique)) ;
          switch (select_repeat_piccolo_syntax_40 (inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat_40 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_do_while ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_repeatedInstructionList, var_cas_endOfRepeatedInstructionList, var_cas_whilePartList COMMA_HERE) ;
      } break ;
    case 11 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_mnop) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_luint  var_cas_occurrenceFactor ;
      inLexique.assignFromAttribute_uint32value (var_cas_occurrenceFactor) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_MNOP ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_occurrenceFactor COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_structured_instruction_piccolo_syntax_791_29_parse (piccolo_lexique & inLexique) {
  switch (select_piccolo_syntax_29 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_banksel) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_nobank) COMMA_HERE) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_banksave) COMMA_HERE) ;
      nt_register_parsing_parse (inLexique) ;
      nt_instruction_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_computed) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5B_) COMMA_HERE) ;
      nt_immediate_expression_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5D_) COMMA_HERE) ;
      switch (select_piccolo_syntax_30 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_retlw) COMMA_HERE) ;
          { bool syntaxRepeat_31 = true ;
            while (syntaxRepeat_31) {
                nt_immediate_expression_parse (inLexique) ;
              switch (select_repeat_piccolo_syntax_31 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_31 = false ;
                  break ;
              }
            }
          }
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bra) COMMA_HERE) ;
          { bool syntaxRepeat_32 = true ;
            while (syntaxRepeat_32) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
              switch (select_repeat_piccolo_syntax_32 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_32 = false ;
                  break ;
              }
            }
          }
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_goto) COMMA_HERE) ;
          { bool syntaxRepeat_33 = true ;
            while (syntaxRepeat_33) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
              switch (select_repeat_piccolo_syntax_33 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_33 = false ;
                  break ;
              }
            }
          }
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_rcall) COMMA_HERE) ;
          { bool syntaxRepeat_34 = true ;
            while (syntaxRepeat_34) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
              switch (select_repeat_piccolo_syntax_34 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_34 = false ;
                  break ;
              }
            }
          }
          } break ;
        default :
          break ;
      }
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_forever) COMMA_HERE) ;
      nt_instruction_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_if) COMMA_HERE) ;
      nt_register_parsing_parse (inLexique) ;
      switch (select_piccolo_syntax_35 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__21__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3C__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3E__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A_) COMMA_HERE) ;
      nt_simple_instruction_parse (inLexique) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_if) COMMA_HERE) ;
      switch (select_piccolo_syntax_36 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__21_) COMMA_HERE) ;
          nt_register_parsing_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2E_) COMMA_HERE) ;
          nt_bit_number_parsing_parse (inLexique) ;
          } break ;
        case 2 : {
          nt_register_parsing_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2E_) COMMA_HERE) ;
          nt_bit_number_parsing_parse (inLexique) ;
          switch (select_piccolo_syntax_37 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A_) COMMA_HERE) ;
      nt_simple_instruction_parse (inLexique) ;
      } break ;
    case 8 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_if) COMMA_HERE) ;
      switch (select_piccolo_syntax_38 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_decf) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_incf) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      nt_register_parsing_parse (inLexique) ;
      switch (select_piccolo_syntax_39 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A_) COMMA_HERE) ;
      nt_simple_instruction_parse (inLexique) ;
      } break ;
    case 9 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_if) COMMA_HERE) ;
      nt_structured_if_instruction_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
      } break ;
    case 10 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_do) COMMA_HERE) ;
      nt_instruction_list_parse (inLexique) ;
      { bool syntaxRepeat_40 = true ;
        while (syntaxRepeat_40) {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_while) COMMA_HERE) ;
            nt_condition_expression_parse (inLexique) ;
            nt_instruction_list_parse (inLexique) ;
          switch (select_repeat_piccolo_syntax_40 (inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat_40 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
      } break ;
    case 11 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_mnop) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'structured_if_instruction'        *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_structured_if_instruction_piccolo_syntax_1072_32_ (piccolo_lexique & inLexique,
                                GGS_piccolo_instruction  &var_cas_outInstruction,
                                GGS_bool &var_cas_ioNeedsComputedGoto2,
                                GGS_bool &var_cas_ioNeedsComputedGoto4) {
  GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  GGS_conditionExpression  var_cas_structured_if_condition ;
  nt_condition_expression_ (inLexique, var_cas_structured_if_condition) ;
  GGS_instructionList  var_cas_thenInstructionList ;
  nt_instruction_list_ (inLexique, var_cas_thenInstructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
  GGS_instructionList  var_cas_elseInstructionList ;
  switch (select_piccolo_syntax_41 (inLexique)) {
    case 1 : {
      var_cas_elseInstructionList = GGS_instructionList ::constructor_emptyList () ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_elsif) COMMA_HERE) ;
      GGS_piccolo_instruction  var_cas_elsifPartInstruction ;
      nt_structured_if_instruction_ (inLexique, var_cas_elsifPartInstruction, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
      var_cas_elseInstructionList = GGS_instructionList ::constructor_emptyList () ;
      var_cas_elseInstructionList.addAssign_operation (var_cas_elsifPartInstruction) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_else) COMMA_HERE) ;
      nt_instruction_list_ (inLexique, var_cas_elseInstructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
      } break ;
    default :
      break ;
  }
  GGS_location  var_cas_endOfElsePartLocation = GGS_location (inLexique) ;
  var_cas_outInstruction = GGS_instruction_structured_if ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_structured_if_condition, var_cas_thenInstructionList, var_cas_elseInstructionList, var_cas_endOfElsePartLocation COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_structured_if_instruction_piccolo_syntax_1072_32_parse (piccolo_lexique & inLexique) {
  nt_condition_expression_parse (inLexique) ;
  nt_instruction_list_parse (inLexique) ;
  switch (select_piccolo_syntax_41 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_elsif) COMMA_HERE) ;
      nt_structured_if_instruction_parse (inLexique) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_else) COMMA_HERE) ;
      nt_instruction_list_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'simple_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_simple_instruction_piccolo_syntax_1119_25_ (piccolo_lexique & inLexique,
                                GGS_piccolo_instruction  &var_cas_outInstruction) {
  switch (select_piccolo_syntax_42 (inLexique)) {
    case 1 : {
      GGS_instruction_FDA_base_code var_cas_baseCode ;
      switch (select_piccolo_syntax_43 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_addwf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_ADDWF (inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_addwfc) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_ADDWFC (inLexique COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_andwf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_ANDWF (inLexique COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_comf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_COMF (inLexique COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_decf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_DECF (inLexique COMMA_HERE) ;
          } break ;
        case 6 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_incf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_INCF (inLexique COMMA_HERE) ;
          } break ;
        case 7 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_iorwf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_IORWF (inLexique COMMA_HERE) ;
          } break ;
        case 8 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_movf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_MOVF (inLexique COMMA_HERE) ;
          } break ;
        case 9 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_rlcf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_RLCF (inLexique COMMA_HERE) ;
          } break ;
        case 10 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_rlncf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_RLNCF (inLexique COMMA_HERE) ;
          } break ;
        case 11 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_rrcf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_RRCF (inLexique COMMA_HERE) ;
          } break ;
        case 12 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_rrncf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_RRNCF (inLexique COMMA_HERE) ;
          } break ;
        case 13 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_subfwb) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_SUBFWB (inLexique COMMA_HERE) ;
          } break ;
        case 14 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_subwf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_SUBWF (inLexique COMMA_HERE) ;
          } break ;
        case 15 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_subwfb) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_SUBWFB (inLexique COMMA_HERE) ;
          } break ;
        case 16 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_swapf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_SWAPF (inLexique COMMA_HERE) ;
          } break ;
        case 17 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_xorwf) COMMA_HERE) ;
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_XORWF (inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_registerExpression  var_cas_registerName ;
      nt_register_parsing_ (inLexique, var_cas_registerName) ;
      GGS_bool var_cas_W_isDestination ;
      nt_optional_w_as_dest_ (inLexique, var_cas_W_isDestination) ;
      var_cas_outInstruction = GGS_instruction_FDA ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_baseCode, var_cas_registerName, var_cas_W_isDestination COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_FA_instruction_base_code var_cas_FAinstruction ;
      switch (select_piccolo_syntax_44 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_clrf) COMMA_HERE) ;
          var_cas_FAinstruction = GGS_FA_instruction_base_code::constructor_CLRF (inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_movwf) COMMA_HERE) ;
          var_cas_FAinstruction = GGS_FA_instruction_base_code::constructor_MOVWF (inLexique COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_mulwf) COMMA_HERE) ;
          var_cas_FAinstruction = GGS_FA_instruction_base_code::constructor_MULWF (inLexique COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_negf) COMMA_HERE) ;
          var_cas_FAinstruction = GGS_FA_instruction_base_code::constructor_NEGF (inLexique COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_setf) COMMA_HERE) ;
          var_cas_FAinstruction = GGS_FA_instruction_base_code::constructor_SETF (inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_registerExpression  var_cas_registerName ;
      nt_register_parsing_ (inLexique, var_cas_registerName) ;
      var_cas_outInstruction = GGS_instruction_FA ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_FAinstruction, var_cas_registerName COMMA_HERE) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_movff) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_registerExpression  var_cas_sourceRegisterName ;
      nt_register_parsing_ (inLexique, var_cas_sourceRegisterName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
      GGS_registerExpression  var_cas_destinationRegisterName ;
      nt_register_parsing_ (inLexique, var_cas_destinationRegisterName) ;
      var_cas_outInstruction = GGS_instruction_MOVFF ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_sourceRegisterName, var_cas_destinationRegisterName COMMA_HERE) ;
      } break ;
    case 4 : {
      GGS_bit_oriented_op var_cas_bitOrientedOp ;
      switch (select_piccolo_syntax_45 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bcf) COMMA_HERE) ;
          var_cas_bitOrientedOp = GGS_bit_oriented_op::constructor_BCF (inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bsf) COMMA_HERE) ;
          var_cas_bitOrientedOp = GGS_bit_oriented_op::constructor_BSF (inLexique COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_btg) COMMA_HERE) ;
          var_cas_bitOrientedOp = GGS_bit_oriented_op::constructor_BTG (inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_registerExpression  var_cas_registerName ;
      nt_register_parsing_ (inLexique, var_cas_registerName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2E_) COMMA_HERE) ;
      GGS_bitNumberExpression  var_cas_bitNumber ;
      nt_bit_number_parsing_ (inLexique, var_cas_bitNumber) ;
      var_cas_outInstruction = GGS_instruction_FBA ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_bitOrientedOp, var_cas_registerName, var_cas_bitNumber COMMA_HERE) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_jsr) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_lstring  var_cas_targetLabelName ;
      inLexique.assignFromAttribute_tokenString (var_cas_targetLabelName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_JSR ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_targetLabelName, GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_HERE) COMMA_HERE) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_call) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_lstring  var_cas_targetLabelName ;
      inLexique.assignFromAttribute_tokenString (var_cas_targetLabelName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_JSR ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_targetLabelName, GGS_jumpInstructionKind::constructor_absolute (inLexique COMMA_HERE) COMMA_HERE) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_rcall) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_lstring  var_cas_targetLabelName ;
      inLexique.assignFromAttribute_tokenString (var_cas_targetLabelName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_JSR ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_targetLabelName, GGS_jumpInstructionKind::constructor_relative (inLexique COMMA_HERE) COMMA_HERE) ;
      } break ;
    case 8 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_jump) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_lstring  var_cas_targetLabelName ;
      inLexique.assignFromAttribute_tokenString (var_cas_targetLabelName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_JUMP ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_targetLabelName, GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_HERE) COMMA_HERE) ;
      } break ;
    case 9 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_goto) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_lstring  var_cas_targetLabelName ;
      inLexique.assignFromAttribute_tokenString (var_cas_targetLabelName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_JUMP ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_targetLabelName, GGS_jumpInstructionKind::constructor_absolute (inLexique COMMA_HERE) COMMA_HERE) ;
      } break ;
    case 10 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bra) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_lstring  var_cas_targetLabelName ;
      inLexique.assignFromAttribute_tokenString (var_cas_targetLabelName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_JUMP ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_targetLabelName, GGS_jumpInstructionKind::constructor_relative (inLexique COMMA_HERE) COMMA_HERE) ;
      } break ;
    case 11 : {
      GGS_conditional_branch var_cas_condition ;
      switch (select_piccolo_syntax_46 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bc) COMMA_HERE) ;
          var_cas_condition = GGS_conditional_branch::constructor_bc (inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bnc) COMMA_HERE) ;
          var_cas_condition = GGS_conditional_branch::constructor_bnc (inLexique COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bn) COMMA_HERE) ;
          var_cas_condition = GGS_conditional_branch::constructor_bn (inLexique COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bnn) COMMA_HERE) ;
          var_cas_condition = GGS_conditional_branch::constructor_bnn (inLexique COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bov) COMMA_HERE) ;
          var_cas_condition = GGS_conditional_branch::constructor_bov (inLexique COMMA_HERE) ;
          } break ;
        case 6 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bnov) COMMA_HERE) ;
          var_cas_condition = GGS_conditional_branch::constructor_bnov (inLexique COMMA_HERE) ;
          } break ;
        case 7 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bz) COMMA_HERE) ;
          var_cas_condition = GGS_conditional_branch::constructor_bz (inLexique COMMA_HERE) ;
          } break ;
        case 8 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bnz) COMMA_HERE) ;
          var_cas_condition = GGS_conditional_branch::constructor_bnz (inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_lstring  var_cas_targetLabelName ;
      inLexique.assignFromAttribute_tokenString (var_cas_targetLabelName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_JUMPCC ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_targetLabelName, var_cas_condition, GGS_bool (true) COMMA_HERE) ;
      } break ;
    case 12 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_jump) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_conditional_branch var_cas_conditional_branch ;
      GGS_lstring  var_cas_conditionString ;
      inLexique.assignFromAttribute_tokenString (var_cas_conditionString) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      GGS_string var_cas_condition = var_cas_conditionString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1331)).reader_uppercaseString (inLexique COMMA_SOURCE_FILE_AT_LINE (1331)) ;
      const GGS_bool cond_37709 = (var_cas_condition).operator_isEqual (GGS_string ("Z")) ;
      if (cond_37709.isBuiltAndTrue ()) {
        var_cas_conditional_branch = GGS_conditional_branch::constructor_bz (inLexique COMMA_HERE) ;
      }else if (cond_37709.isBuiltAndFalse ()) {
        const GGS_bool cond_37798 = (var_cas_condition).operator_isEqual (GGS_string ("NZ")) ;
        if (cond_37798.isBuiltAndTrue ()) {
          var_cas_conditional_branch = GGS_conditional_branch::constructor_bnz (inLexique COMMA_HERE) ;
        }else if (cond_37798.isBuiltAndFalse ()) {
          const GGS_bool cond_37887 = (var_cas_condition).operator_isEqual (GGS_string ("NN")) ;
          if (cond_37887.isBuiltAndTrue ()) {
            var_cas_conditional_branch = GGS_conditional_branch::constructor_bnn (inLexique COMMA_HERE) ;
          }else if (cond_37887.isBuiltAndFalse ()) {
            const GGS_bool cond_37974 = (var_cas_condition).operator_isEqual (GGS_string ("N")) ;
            if (cond_37974.isBuiltAndTrue ()) {
              var_cas_conditional_branch = GGS_conditional_branch::constructor_bn (inLexique COMMA_HERE) ;
            }else if (cond_37974.isBuiltAndFalse ()) {
              const GGS_bool cond_38061 = (var_cas_condition).operator_isEqual (GGS_string ("C")) ;
              if (cond_38061.isBuiltAndTrue ()) {
                var_cas_conditional_branch = GGS_conditional_branch::constructor_bc (inLexique COMMA_HERE) ;
              }else if (cond_38061.isBuiltAndFalse ()) {
                const GGS_bool cond_38150 = (var_cas_condition).operator_isEqual (GGS_string ("NC")) ;
                if (cond_38150.isBuiltAndTrue ()) {
                  var_cas_conditional_branch = GGS_conditional_branch::constructor_bnc (inLexique COMMA_HERE) ;
                }else if (cond_38150.isBuiltAndFalse ()) {
                  const GGS_bool cond_38239 = (var_cas_condition).operator_isEqual (GGS_string ("OV")) ;
                  if (cond_38239.isBuiltAndTrue ()) {
                    var_cas_conditional_branch = GGS_conditional_branch::constructor_bov (inLexique COMMA_HERE) ;
                  }else if (cond_38239.isBuiltAndFalse ()) {
                    const GGS_bool cond_38329 = (var_cas_condition).operator_isEqual (GGS_string ("NOV")) ;
                    if (cond_38329.isBuiltAndTrue ()) {
                      var_cas_conditional_branch = GGS_conditional_branch::constructor_bnov (inLexique COMMA_HERE) ;
                    }else if (cond_38329.isBuiltAndFalse ()) {
                      var_cas_conditionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("invalid '")).operator_concat (var_cas_conditionString)).operator_concat (GGS_string ("' condition; valid ones are: 'z', 'nz', 'n', 'nn', 'c', 'nc', 'ov' and 'nov'")) COMMA_SOURCE_FILE_AT_LINE (1353)) ;
                      var_cas_conditional_branch.drop () ;
                    }
                  }
                }
              }
            }
          }
        }
      }
      GGS_lstring  var_cas_targetLabelName ;
      inLexique.assignFromAttribute_tokenString (var_cas_targetLabelName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_JUMPCC ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_targetLabelName, var_cas_conditional_branch, GGS_bool (false) COMMA_HERE) ;
      } break ;
    case 13 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_clrwdt) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_CLRWDT ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 14 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_daw) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_DAW ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 15 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_nop) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_NOP ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 16 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_pop) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_POP ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 17 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_push) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_PUSH ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 18 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_reset) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_RESET ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 19 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_sleep) COMMA_HERE) ;
      var_cas_outInstruction = GGS_instruction_SLEEP ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 20 : {
      GGS_literal_instruction_opcode var_cas_literalInstruction ;
      switch (select_piccolo_syntax_47 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_addlw) COMMA_HERE) ;
          var_cas_literalInstruction = GGS_literal_instruction_opcode::constructor_ADDLW (inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_andlw) COMMA_HERE) ;
          var_cas_literalInstruction = GGS_literal_instruction_opcode::constructor_ANDLW (inLexique COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_iorlw) COMMA_HERE) ;
          var_cas_literalInstruction = GGS_literal_instruction_opcode::constructor_IORLW (inLexique COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_movlw) COMMA_HERE) ;
          var_cas_literalInstruction = GGS_literal_instruction_opcode::constructor_MOVLW (inLexique COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_mullw) COMMA_HERE) ;
          var_cas_literalInstruction = GGS_literal_instruction_opcode::constructor_MULLW (inLexique COMMA_HERE) ;
          } break ;
        case 6 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_sublw) COMMA_HERE) ;
          var_cas_literalInstruction = GGS_literal_instruction_opcode::constructor_SUBLW (inLexique COMMA_HERE) ;
          } break ;
        case 7 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_xorlw) COMMA_HERE) ;
          var_cas_literalInstruction = GGS_literal_instruction_opcode::constructor_XORLW (inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_immediatExpression  var_cas_expression ;
      nt_immediate_expression_ (inLexique, var_cas_expression) ;
      var_cas_outInstruction = GGS_instruction_literalOperation ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_literalInstruction, var_cas_expression COMMA_HERE) ;
      } break ;
    case 21 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_lfsr) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_luint  var_cas_FSRindex ;
      inLexique.assignFromAttribute_uint32value (var_cas_FSRindex) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
      GGS_immediatExpression  var_cas_expression ;
      nt_immediate_expression_ (inLexique, var_cas_expression) ;
      var_cas_outInstruction = GGS_instruction_LFSR ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_FSRindex, var_cas_expression COMMA_HERE) ;
      } break ;
    case 22 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_tblrd) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_tableAccessOption var_cas_accessOption ;
      switch (select_piccolo_syntax_48 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2A_) COMMA_HERE) ;
          var_cas_accessOption = GGS_tableAccessOption::constructor_simpleAccess (inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2A__2B_) COMMA_HERE) ;
          var_cas_accessOption = GGS_tableAccessOption::constructor_postIncrement (inLexique COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2A__2D_) COMMA_HERE) ;
          var_cas_accessOption = GGS_tableAccessOption::constructor_postDecrement (inLexique COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2B__2A_) COMMA_HERE) ;
          var_cas_accessOption = GGS_tableAccessOption::constructor_preIncrement (inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      var_cas_outInstruction = GGS_instruction_TBLRD ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_accessOption COMMA_HERE) ;
      } break ;
    case 23 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_tblwt) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_tableAccessOption var_cas_accessOption ;
      switch (select_piccolo_syntax_49 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2A_) COMMA_HERE) ;
          var_cas_accessOption = GGS_tableAccessOption::constructor_simpleAccess (inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2A__2B_) COMMA_HERE) ;
          var_cas_accessOption = GGS_tableAccessOption::constructor_postIncrement (inLexique COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2A__2D_) COMMA_HERE) ;
          var_cas_accessOption = GGS_tableAccessOption::constructor_postDecrement (inLexique COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2B__2A_) COMMA_HERE) ;
          var_cas_accessOption = GGS_tableAccessOption::constructor_preIncrement (inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      var_cas_outInstruction = GGS_instruction_TBLWT ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_accessOption COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_simple_instruction_piccolo_syntax_1119_25_parse (piccolo_lexique & inLexique) {
  switch (select_piccolo_syntax_42 (inLexique)) {
    case 1 : {
      switch (select_piccolo_syntax_43 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_addwf) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_addwfc) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_andwf) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_comf) COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_decf) COMMA_HERE) ;
          } break ;
        case 6 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_incf) COMMA_HERE) ;
          } break ;
        case 7 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_iorwf) COMMA_HERE) ;
          } break ;
        case 8 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_movf) COMMA_HERE) ;
          } break ;
        case 9 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_rlcf) COMMA_HERE) ;
          } break ;
        case 10 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_rlncf) COMMA_HERE) ;
          } break ;
        case 11 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_rrcf) COMMA_HERE) ;
          } break ;
        case 12 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_rrncf) COMMA_HERE) ;
          } break ;
        case 13 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_subfwb) COMMA_HERE) ;
          } break ;
        case 14 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_subwf) COMMA_HERE) ;
          } break ;
        case 15 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_subwfb) COMMA_HERE) ;
          } break ;
        case 16 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_swapf) COMMA_HERE) ;
          } break ;
        case 17 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_xorwf) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      nt_register_parsing_parse (inLexique) ;
      nt_optional_w_as_dest_parse (inLexique) ;
      } break ;
    case 2 : {
      switch (select_piccolo_syntax_44 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_clrf) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_movwf) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_mulwf) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_negf) COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_setf) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      nt_register_parsing_parse (inLexique) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_movff) COMMA_HERE) ;
      nt_register_parsing_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
      nt_register_parsing_parse (inLexique) ;
      } break ;
    case 4 : {
      switch (select_piccolo_syntax_45 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bcf) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bsf) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_btg) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      nt_register_parsing_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2E_) COMMA_HERE) ;
      nt_bit_number_parsing_parse (inLexique) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_jsr) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_call) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_rcall) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      } break ;
    case 8 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_jump) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      } break ;
    case 9 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_goto) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      } break ;
    case 10 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bra) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      } break ;
    case 11 : {
      switch (select_piccolo_syntax_46 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bc) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bnc) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bn) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bnn) COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bov) COMMA_HERE) ;
          } break ;
        case 6 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bnov) COMMA_HERE) ;
          } break ;
        case 7 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bz) COMMA_HERE) ;
          } break ;
        case 8 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bnz) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      } break ;
    case 12 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_jump) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      } break ;
    case 13 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_clrwdt) COMMA_HERE) ;
      } break ;
    case 14 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_daw) COMMA_HERE) ;
      } break ;
    case 15 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_nop) COMMA_HERE) ;
      } break ;
    case 16 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_pop) COMMA_HERE) ;
      } break ;
    case 17 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_push) COMMA_HERE) ;
      } break ;
    case 18 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_reset) COMMA_HERE) ;
      } break ;
    case 19 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_sleep) COMMA_HERE) ;
      } break ;
    case 20 : {
      switch (select_piccolo_syntax_47 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_addlw) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_andlw) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_iorlw) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_movlw) COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_mullw) COMMA_HERE) ;
          } break ;
        case 6 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_sublw) COMMA_HERE) ;
          } break ;
        case 7 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_xorlw) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      nt_immediate_expression_parse (inLexique) ;
      } break ;
    case 21 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_lfsr) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
      nt_immediate_expression_parse (inLexique) ;
      } break ;
    case 22 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_tblrd) COMMA_HERE) ;
      switch (select_piccolo_syntax_48 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2A_) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2A__2B_) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2A__2D_) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2B__2A_) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 23 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_tblwt) COMMA_HERE) ;
      switch (select_piccolo_syntax_49 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2A_) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2A__2B_) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2A__2D_) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2B__2A_) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'immediate_expression'          *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_immediate_expression_piccolo_syntax_1456_27_ (piccolo_lexique & inLexique,
                                GGS_immediatExpression  &var_cas_outExpression) {
  nt_immediate_bitwise_term_ (inLexique, var_cas_outExpression) ;
  { bool syntaxRepeat_50 = true ;
    while (syntaxRepeat_50) {
      switch (select_repeat_piccolo_syntax_50 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7C_) COMMA_HERE) ;
          GGS_immediatExpression  var_cas_rightExpression ;
          nt_immediate_bitwise_term_ (inLexique, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_immediatOr ::constructor_new (inLexique, var_cas_outExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5E_) COMMA_HERE) ;
          GGS_immediatExpression  var_cas_rightExpression ;
          nt_immediate_bitwise_term_ (inLexique, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_immediatXor ::constructor_new (inLexique, var_cas_outExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_50 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_immediate_expression_piccolo_syntax_1456_27_parse (piccolo_lexique & inLexique) {
  nt_immediate_bitwise_term_parse (inLexique) ;
  { bool syntaxRepeat_50 = true ;
    while (syntaxRepeat_50) {
      switch (select_repeat_piccolo_syntax_50 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7C_) COMMA_HERE) ;
          nt_immediate_bitwise_term_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5E_) COMMA_HERE) ;
          nt_immediate_bitwise_term_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_50 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'immediate_bitwise_term'         *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_immediate_bitwise_term_piccolo_syntax_1474_30_ (piccolo_lexique & inLexique,
                                GGS_immediatExpression  &var_cas_outExpression) {
  nt_immediate_bitwise_factor_ (inLexique, var_cas_outExpression) ;
  { bool syntaxRepeat_51 = true ;
    while (syntaxRepeat_51) {
      switch (select_repeat_piccolo_syntax_51 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__26_) COMMA_HERE) ;
          GGS_immediatExpression  var_cas_rightExpression ;
          nt_immediate_bitwise_factor_ (inLexique, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_immediatAnd ::constructor_new (inLexique, var_cas_outExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_51 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_immediate_bitwise_term_piccolo_syntax_1474_30_parse (piccolo_lexique & inLexique) {
  nt_immediate_bitwise_factor_parse (inLexique) ;
  { bool syntaxRepeat_51 = true ;
    while (syntaxRepeat_51) {
      switch (select_repeat_piccolo_syntax_51 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__26_) COMMA_HERE) ;
          nt_immediate_bitwise_factor_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_51 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'immediate_bitwise_factor'        *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_immediate_bitwise_factor_piccolo_syntax_1487_31_ (piccolo_lexique & inLexique,
                                GGS_immediatExpression  &var_cas_outExpression) {
  nt_immediate_term_ (inLexique, var_cas_outExpression) ;
  switch (select_piccolo_syntax_52 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3D__3D_) COMMA_HERE) ;
      GGS_immediatExpression  var_cas_rightExpression ;
      nt_immediate_term_ (inLexique, var_cas_rightExpression) ;
      var_cas_outExpression = GGS_immediatEqualTest ::constructor_new (inLexique, var_cas_outExpression, var_cas_rightExpression COMMA_HERE) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__21__3D_) COMMA_HERE) ;
      GGS_immediatExpression  var_cas_rightExpression ;
      nt_immediate_term_ (inLexique, var_cas_rightExpression) ;
      var_cas_outExpression = GGS_immediatNotEqualTest ::constructor_new (inLexique, var_cas_outExpression, var_cas_rightExpression COMMA_HERE) ;
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3E__3D_) COMMA_HERE) ;
      GGS_immediatExpression  var_cas_rightExpression ;
      nt_immediate_term_ (inLexique, var_cas_rightExpression) ;
      var_cas_outExpression = GGS_immediatGreaterOrEqualTest ::constructor_new (inLexique, var_cas_outExpression, var_cas_rightExpression COMMA_HERE) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3C__3D_) COMMA_HERE) ;
      GGS_immediatExpression  var_cas_rightExpression ;
      nt_immediate_term_ (inLexique, var_cas_rightExpression) ;
      var_cas_outExpression = GGS_immediatLowerOrEqualTest ::constructor_new (inLexique, var_cas_outExpression, var_cas_rightExpression COMMA_HERE) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3E_) COMMA_HERE) ;
      GGS_immediatExpression  var_cas_rightExpression ;
      nt_immediate_term_ (inLexique, var_cas_rightExpression) ;
      var_cas_outExpression = GGS_immediatGreaterTest ::constructor_new (inLexique, var_cas_outExpression, var_cas_rightExpression COMMA_HERE) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3C_) COMMA_HERE) ;
      GGS_immediatExpression  var_cas_rightExpression ;
      nt_immediate_term_ (inLexique, var_cas_rightExpression) ;
      var_cas_outExpression = GGS_immediatLowerTest ::constructor_new (inLexique, var_cas_outExpression, var_cas_rightExpression COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_immediate_bitwise_factor_piccolo_syntax_1487_31_parse (piccolo_lexique & inLexique) {
  nt_immediate_term_parse (inLexique) ;
  switch (select_piccolo_syntax_52 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3D__3D_) COMMA_HERE) ;
      nt_immediate_term_parse (inLexique) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__21__3D_) COMMA_HERE) ;
      nt_immediate_term_parse (inLexique) ;
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3E__3D_) COMMA_HERE) ;
      nt_immediate_term_parse (inLexique) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3C__3D_) COMMA_HERE) ;
      nt_immediate_term_parse (inLexique) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3E_) COMMA_HERE) ;
      nt_immediate_term_parse (inLexique) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3C_) COMMA_HERE) ;
      nt_immediate_term_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'immediate_term'             *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_immediate_term_piccolo_syntax_1525_21_ (piccolo_lexique & inLexique,
                                GGS_immediatExpression  &var_cas_outExpression) {
  nt_immediate_factor_ (inLexique, var_cas_outExpression) ;
  { bool syntaxRepeat_53 = true ;
    while (syntaxRepeat_53) {
      switch (select_repeat_piccolo_syntax_53 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2B_) COMMA_HERE) ;
          GGS_immediatExpression  var_cas_rightExpression ;
          nt_immediate_factor_ (inLexique, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_immediatAdd ::constructor_new (inLexique, var_cas_outExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2D_) COMMA_HERE) ;
          GGS_immediatExpression  var_cas_rightExpression ;
          nt_immediate_factor_ (inLexique, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_immediatSub ::constructor_new (inLexique, var_cas_outExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3C__3C_) COMMA_HERE) ;
          GGS_immediatExpression  var_cas_rightExpression ;
          nt_immediate_factor_ (inLexique, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_immediatLeftShift ::constructor_new (inLexique, var_cas_outExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3E__3E_) COMMA_HERE) ;
          GGS_immediatExpression  var_cas_rightExpression ;
          nt_immediate_factor_ (inLexique, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_immediatRightShift ::constructor_new (inLexique, var_cas_outExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_53 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_immediate_term_piccolo_syntax_1525_21_parse (piccolo_lexique & inLexique) {
  nt_immediate_factor_parse (inLexique) ;
  { bool syntaxRepeat_53 = true ;
    while (syntaxRepeat_53) {
      switch (select_repeat_piccolo_syntax_53 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2B_) COMMA_HERE) ;
          nt_immediate_factor_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2D_) COMMA_HERE) ;
          nt_immediate_factor_parse (inLexique) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3C__3C_) COMMA_HERE) ;
          nt_immediate_factor_parse (inLexique) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3E__3E_) COMMA_HERE) ;
          nt_immediate_factor_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_53 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'immediate_factor'            *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_immediate_factor_piccolo_syntax_1553_23_ (piccolo_lexique & inLexique,
                                GGS_immediatExpression  &var_cas_outExpression) {
  nt_immediate_primary_ (inLexique, var_cas_outExpression) ;
  { bool syntaxRepeat_54 = true ;
    while (syntaxRepeat_54) {
      switch (select_repeat_piccolo_syntax_54 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2A_) COMMA_HERE) ;
          GGS_immediatExpression  var_cas_rightExpression ;
          nt_immediate_primary_ (inLexique, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_immediatMul ::constructor_new (inLexique, var_cas_outExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__25_) COMMA_HERE) ;
          GGS_immediatExpression  var_cas_rightExpression ;
          nt_immediate_primary_ (inLexique, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_immediatMod ::constructor_new (inLexique, var_cas_outExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2F_) COMMA_HERE) ;
          GGS_immediatExpression  var_cas_rightExpression ;
          nt_immediate_primary_ (inLexique, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_immediatDiv ::constructor_new (inLexique, var_cas_outExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_54 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_immediate_factor_piccolo_syntax_1553_23_parse (piccolo_lexique & inLexique) {
  nt_immediate_primary_parse (inLexique) ;
  { bool syntaxRepeat_54 = true ;
    while (syntaxRepeat_54) {
      switch (select_repeat_piccolo_syntax_54 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2A_) COMMA_HERE) ;
          nt_immediate_primary_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__25_) COMMA_HERE) ;
          nt_immediate_primary_parse (inLexique) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2F_) COMMA_HERE) ;
          nt_immediate_primary_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_54 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'immediate_primary'            *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_immediate_primary_piccolo_syntax_1577_24_ (piccolo_lexique & inLexique,
                                GGS_immediatExpression  &var_cas_outExpression) {
  switch (select_piccolo_syntax_55 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2D_) COMMA_HERE) ;
      GGS_immediatExpression  var_cas_expression ;
      nt_immediate_primary_ (inLexique, var_cas_expression) ;
      var_cas_outExpression = GGS_immediatNegate ::constructor_new (inLexique, var_cas_expression COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7E_) COMMA_HERE) ;
      GGS_immediatExpression  var_cas_expression ;
      nt_immediate_primary_ (inLexique, var_cas_expression) ;
      var_cas_outExpression = GGS_immediatComplement ::constructor_new (inLexique, var_cas_expression COMMA_HERE) ;
      } break ;
    case 3 : {
      GGS_luint  var_cas_constant ;
      inLexique.assignFromAttribute_uint32value (var_cas_constant) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      var_cas_outExpression = GGS_immediatInteger ::constructor_new (inLexique, var_cas_constant COMMA_HERE) ;
      } break ;
    case 4 : {
      GGS_lchar  var_cas_literalCharValue ;
      inLexique.assignFromAttribute_charValue (var_cas_literalCharValue) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_literal_5F_char) COMMA_HERE) ;
      var_cas_outExpression = GGS_immediatInteger ::constructor_new (inLexique, GGS_luint ::constructor_new (inLexique, var_cas_literalCharValue.reader_char (inLexique COMMA_SOURCE_FILE_AT_LINE (1593)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1593)), var_cas_literalCharValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1593)) COMMA_HERE) COMMA_HERE) ;
      } break ;
    case 5 : {
      GGS_lstring  var_cas_registerName ;
      inLexique.assignFromAttribute_tokenString (var_cas_registerName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      GGS_luint  var_cas_offset ;
      switch (select_piccolo_syntax_56 (inLexique)) {
        case 1 : {
          var_cas_offset = GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5B_) COMMA_HERE) ;
          inLexique.assignFromAttribute_uint32value (var_cas_offset) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5D_) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      GGS_registerExpression  var_cas_registerExpression = GGS_registerExpression ::constructor_new (inLexique, var_cas_registerName, var_cas_offset COMMA_HERE) ;
      var_cas_outExpression = GGS_immediatRegister ::constructor_new (inLexique, var_cas_registerExpression COMMA_HERE) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__28_) COMMA_HERE) ;
      nt_immediate_expression_ (inLexique, var_cas_outExpression) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__29_) COMMA_HERE) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__40_) COMMA_HERE) ;
      GGS_lstring  var_cas_registerName ;
      inLexique.assignFromAttribute_tokenString (var_cas_registerName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__28_) COMMA_HERE) ;
      GGS_immediatSliceExpressionList  var_cas_sliceExpressionList = GGS_immediatSliceExpressionList ::constructor_emptyList () ;
      { bool syntaxRepeat_57 = true ;
        while (syntaxRepeat_57) {
            GGS_lstring  var_cas_sliceName ;
            inLexique.assignFromAttribute_tokenString (var_cas_sliceName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A_) COMMA_HERE) ;
            GGS_immediatExpression  var_cas_expression ;
            nt_immediate_expression_ (inLexique, var_cas_expression) ;
            var_cas_sliceExpressionList.addAssign_operation (var_cas_sliceName, var_cas_expression) ;
          switch (select_repeat_piccolo_syntax_57 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_57 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__29_) COMMA_HERE) ;
      var_cas_outExpression = GGS_immediatSlice ::constructor_new (inLexique, var_cas_registerName, var_cas_sliceExpressionList COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void piccolo_syntax::
pr_immediate_primary_piccolo_syntax_1577_24_parse (piccolo_lexique & inLexique) {
  switch (select_piccolo_syntax_55 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2D_) COMMA_HERE) ;
      nt_immediate_primary_parse (inLexique) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7E_) COMMA_HERE) ;
      nt_immediate_primary_parse (inLexique) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_literal_5F_char) COMMA_HERE) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      switch (select_piccolo_syntax_56 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5B_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__5D_) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__28_) COMMA_HERE) ;
      nt_immediate_expression_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__29_) COMMA_HERE) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__40_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__28_) COMMA_HERE) ;
      { bool syntaxRepeat_57 = true ;
        while (syntaxRepeat_57) {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A_) COMMA_HERE) ;
            nt_immediate_expression_parse (inLexique) ;
          switch (select_repeat_piccolo_syntax_57 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_57 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__29_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

