//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'piccolo_syntax.h'                           *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      july 23th, 2008, at 21h13'35"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef piccolo_syntax_DEFINED
#define piccolo_syntax_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_binaryset.h"
#include "galgas/GGS_filewrapper.h"
#include "galgas/predefined_types.h"
#include "galgas/AC_galgas_class.h"
#include "galgas/AC_galgas_domain.h"
#include "galgas/AC_galgas_mapindex.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_listmap.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "piccolo_lexique.h"

// Include imported semantics
#include "piccolo_metamodel.h"
#include "piccolo_options.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*


//---------------------------------------------------------------------------*
//                                                                           *
//                 Parser class piccolo_syntax declaration                   *
//                                                                           *
//---------------------------------------------------------------------------*

class piccolo_syntax {
  public : virtual ~piccolo_syntax (void) {}

  protected : virtual void nt_configuration_definition_ (piccolo_lexique &) = 0 ;

  protected : virtual void nt_ram_definition_ (piccolo_lexique &,
                                GGS_ramDefinitionList  &) = 0 ;

  protected : virtual void nt_interrupt_definition_ (piccolo_lexique &,
                                GGS_interruptDefinitionList  &,
                                GGS_bool &,
                                GGS_bool &) = 0 ;

  protected : virtual void nt_routine_definition_ (piccolo_lexique &,
                                GGS_routineDefinitionList  &,
                                GGS_bool &,
                                GGS_bool &) = 0 ;

  protected : virtual void nt_simple_instruction_ (piccolo_lexique &,
                                GGS_instruction  &) = 0 ;

  protected : virtual void nt_structured_instruction_ (piccolo_lexique &,
                                GGS_instruction  &,
                                GGS_bool &,
                                GGS_bool &) = 0 ;

  protected : virtual void nt_instruction_list_ (piccolo_lexique &,
                                GGS_instructionList  &,
                                GGS_bool &,
                                GGS_bool &) = 0 ;

  protected : virtual void nt_start_symbol_ (piccolo_lexique &,
                                GGS_piccoloModel &) = 0 ;

  protected : virtual void nt_register_parsing_ (piccolo_lexique &,
                                GGS_registerExpression  &) = 0 ;

  protected : virtual void nt_optional_w_as_dest_ (piccolo_lexique &,
                                GGS_bool &) = 0 ;

  protected : virtual void nt_bit_number_parsing_ (piccolo_lexique &,
                                GGS_bitNumberExpression  &) = 0 ;

  protected : virtual void nt_literal_value_parsing_ (piccolo_lexique &,
                                GGS_luint  &) = 0 ;

  protected : virtual void nt_condition_ (piccolo_lexique &,
                                GGS_structured_if_condition  &,
                                const GGS_bool ) = 0 ;

  protected : void pr_start_symbol_piccolo_syntax_56_4_ (piccolo_lexique &,
                                GGS_piccoloModel &) ;

  protected : virtual sint16 select_repeat_piccolo_syntax_0 (piccolo_lexique &) = 0 ;

  protected : void pr_configuration_definition_piccolo_syntax_100_4_ (piccolo_lexique &) ;

  protected : void pr_ram_definition_piccolo_syntax_108_4_ (piccolo_lexique &,
                                GGS_ramDefinitionList  &) ;

  protected : virtual sint16 select_repeat_piccolo_syntax_1 (piccolo_lexique &) = 0 ;

  protected : virtual sint16 select_piccolo_syntax_2 (piccolo_lexique &) = 0 ;

  protected : void pr_instruction_list_piccolo_syntax_135_4_ (piccolo_lexique &,
                                GGS_instructionList  &,
                                GGS_bool &,
                                GGS_bool &) ;

  protected : virtual sint16 select_repeat_piccolo_syntax_3 (piccolo_lexique &) = 0 ;

  protected : void pr_interrupt_definition_piccolo_syntax_159_4_ (piccolo_lexique &,
                                GGS_interruptDefinitionList  &,
                                GGS_bool &,
                                GGS_bool &) ;

  protected : void pr_routine_definition_piccolo_syntax_179_4_ (piccolo_lexique &,
                                GGS_routineDefinitionList  &,
                                GGS_bool &,
                                GGS_bool &) ;

  protected : virtual sint16 select_piccolo_syntax_4 (piccolo_lexique &) = 0 ;

  protected : virtual sint16 select_piccolo_syntax_5 (piccolo_lexique &) = 0 ;

  protected : void pr_register_parsing_piccolo_syntax_213_4_ (piccolo_lexique &,
                                GGS_registerExpression  &) ;

  protected : virtual sint16 select_piccolo_syntax_6 (piccolo_lexique &) = 0 ;

  protected : void pr_bit_number_parsing_piccolo_syntax_231_4_ (piccolo_lexique &,
                                GGS_bitNumberExpression  &) ;

  protected : virtual sint16 select_piccolo_syntax_7 (piccolo_lexique &) = 0 ;

  protected : void pr_bit_number_parsing_piccolo_syntax_246_4_ (piccolo_lexique &,
                                GGS_bitNumberExpression  &) ;

  protected : void pr_literal_value_parsing_piccolo_syntax_253_4_ (piccolo_lexique &,
                                GGS_luint  &) ;

  protected : void pr_literal_value_parsing_piccolo_syntax_259_4_ (piccolo_lexique &,
                                GGS_luint  &) ;

  protected : void pr_optional_w_as_dest_piccolo_syntax_266_4_ (piccolo_lexique &,
                                GGS_bool &) ;

  protected : virtual sint16 select_piccolo_syntax_8 (piccolo_lexique &) = 0 ;

  protected : void pr_condition_piccolo_syntax_278_4_ (piccolo_lexique &,
                                GGS_structured_if_condition  &,
                                const GGS_bool ) ;

  protected : virtual sint16 select_piccolo_syntax_9 (piccolo_lexique &) = 0 ;

  protected : void pr_structured_instruction_piccolo_syntax_344_4_ (piccolo_lexique &,
                                GGS_instruction  &,
                                GGS_bool &,
                                GGS_bool &) ;

  protected : virtual sint16 select_piccolo_syntax_10 (piccolo_lexique &) = 0 ;

  protected : virtual sint16 select_piccolo_syntax_11 (piccolo_lexique &) = 0 ;

  protected : virtual sint16 select_piccolo_syntax_12 (piccolo_lexique &) = 0 ;

  protected : virtual sint16 select_piccolo_syntax_13 (piccolo_lexique &) = 0 ;

  protected : virtual sint16 select_piccolo_syntax_14 (piccolo_lexique &) = 0 ;

  protected : virtual sint16 select_repeat_piccolo_syntax_15 (piccolo_lexique &) = 0 ;

  protected : virtual sint16 select_piccolo_syntax_16 (piccolo_lexique &) = 0 ;

  protected : virtual sint16 select_repeat_piccolo_syntax_17 (piccolo_lexique &) = 0 ;

  protected : virtual sint16 select_piccolo_syntax_18 (piccolo_lexique &) = 0 ;

  protected : virtual sint16 select_repeat_piccolo_syntax_19 (piccolo_lexique &) = 0 ;

  protected : virtual sint16 select_piccolo_syntax_20 (piccolo_lexique &) = 0 ;

  protected : void pr_simple_instruction_piccolo_syntax_571_4_ (piccolo_lexique &,
                                GGS_instruction  &) ;

  protected : virtual sint16 select_piccolo_syntax_21 (piccolo_lexique &) = 0 ;

  protected : virtual sint16 select_piccolo_syntax_22 (piccolo_lexique &) = 0 ;

  protected : virtual sint16 select_piccolo_syntax_23 (piccolo_lexique &) = 0 ;

  protected : virtual sint16 select_piccolo_syntax_24 (piccolo_lexique &) = 0 ;

  protected : virtual sint16 select_piccolo_syntax_25 (piccolo_lexique &) = 0 ;

  protected : virtual sint16 select_piccolo_syntax_26 (piccolo_lexique &) = 0 ;

  protected : virtual sint16 select_piccolo_syntax_27 (piccolo_lexique &) = 0 ;

  protected : virtual sint16 select_piccolo_syntax_28 (piccolo_lexique &) = 0 ;

} ;

//---------------------------------------------------------------------------*

#endif
