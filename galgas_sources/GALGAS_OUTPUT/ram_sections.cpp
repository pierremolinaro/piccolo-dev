//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              File 'ram_sections.cpp'                                                *
//                                             Generated by version 2.7.0                                              *
//                                           august 8th, 2014, at 20h3'55"                                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//---------------------------------------------------------------------------------------------------------------------*

#include "piccolo_options.h"
#include "ram_sections.h"


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                           Routine 'analyze_ram_sections'                                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_analyze_5F_ram_5F_sections (const GALGAS_string constinArgument_inListingTitle,
                                         const GALGAS_ramDefinitionList constinArgument_inRamDefinitionList,
                                         GALGAS_ramBankTable & ioArgument_ioRamBankTable,
                                         const GALGAS_registerTable constinArgument_inSpecialRegisterTable,
                                         GALGAS_string & ioArgument_ioListFileContents,
                                         GALGAS_registerTable & ioArgument_ioAllRegisters,
                                         GALGAS_declaredByteMap & outArgument_outDeclaredByteMap,
                                         C_Compiler * inCompiler
                                         COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outDeclaredByteMap.drop () ; // Release 'out' argument
  outArgument_outDeclaredByteMap = GALGAS_declaredByteMap::constructor_emptyMap (SOURCE_FILE ("ram_sections.gSemantics", 63)) ;
  cEnumerator_ramDefinitionList enumerator_2685 (constinArgument_inRamDefinitionList, kEnumeration_up) ;
  while (enumerator_2685.hasCurrentObject ()) {
    cEnumerator_declarationInRamList enumerator_2713 (enumerator_2685.current_mDeclaration (HERE), kEnumeration_up) ;
    while (enumerator_2713.hasCurrentObject ()) {
      callCategoryMethod_handleDeclaration ((const cPtr_declarationInRam *) enumerator_2713.current_mDeclarationInRAM (HERE).ptr (), ioArgument_ioRamBankTable, ioArgument_ioAllRegisters, enumerator_2685.current_mBankName (HERE), outArgument_outDeclaredByteMap, inCompiler COMMA_SOURCE_FILE ("ram_sections.gSemantics", 66)) ;
      enumerator_2713.gotoNextObject () ;
    }
    enumerator_2685.gotoNextObject () ;
  }
  const enumGalgasBool test_0 = GALGAS_bool (gOption_piccolo_5F_options_ouputListingFile.reader_value ()).boolEnum () ;
  if (kBoolTrue == test_0) {
    ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string::makeEmptyString ().reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 79U), GALGAS_char (TO_UNICODE (42)) COMMA_SOURCE_FILE ("ram_sections.gSemantics", 70)).operator_concat (GALGAS_string ("\n")  COMMA_SOURCE_FILE ("ram_sections.gSemantics", 70))  COMMA_SOURCE_FILE ("ram_sections.gSemantics", 70)) ;
    ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string ("*").operator_concat (constinArgument_inListingTitle.reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 77U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("ram_sections.gSemantics", 71))  COMMA_SOURCE_FILE ("ram_sections.gSemantics", 71)).operator_concat (GALGAS_string ("*\n")  COMMA_SOURCE_FILE ("ram_sections.gSemantics", 71))  COMMA_SOURCE_FILE ("ram_sections.gSemantics", 71)) ;
    ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string::makeEmptyString ().reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 79U), GALGAS_char (TO_UNICODE (42)) COMMA_SOURCE_FILE ("ram_sections.gSemantics", 72)).operator_concat (GALGAS_string ("\n"
      "\n")  COMMA_SOURCE_FILE ("ram_sections.gSemantics", 72))  COMMA_SOURCE_FILE ("ram_sections.gSemantics", 72)) ;
    ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string ("Variable").reader_stringByLeftPadding (GALGAS_uint ((uint32_t) 40U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("ram_sections.gSemantics", 73)).operator_concat (GALGAS_string (" Address\n")  COMMA_SOURCE_FILE ("ram_sections.gSemantics", 73))  COMMA_SOURCE_FILE ("ram_sections.gSemantics", 73)) ;
    cEnumerator_registerTable enumerator_3284 (ioArgument_ioAllRegisters, kEnumeration_up) ;
    while (enumerator_3284.hasCurrentObject ()) {
      const enumGalgasBool test_1 = constinArgument_inSpecialRegisterTable.reader_hasKey (enumerator_3284.current_lkey (HERE).reader_string (SOURCE_FILE ("ram_sections.gSemantics", 75)) COMMA_SOURCE_FILE ("ram_sections.gSemantics", 75)).operator_not (SOURCE_FILE ("ram_sections.gSemantics", 75)).boolEnum () ;
      if (kBoolTrue == test_1) {
        ioArgument_ioListFileContents.dotAssign_operation (enumerator_3284.current_lkey (HERE).reader_string (SOURCE_FILE ("ram_sections.gSemantics", 76)).reader_stringByLeftPadding (GALGAS_uint ((uint32_t) 40U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("ram_sections.gSemantics", 76)).operator_concat (GALGAS_string (" ")  COMMA_SOURCE_FILE ("ram_sections.gSemantics", 76))  COMMA_SOURCE_FILE ("ram_sections.gSemantics", 76)) ;
        cEnumerator_uintlist enumerator_3472 (enumerator_3284.current_mRegisterAddressList (HERE), kEnumeration_up) ;
        while (enumerator_3472.hasCurrentObject ()) {
          ioArgument_ioListFileContents.dotAssign_operation (enumerator_3472.current_mValue (HERE).reader_hexString (SOURCE_FILE ("ram_sections.gSemantics", 78))  COMMA_SOURCE_FILE ("ram_sections.gSemantics", 78)) ;
          if (enumerator_3472.hasNextObject ()) {
            ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string (", ")  COMMA_SOURCE_FILE ("ram_sections.gSemantics", 79)) ;
          }
          enumerator_3472.gotoNextObject () ;
        }
        ioArgument_ioListFileContents.dotAssign_operation (enumerator_3284.current_mBitDefinitionString (HERE).operator_concat (GALGAS_string ("\n")  COMMA_SOURCE_FILE ("ram_sections.gSemantics", 81))  COMMA_SOURCE_FILE ("ram_sections.gSemantics", 81)) ;
      }
      enumerator_3284.gotoNextObject () ;
    }
    ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string ("\n")  COMMA_SOURCE_FILE ("ram_sections.gSemantics", 84)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                           Abstract category method '@declarationInRam handleDeclaration'                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_declarationInRam_handleDeclaration> gCategoryMethodTable_declarationInRam_handleDeclaration ;

//---------------------------------------------------------------------------------------------------------------------*

void enterCategoryMethod_handleDeclaration (const int32_t inClassIndex,
                                            categoryMethodSignature_declarationInRam_handleDeclaration inMethod) {
  gCategoryMethodTable_declarationInRam_handleDeclaration.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

static void freeCategoryMethod_declarationInRam_handleDeclaration (void) {
  gCategoryMethodTable_declarationInRam_handleDeclaration.free () ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_declarationInRam_handleDeclaration (NULL,
                                                               freeCategoryMethod_declarationInRam_handleDeclaration) ;

//---------------------------------------------------------------------------------------------------------------------*

void callCategoryMethod_handleDeclaration (const cPtr_declarationInRam * inObject,
                                           GALGAS_ramBankTable & io_ioRamBank,
                                           GALGAS_registerTable & io_ioRegisterTable,
                                           const GALGAS_lstring constin_inCurrentRamBank,
                                           GALGAS_declaredByteMap & io_ioDeclaredByteMap,
                                           C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, cPtr_declarationInRam) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const int32_t classIndex = info->mSlotID ;
    categoryMethodSignature_declarationInRam_handleDeclaration f = NULL ;
    if (classIndex < gCategoryMethodTable_declarationInRam_handleDeclaration.count ()) {
      f = gCategoryMethodTable_declarationInRam_handleDeclaration (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_declarationInRam_handleDeclaration.count ()) {
           f = gCategoryMethodTable_declarationInRam_handleDeclaration (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_declarationInRam_handleDeclaration.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, io_ioRamBank, io_ioRegisterTable, constin_inCurrentRamBank, io_ioDeclaredByteMap, inCompiler COMMA_THERE) ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                        Overriding category method '@byteDeclarationInRam handleDeclaration'                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static void categoryMethod_byteDeclarationInRam_handleDeclaration (const cPtr_declarationInRam * inObject,
                                                                   GALGAS_ramBankTable & ioArgument_ioRamBank,
                                                                   GALGAS_registerTable & ioArgument_ioRegisterTable,
                                                                   const GALGAS_lstring constinArgument_inCurrentRamBank,
                                                                   GALGAS_declaredByteMap & ioArgument_ioDeclaredByteMap,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_byteDeclarationInRam * object = (const cPtr_byteDeclarationInRam *) inObject ;
  macroValidSharedObject (object, cPtr_byteDeclarationInRam) ;
  GALGAS_uint var_lastAddressPlusOne ;
  GALGAS_uint var_firstFreeAddress ;
  GALGAS_uintlist var_mirrorOffsetList ;
  GALGAS_uint joker_1088_0 ; // Joker input parameter
  ioArgument_ioRamBank.method_searchKey (constinArgument_inCurrentRamBank, joker_1088_0, var_firstFreeAddress, var_lastAddressPlusOne, var_mirrorOffsetList, inCompiler COMMA_SOURCE_FILE ("ram_sections.gSemantics", 29)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, object->mAttribute_mSize.reader_uint (SOURCE_FILE ("ram_sections.gSemantics", 30)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mSize.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("zero size is not allowed")  COMMA_SOURCE_FILE ("ram_sections.gSemantics", 31)) ;
  }
  GALGAS_uintlist var_addressList = GALGAS_uintlist::constructor_listWithValue (var_firstFreeAddress COMMA_SOURCE_FILE ("ram_sections.gSemantics", 33)) ;
  cEnumerator_uintlist enumerator_1320 (var_mirrorOffsetList, kEnumeration_up) ;
  while (enumerator_1320.hasCurrentObject ()) {
    var_addressList.addAssign_operation (var_firstFreeAddress.add_operation (enumerator_1320.current_mValue (HERE), inCompiler COMMA_SOURCE_FILE ("ram_sections.gSemantics", 35))  COMMA_SOURCE_FILE ("ram_sections.gSemantics", 35)) ;
    enumerator_1320.gotoNextObject () ;
  }
  const enumGalgasBool test_2 = ioArgument_ioDeclaredByteMap.reader_hasKey (object->mAttribute_mName.mAttribute_string COMMA_SOURCE_FILE ("ram_sections.gSemantics", 37)).operator_not (SOURCE_FILE ("ram_sections.gSemantics", 37)).boolEnum () ;
  if (kBoolTrue == test_2) {
    {
    ioArgument_ioDeclaredByteMap.modifier_insertKey (object->mAttribute_mName, inCompiler COMMA_SOURCE_FILE ("ram_sections.gSemantics", 38)) ;
    }
  }
  {
  ioArgument_ioRegisterTable.modifier_insertKey (object->mAttribute_mName, var_addressList, object->mAttribute_mSize.reader_uint (SOURCE_FILE ("ram_sections.gSemantics", 40)), object->mAttribute_mBitSliceTable, object->mAttribute_mBitDefinitionString, inCompiler COMMA_SOURCE_FILE ("ram_sections.gSemantics", 40)) ;
  }
  var_firstFreeAddress = var_firstFreeAddress.add_operation (object->mAttribute_mSize.reader_uint (SOURCE_FILE ("ram_sections.gSemantics", 41)), inCompiler COMMA_SOURCE_FILE ("ram_sections.gSemantics", 41)) ;
  {
  ioArgument_ioRamBank.modifier_setMFirstFreeAddressForKey (var_firstFreeAddress, constinArgument_inCurrentRamBank.reader_string (SOURCE_FILE ("ram_sections.gSemantics", 42)), inCompiler COMMA_SOURCE_FILE ("ram_sections.gSemantics", 42)) ;
  }
  const enumGalgasBool test_3 = GALGAS_bool (kIsStrictSup, var_firstFreeAddress.objectCompare (var_lastAddressPlusOne)).boolEnum () ;
  if (kBoolTrue == test_3) {
    GALGAS_location location_4 (object->mAttribute_mName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_4, GALGAS_string ("overflow in '").operator_concat (constinArgument_inCurrentRamBank.reader_string (SOURCE_FILE ("ram_sections.gSemantics", 44))  COMMA_SOURCE_FILE ("ram_sections.gSemantics", 44)).operator_concat (GALGAS_string ("' ram bank for '")  COMMA_SOURCE_FILE ("ram_sections.gSemantics", 44)).operator_concat (object->mAttribute_mName.reader_string (SOURCE_FILE ("ram_sections.gSemantics", 44))  COMMA_SOURCE_FILE ("ram_sections.gSemantics", 44)).operator_concat (GALGAS_string ("' declaration")  COMMA_SOURCE_FILE ("ram_sections.gSemantics", 44))  COMMA_SOURCE_FILE ("ram_sections.gSemantics", 44)) ;
  }
}
//---------------------------------------------------------------------------------------------------------------------*

static void defineCategoryMethod_byteDeclarationInRam_handleDeclaration (void) {
  enterCategoryMethod_handleDeclaration (kTypeDescriptor_GALGAS_byteDeclarationInRam.mSlotID,
                                         categoryMethod_byteDeclarationInRam_handleDeclaration) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_byteDeclarationInRam_handleDeclaration (defineCategoryMethod_byteDeclarationInRam_handleDeclaration, NULL) ;

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


