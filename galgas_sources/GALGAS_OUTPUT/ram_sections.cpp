//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'ram_sections.cpp'                           *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    september 21th, 2009, at 21h4'58"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "ram_sections.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "ram_sections.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
// Virtual Table for category method '@declarationInRam.handleDeclaration'   *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__declarationInRam__handleDeclaration> gDispatchTableForMethod__declarationInRam__handleDeclaration ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__declarationInRam__handleDeclaration (typeCategoryMethod__declarationInRam__handleDeclaration inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__declarationInRam__handleDeclaration.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__declarationInRam__handleDeclaration
findCategoryMethod__declarationInRam__handleDeclaration (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__declarationInRam__handleDeclaration result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__declarationInRam__handleDeclaration.count ()) {
    result = gDispatchTableForMethod__declarationInRam__handleDeclaration (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__declarationInRam__handleDeclaration (superClassPtr) ;
      gDispatchTableForMethod__declarationInRam__handleDeclaration.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@commonDeclarationInRam.handleDeclaration'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__commonDeclarationInRam__handleDeclaration (C_Compiler & inLexique,
                                const cPtr_commonDeclarationInRam * operand_1005,
                                GGS_ramBankTable  & var_cas_ioRamBank,
                                GGS_registerTable  & var_cas_ioRegisterTable,
                                const GGS_lstring   var_cas_inCurrentRamBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1005 != NULL) {
    GGS_uint  var_cas_firstFreeAddressBeforeCommon ;
    GGS_uint  automatic_var_0 ;
    GGS_uint  automatic_var_1 ;
    GGS_uintlist  automatic_var_2 ;
    const GGS_ramBankTable  temp_1162 = var_cas_ioRamBank ;
    if (temp_1162.isBuilt ()) {
      temp_1162 (HERE)->method_searchKey (inLexique, var_cas_inCurrentRamBank, automatic_var_0, var_cas_firstFreeAddressBeforeCommon, automatic_var_1, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (29)) ;
    }
    GGS_bool var_cas_firstFreeAddressDefined ;
    var_cas_firstFreeAddressDefined = GGS_bool (false) ;
    GGS_uint  var_cas_firstFreeAddress ;
    var_cas_firstFreeAddress = GGS_uint (0U) ;
    {
      GGS_commonBranchList::cEnumerator enumerator_1319 (operand_1005->mBranchList, true) ;
      const GGS_commonBranchList::cElement * operand_1319 = NULL ;
      while (((operand_1319 = enumerator_1319.nextObject ()))) {
        macroValidPointer (operand_1319) ;
        GGS_ramBankTable  var_cas_ramBank ;
        var_cas_ramBank = var_cas_ioRamBank ;
        {
          GGS_declarationInRamList::cEnumerator enumerator_1389 (operand_1319->mDeclarations, true) ;
          const GGS_declarationInRamList::cElement * operand_1389 = NULL ;
          while (((operand_1389 = enumerator_1389.nextObject ()))) {
            macroValidPointer (operand_1389) ;
            const GGS_declarationInRam  temp_1435 = operand_1389->mDeclarationInRAM ;
            if (temp_1435.isBuilt ()) {
              typeCategoryMethod__declarationInRam__handleDeclaration method = findCategoryMethod__declarationInRam__handleDeclaration (temp_1435.galgasObjectRunTimeInfo ()) ;
              if (method != NULL) {
                method (inLexique, temp_1435 (HERE), var_cas_ramBank, var_cas_ioRegisterTable, var_cas_inCurrentRamBank COMMA_SOURCE_FILE_AT_LINE (35)) ;
              }
            }
          }
        }
        GGS_uint  var_cas_ffa ;
        GGS_uint  automatic_var_3 ;
        GGS_uint  automatic_var_4 ;
        GGS_uintlist  automatic_var_5 ;
        const GGS_ramBankTable  temp_1541 = var_cas_ramBank ;
        if (temp_1541.isBuilt ()) {
          temp_1541 (HERE)->method_searchKey (inLexique, var_cas_inCurrentRamBank, automatic_var_3, var_cas_ffa, automatic_var_4, automatic_var_5 COMMA_SOURCE_FILE_AT_LINE (38)) ;
        }
        if (((var_cas_firstFreeAddressDefined).operator_not ()).isBuiltAndTrue ()) {
          var_cas_firstFreeAddress = var_cas_ffa ;
          var_cas_firstFreeAddressDefined = GGS_bool (true) ;
        }else if (((var_cas_ffa).operator_isNotEqual (var_cas_firstFreeAddress)).isBuiltAndTrue ()) {
          operand_1319->mEndOfBranchLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this branch allocates ")).operator_concat (var_cas_ffa.substract_operation (inLexique, var_cas_firstFreeAddressBeforeCommon COMMA_SOURCE_FILE_AT_LINE (43)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (43)))).operator_concat (GGS_string (" byte(s), while the first branch allocates "))).operator_concat (var_cas_firstFreeAddress.substract_operation (inLexique, var_cas_firstFreeAddressBeforeCommon COMMA_SOURCE_FILE_AT_LINE (45)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (45)))).operator_concat (GGS_string (" byte(s)")) COMMA_SOURCE_FILE_AT_LINE (46)) ;
        }
      }
    }
    var_cas_ioRamBank.modifier_setMFirstFreeAddressForKey (inLexique, var_cas_firstFreeAddress, var_cas_inCurrentRamBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (48)) COMMA_SOURCE_FILE_AT_LINE (48)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@byteDeclarationInRam.handleDeclaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__byteDeclarationInRam__handleDeclaration (C_Compiler & inLexique,
                                const cPtr_byteDeclarationInRam * operand_2235,
                                GGS_ramBankTable  & var_cas_ioRamBank,
                                GGS_registerTable  & var_cas_ioRegisterTable,
                                const GGS_lstring   var_cas_inCurrentRamBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2235 != NULL) {
    GGS_uint  var_cas_lastAddressPlusOne ;
    GGS_uint  var_cas_firstFreeAddress ;
    GGS_uintlist  var_cas_mirrorOffsetList ;
    GGS_uint  automatic_var_6 ;
    const GGS_ramBankTable  temp_2440 = var_cas_ioRamBank ;
    if (temp_2440.isBuilt ()) {
      temp_2440 (HERE)->method_searchKey (inLexique, var_cas_inCurrentRamBank, automatic_var_6, var_cas_firstFreeAddress, var_cas_lastAddressPlusOne, var_cas_mirrorOffsetList COMMA_SOURCE_FILE_AT_LINE (61)) ;
    }
    if (((operand_2235->mSize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (62))).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
      operand_2235->mSize.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("zero size is not allowed") COMMA_SOURCE_FILE_AT_LINE (64)) ;
    }
    GGS_uintlist  var_cas_addressList ;
    var_cas_addressList = GGS_uintlist ::constructor_listWithValue (var_cas_firstFreeAddress) ;
    {
      GGS_uintlist::cEnumerator enumerator_2692 (var_cas_mirrorOffsetList, true) ;
      const GGS_uintlist::cElement * operand_2692 = NULL ;
      while (((operand_2692 = enumerator_2692.nextObject ()))) {
        macroValidPointer (operand_2692) ;
        var_cas_addressList._addAssign_operation (var_cas_firstFreeAddress.add_operation (inLexique, operand_2692->mValue COMMA_SOURCE_FILE_AT_LINE (67))) ;
      }
    }
    var_cas_ioRegisterTable.modifier_insertKey (inLexique, operand_2235->mName, var_cas_addressList, operand_2235->mSize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (69)), operand_2235->mBitSliceTable, operand_2235->mBitDefinitionString COMMA_SOURCE_FILE_AT_LINE (69)) ;
    var_cas_firstFreeAddress = var_cas_firstFreeAddress.add_operation (inLexique, operand_2235->mSize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (70)) COMMA_SOURCE_FILE_AT_LINE (70)) ;
    var_cas_ioRamBank.modifier_setMFirstFreeAddressForKey (inLexique, var_cas_firstFreeAddress, var_cas_inCurrentRamBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (71)) COMMA_SOURCE_FILE_AT_LINE (71)) ;
    if (((var_cas_firstFreeAddress).operator_strictSup (var_cas_lastAddressPlusOne)).isBuiltAndTrue ()) {
      operand_2235->mName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("overflow in '")).operator_concat (var_cas_inCurrentRamBank)).operator_concat (GGS_string ("' ram bank for '"))).operator_concat (operand_2235->mName)).operator_concat (GGS_string ("' declaration")) COMMA_SOURCE_FILE_AT_LINE (74)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "analyze_ram_sections"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyze_ram_sections (C_Compiler & inLexique,
                                const GGS_string  var_cas_inListingTitle,
                                const GGS_ramDefinitionList   var_cas_inRamDefinitionList,
                                GGS_ramBankTable  & var_cas_ioRamBankTable,
                                const GGS_registerTable   var_cas_inSpecialRegisterTable,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_registerTable  & var_cas_ioAllRegisters COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyze_ram_sections at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_ramDefinitionList::cEnumerator enumerator_3852 (var_cas_inRamDefinitionList, true) ;
    const GGS_ramDefinitionList::cElement * operand_3852 = NULL ;
    while (((operand_3852 = enumerator_3852.nextObject ()))) {
      macroValidPointer (operand_3852) ;
      {
        GGS_declarationInRamList::cEnumerator enumerator_3880 (operand_3852->mDeclaration, true) ;
        const GGS_declarationInRamList::cElement * operand_3880 = NULL ;
        while (((operand_3880 = enumerator_3880.nextObject ()))) {
          macroValidPointer (operand_3880) ;
          const GGS_declarationInRam  temp_3926 = operand_3880->mDeclarationInRAM ;
          if (temp_3926.isBuilt ()) {
            typeCategoryMethod__declarationInRam__handleDeclaration method = findCategoryMethod__declarationInRam__handleDeclaration (temp_3926.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, temp_3926 (HERE), var_cas_ioRamBankTable, var_cas_ioAllRegisters, operand_3852->mBankName COMMA_SOURCE_FILE_AT_LINE (92)) ;
            }
          }
        }
      }
    }
  }
  if ((gOption_piccolo_5F_options_ouputListingFile.value ()).isBuiltAndTrue ()) {
    var_cas_ioListFileContents.dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (inLexique, GGS_uint (79U), GGS_char (TO_UNICODE ('*')) COMMA_SOURCE_FILE_AT_LINE (96))) ;
    var_cas_ioListFileContents.appendCString ("\n") ;
    var_cas_ioListFileContents.appendCString ("*") ;
    var_cas_ioListFileContents.dotAssign_operation (var_cas_inListingTitle.reader_stringByLeftAndRightPadding (inLexique, GGS_uint (77U), GGS_char (TO_UNICODE (' ')) COMMA_SOURCE_FILE_AT_LINE (97))) ;
    var_cas_ioListFileContents.appendCString ("*\n") ;
    var_cas_ioListFileContents.dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (inLexique, GGS_uint (79U), GGS_char (TO_UNICODE ('*')) COMMA_SOURCE_FILE_AT_LINE (98))) ;
    var_cas_ioListFileContents.appendCString ("\n"
      "\n") ;
    var_cas_ioListFileContents.dotAssign_operation (GGS_string ("Variable").reader_stringByLeftPadding (inLexique, GGS_uint (40U), GGS_char (TO_UNICODE (' ')) COMMA_SOURCE_FILE_AT_LINE (99))) ;
    var_cas_ioListFileContents.appendCString (" Address\n") ;
    {
      GGS_registerTable::cEnumerator enumerator_4424 (var_cas_ioAllRegisters, true) ;
      const GGS_registerTable::cElement * operand_4424 = NULL ;
      while (((operand_4424 = enumerator_4424.nextObject ()))) {
        macroValidPointer (operand_4424) ;
        if (((var_cas_inSpecialRegisterTable.reader_hasKey (inLexique, operand_4424->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (101)) COMMA_SOURCE_FILE_AT_LINE (101))).operator_not ()).isBuiltAndTrue ()) {
          var_cas_ioListFileContents.dotAssign_operation (operand_4424->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (102)).reader_stringByLeftPadding (inLexique, GGS_uint (40U), GGS_char (TO_UNICODE (' ')) COMMA_SOURCE_FILE_AT_LINE (102))) ;
          var_cas_ioListFileContents.appendCString (" ") ;
          {
            GGS_uintlist::cEnumerator enumerator_4610 (operand_4424->mInfo.mRegisterAddressList, true) ;
            const GGS_uintlist::cElement * operand_4610 = enumerator_4610.nextObject () ;
            if ((operand_4610 != NULL)) {
              bool _foreach_loop_4610 ;
              do{
                macroValidPointer (operand_4610) ;
                var_cas_ioListFileContents.dotAssign_operation (operand_4610->mValue.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (104))) ;
                operand_4610 = enumerator_4610.nextObject () ;
                _foreach_loop_4610 = ((operand_4610 != NULL)) ;
                if (_foreach_loop_4610) {
                  var_cas_ioListFileContents.appendCString (", ") ;
                }
              }while (_foreach_loop_4610) ;
            }
          }
          var_cas_ioListFileContents.dotAssign_operation (operand_4424->mInfo.mBitDefinitionString) ;
          var_cas_ioListFileContents.appendCString ("\n") ;
        }
      }
    }
    var_cas_ioListFileContents.appendCString ("\n") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyze_ram_sections\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_ram_sections (void) {
 enterCategoryMethod__declarationInRam__handleDeclaration ((typeCategoryMethod__declarationInRam__handleDeclaration) category_method__commonDeclarationInRam__handleDeclaration, gClassInfoFor__commonDeclarationInRam.slotID ()) ;
 enterCategoryMethod__declarationInRam__handleDeclaration ((typeCategoryMethod__declarationInRam__handleDeclaration) category_method__byteDeclarationInRam__handleDeclaration, gClassInfoFor__byteDeclarationInRam.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_ram_sections (prologueRoutineFor_ram_sections,
                                   NULL) ;

//---------------------------------------------------------------------------*

