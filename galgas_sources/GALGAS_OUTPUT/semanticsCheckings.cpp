//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'semanticsCheckings.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      august 1st, 2008, at 16h45'5"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "semanticsCheckings.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticsCheckings.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                           class 'e_routineMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_routineMap::e_routineMap (void) :
mIsNoReturn (),
mRequiredBank () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@routineMap'                           *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_routineMap::
elementOf_GGS_routineMap (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_routineMap & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_routineMap::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mIsNoReturn.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mRequiredBank.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_routineMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_routineMap * _p = dynamic_cast <const elementOf_GGS_routineMap *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.mIsNoReturn._operator_isEqual (_p->mInfo.mIsNoReturn)).boolValue ()
           && (mInfo.mRequiredBank._operator_isEqual (_p->mInfo.mRequiredBank)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_routineMap::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_routineMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_routineMap * info = (e_routineMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_routineMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_routineMap * info = (e_routineMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_routineMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineMap::
_operator_isEqual (const GGS_routineMap & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineMap::
_operator_isNotEqual (const GGS_routineMap & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_bool& inParameter0,
                const GGS_uint & inParameter1,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inParameter1._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_routineMap info  ;
    info.mIsNoReturn = inParameter0 ;
    info.mRequiredBank = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_bool  & outParameter0,
               GGS_uint   & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    outParameter1._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mIsNoReturn ;
    outParameter1 = node->mInfo.mRequiredBank ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
modifier_setMIsNoReturnForKey (C_Compiler & inLexique,
                        const GGS_bool& inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMIsNoReturnForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mIsNoReturn = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
modifier_setMRequiredBankForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMRequiredBankForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mRequiredBank = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_bool  & outParameter0,
                                GGS_uint   & outParameter1 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "the '%K' routine is not declared",
                  inKey,
                  outParameter0,
                  outParameter1,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
modifier_insertKey (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_bool& inParameter0,
                                const GGS_uint & inParameter1 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "the '%K' routine is already declared in %L",
                 inKey,
                 inParameter0,
                 inParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_routineMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_routineMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_routineMap::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @routineMap " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_bool & GGS_routineMap::cEnumerator::_mIsNoReturn (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mIsNoReturn ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_routineMap::cEnumerator::_mRequiredBank (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRequiredBank ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// Virtual Table for category method '@bitNumberExpression.checkBitNumber'   *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__bitNumberExpression__checkBitNumber> gDispatchTableFor__bitNumberExpression__checkBitNumber ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__bitNumberExpression__checkBitNumber (typeCategoryMethod__bitNumberExpression__checkBitNumber inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__bitNumberExpression__checkBitNumber.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__bitNumberExpression__checkBitNumber
findCategoryMethod__bitNumberExpression__checkBitNumber (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__bitNumberExpression__checkBitNumber result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__bitNumberExpression__checkBitNumber.count ()) {
    result = gDispatchTableFor__bitNumberExpression__checkBitNumber (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__bitNumberExpression__checkBitNumber (superClassPtr) ;
      gDispatchTableFor__bitNumberExpression__checkBitNumber.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@bitNumberLiteralValue.checkBitNumber'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLiteralValue__checkBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLiteralValue * operand_1124,
                                const GGS_bitSliceTable   /* var_cas_inBitSliceTable */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1124 != NULL) {
    if (((operand_1124->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (30)))._operator_strictSup (GGS_uint (true, 7U))).isBuiltAndTrue ()) {
      operand_1124->mBitNumberLiteralValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "The bit number is "))._operator_concat (operand_1124->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (31)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (31))))._operator_concat (GGS_string (true, " (should be <= 7)")) COMMA_SOURCE_FILE_AT_LINE (31)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@bitNumberLabelValue.checkBitNumber'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLabelValue__checkBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLabelValue * operand_1488,
                                const GGS_bitSliceTable   var_cas_inBitSliceTable
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1488 != NULL) {
    GGS_uint  var_cas_sliceIndex ;
    GGS_uint  var_cas_sliceSize ;
    const GGS_bitSliceTable  _temp_1599 = var_cas_inBitSliceTable ;
    if (_temp_1599._isBuilt ()) {
      _temp_1599 (HERE)->method_searchKey (_inLexique, operand_1488->mBitNumberLabelValue, var_cas_sliceIndex, var_cas_sliceSize COMMA_SOURCE_FILE_AT_LINE (42)) ;
    }
    if (((operand_1488->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (43)))._operator_strictSup (var_cas_sliceSize)).isBuiltAndTrue ()) {
      operand_1488->mBitNumberIndexValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "The "))._operator_concat (operand_1488->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (44)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (44))))._operator_concat (GGS_string (true, " index is too large (should be < ")))._operator_concat (var_cas_sliceSize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (45))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (45)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@registerExpression.checkRegisterDeclaration'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__checkRegisterDeclaration (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_2148,
                                const GGS_registerTable   var_cas_inRegisterTable
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2148 != NULL) {
    GGS_uint  var_cas_size ;
    GGS_uintlist  automatic_var_0 ;
    GGS_bitSliceTable  automatic_var_1 ;
    const GGS_registerTable  _temp_2249 = var_cas_inRegisterTable ;
    if (_temp_2249._isBuilt ()) {
      _temp_2249 (HERE)->method_searchKey (_inLexique, operand_2148->mRegisterName, automatic_var_0, var_cas_size, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (58)) ;
    }
    if (((operand_2148->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (60)))._operator_supOrEqual (var_cas_size)).isBuiltAndTrue ()) {
      operand_2148->mOffset.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "index ("))._operator_concat (operand_2148->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (61)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (61))))._operator_concat (GGS_string (true, ") should be lower than size (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (61))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (61)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@registerExpression.checkRegisterDeclaration'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__checkRegisterDeclaration> gDispatchTableFor__registerExpression__checkRegisterDeclaration ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__checkRegisterDeclaration (typeCategoryMethod__registerExpression__checkRegisterDeclaration inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__checkRegisterDeclaration.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__checkRegisterDeclaration
findCategoryMethod__registerExpression__checkRegisterDeclaration (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__checkRegisterDeclaration result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__checkRegisterDeclaration.count ()) {
    result = gDispatchTableFor__registerExpression__checkRegisterDeclaration (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__checkRegisterDeclaration (superClassPtr) ;
      gDispatchTableFor__registerExpression__checkRegisterDeclaration.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerExpression.checkRegisterDeclarationAndAddressLowerThan256'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_2583,
                                const GGS_registerTable   var_cas_inRegisterTable
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2583 != NULL) {
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  automatic_var_2 ;
    GGS_bitSliceTable  automatic_var_3 ;
    const GGS_registerTable  _temp_2742 = var_cas_inRegisterTable ;
    if (_temp_2742._isBuilt ()) {
      _temp_2742 (HERE)->method_searchKey (_inLexique, operand_2583->mRegisterName, var_cas_registerAddressList, automatic_var_2, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (72)) ;
    }
    GGS_bool var_cas_found ;
    var_cas_found = GGS_bool (true, false) ;
    {
      GGS_uintlist::cEnumerator enumerator_2873 (var_cas_registerAddressList, true) ;
      const GGS_uintlist::cElement * operand_2873 = NULL ;
      while (((operand_2873 = enumerator_2873.nextObject ()))
          && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_2873) ;
        var_cas_found = (operand_2873->mValue._add_operation (_inLexique, operand_2583->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (76)) COMMA_SOURCE_FILE_AT_LINE (76)))._operator_strictInf (GGS_uint (true, 256U)) ;
      }
    }
    if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
      operand_2583->mRegisterName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the register '"))._operator_concat (operand_2583->mRegisterName))._operator_concat (GGS_string (true, "' should be should have an address < 256")) COMMA_SOURCE_FILE_AT_LINE (79)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@registerExpression.checkRegisterDeclarationAndAddressLowerThan256'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256> gDispatchTableFor__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 (typeCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__checkRegisterDeclarationAndAddressLowerThan256.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256
findCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__checkRegisterDeclarationAndAddressLowerThan256.count ()) {
    result = gDispatchTableFor__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 (superClassPtr) ;
      gDispatchTableFor__registerExpression__checkRegisterDeclarationAndAddressLowerThan256.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerExpression.checkRegisterAddressingAndBankAccess' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__checkRegisterAddressingAndBankAccess (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_3232,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank,
                                GGS_bitSliceTable  & var_cas_outBitSliceTable
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3232 != NULL) {
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  var_cas_size ;
    const GGS_registerTable  _temp_3472 = var_cas_inRegisterTable ;
    if (_temp_3472._isBuilt ()) {
      _temp_3472 (HERE)->method_searchKey (_inLexique, operand_3232->mRegisterName, var_cas_registerAddressList, var_cas_size, var_cas_outBitSliceTable COMMA_SOURCE_FILE_AT_LINE (94)) ;
    }
    if (((operand_3232->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (96)))._operator_supOrEqual (var_cas_size)).isBuiltAndTrue ()) {
      operand_3232->mOffset.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "index ("))._operator_concat (operand_3232->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (97)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (97))))._operator_concat (GGS_string (true, ") should be lower than size (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (97))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (97)) ;
    }
    GGS_bool var_cas_found ;
    var_cas_found = GGS_bool (true, false) ;
    {
      GGS_uintlist::cEnumerator enumerator_3812 (var_cas_registerAddressList, true) ;
      const GGS_uintlist::cElement * operand_3812 = NULL ;
      while (((operand_3812 = enumerator_3812.nextObject ()))
          && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_3812) ;
        var_cas_found = ((operand_3812->mValue)._operator_strictInf (var_cas_inAccessBankSplitOffset))._operator_or ((operand_3812->mValue)._operator_supOrEqual (GGS_uint (true, 3840U)._add_operation (_inLexique, var_cas_inAccessBankSplitOffset COMMA_SOURCE_FILE_AT_LINE (102)))) ;
      }
    }
    if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
      if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        operand_3232->mRegisterName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the register '"))._operator_concat (operand_3232->mRegisterName))._operator_concat (GGS_string (true, "' should be addressed with BSR, but BSR does not contain a reliable value")) COMMA_SOURCE_FILE_AT_LINE (107)) ;
      }else{
        GGS_uint  var_cas_bankFirst ;
        var_cas_bankFirst = var_cas_ioCurrentBank._multiply_operation (_inLexique, GGS_uint (true, 256U) COMMA_SOURCE_FILE_AT_LINE (109)) ;
        GGS_uint  var_cas_bankLast ;
        var_cas_bankLast = var_cas_bankFirst._add_operation (_inLexique, GGS_uint (true, 255U) COMMA_SOURCE_FILE_AT_LINE (110)) ;
        {
          GGS_uintlist::cEnumerator enumerator_4299 (var_cas_registerAddressList, true) ;
          const GGS_uintlist::cElement * operand_4299 = NULL ;
          while (((operand_4299 = enumerator_4299.nextObject ()))
              && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
            macroValidPointer (operand_4299) ;
            var_cas_found = ((operand_4299->mValue)._operator_supOrEqual (var_cas_bankFirst))._operator_and ((operand_4299->mValue)._operator_infOrEqual (var_cas_bankLast)) ;
          }
        }
        if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
          operand_3232->mRegisterName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the register '"))._operator_concat (operand_3232->mRegisterName))._operator_concat (GGS_string (true, "' should be addressed with BSR, but BSR contains ")))._operator_concat (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (115))))._operator_concat (GGS_string (true, " that does not correspond to register bank")) COMMA_SOURCE_FILE_AT_LINE (115)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@registerExpression.checkRegisterAddressingAndBankAccess'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess> gDispatchTableFor__registerExpression__checkRegisterAddressingAndBankAccess ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__checkRegisterAddressingAndBankAccess.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess
findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__checkRegisterAddressingAndBankAccess.count ()) {
    result = gDispatchTableFor__registerExpression__checkRegisterAddressingAndBankAccess (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (superClassPtr) ;
      gDispatchTableFor__registerExpression__checkRegisterAddressingAndBankAccess.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Class for 'routineKind' Enumeration                     *
//                                                                           *
//---------------------------------------------------------------------------*

bool GGS_routineKind::
_isBuilt (void) const {
  return mValue > kNotBuilt ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_isEqual (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue == inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_isNotEqual (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue != inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_infOrEqual (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue <= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_supOrEqual (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue >= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_strictInf (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue < inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_strictSup (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue > inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_routineKind::
reader_description (C_Compiler & /* _inLexique */
                    COMMA_UNUSED_LOCATION_ARGS,
                    const sint32 /* inIndentation */) const {
  C_String s ;
  s << "<enum @routineKind" ;
  switch (mValue) {
  case enum_interruptRoutine:
    s << " interruptRoutine>" ;
    break ;
  case enum_noReturnRoutine:
    s << " noReturnRoutine>" ;
    break ;
  case enum_regularRoutine:
    s << " regularRoutine>" ;
    break ;
  case kNotBuilt:
    s << " (not built)>" ;
    break ;
  }
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Category method '@piccolo_instruction.check'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__piccolo_instruction__check (C_Compiler &,
                                const cPtr_piccolo_instruction * operand_5157,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5157 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Virtual Table for category method '@piccolo_instruction.check'       *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__piccolo_instruction__check> gDispatchTableFor__piccolo_instruction__check ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__piccolo_instruction__check (typeCategoryMethod__piccolo_instruction__check inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__piccolo_instruction__check.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__piccolo_instruction__check
findCategoryMethod__piccolo_instruction__check (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__piccolo_instruction__check result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__piccolo_instruction__check.count ()) {
    result = gDispatchTableFor__piccolo_instruction__check (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__piccolo_instruction__check (superClassPtr) ;
      gDispatchTableFor__piccolo_instruction__check.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "checkInstructionList"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkInstructionList (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank,
                                GGS_bool & var_cas_outContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind,
                                const GGS_instructionList   var_cas_inInstructionList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkInstructionList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outContinuesInSequence = GGS_bool (true, true) ;
  {
    GGS_instructionList::cEnumerator enumerator_5785 (var_cas_inInstructionList, true) ;
    const GGS_instructionList::cElement * operand_5785 = NULL ;
    while (((operand_5785 = enumerator_5785.nextObject ()))) {
      macroValidPointer (operand_5785) ;
      if (((var_cas_outContinuesInSequence)._operator_not ()).isBuiltAndTrue ()) {
        operand_5785->mInstruction.reader_mInstructionLocation (_inLexique COMMA_SOURCE_FILE_AT_LINE (158)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unreachable code") COMMA_SOURCE_FILE_AT_LINE (158)) ;
        var_cas_outContinuesInSequence = GGS_bool (true, true) ;
      }
      const GGS_piccolo_instruction  _temp_5986 = operand_5785->mInstruction ;
      if (_temp_5986._isBuilt ()) {
        typeCategoryMethod__piccolo_instruction__check _method = findCategoryMethod__piccolo_instruction__check (_temp_5986._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_5986 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_ioCurrentBank, var_cas_outContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (161)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkInstructionList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@instruction_nobanksel.check'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_nobanksel__check (C_Compiler & _inLexique,
                                const cPtr_instruction_nobanksel * operand_6299,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6299 != NULL) {
    var_cas_ioCurrentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Category method '@instruction_banksel.check'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_banksel__check (C_Compiler & _inLexique,
                                const cPtr_instruction_banksel * operand_6691,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6691 != NULL) {
    if (((operand_6691->mBankIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (195)))._operator_strictSup (GGS_uint (true, 15U))).isBuiltAndTrue ()) {
      operand_6691->mBankIndex.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "selected bank index should be lower or equal to 15") COMMA_SOURCE_FILE_AT_LINE (196)) ;
      var_cas_ioCurrentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
    }else if (((operand_6691->mBankIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (198)))._operator_isEqual (var_cas_ioCurrentBank)).isBuiltAndTrue ()) {
      operand_6691->mBankIndex.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, ((GGS_string (true, "useless instruction: the bank "))._operator_concat (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (199))))._operator_concat (GGS_string (true, " is already selected")) COMMA_SOURCE_FILE_AT_LINE (199)) ;
    }else{
      var_cas_ioCurrentBank = operand_6691->mBankIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (201)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@instruction_savebank.check'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_savebank__check (C_Compiler & _inLexique,
                                const cPtr_instruction_savebank * operand_7429,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7429 != NULL) {
    const GGS_registerExpression  _temp_7634 = operand_7429->mRegister ;
    if (_temp_7634._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterDeclaration _method = findCategoryMethod__registerExpression__checkRegisterDeclaration (_temp_7634._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_7634 (HERE), var_cas_inRegisterTable COMMA_SOURCE_FILE_AT_LINE (215)) ;
      }
    }
    GGS_uint  var_cas_finalBank ;
    var_cas_finalBank = var_cas_ioCurrentBank ;
    ::routine_checkInstructionList (_inLexique,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_finalBank,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind,  operand_7429->mInstructionList COMMA_SOURCE_FILE_AT_LINE (217)) ;
    if (((var_cas_ioContinuesInSequence)._operator_not ()).isBuiltAndTrue ()) {
      operand_7429->mEndOfSaveBankInstruction.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "useless saving: execution does reach the end of \"savebank\" instruction list") COMMA_SOURCE_FILE_AT_LINE (228)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Category method '@instruction_FDA.check'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FDA__check (C_Compiler & _inLexique,
                                const cPtr_instruction_FDA * operand_8193,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8193 != NULL) {
    GGS_bitSliceTable  automatic_var_4 ;
    const GGS_registerExpression  _temp_8429 = operand_8193->mRegisterExpression ;
    if (_temp_8429._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_8429._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_8429 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank, automatic_var_4 COMMA_SOURCE_FILE_AT_LINE (242)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Category method '@instruction_FA.check'                   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FA__check (C_Compiler & _inLexique,
                                const cPtr_instruction_FA * operand_8676,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8676 != NULL) {
    GGS_bitSliceTable  automatic_var_5 ;
    const GGS_registerExpression  _temp_8912 = operand_8676->mRegisterExpression ;
    if (_temp_8912._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_8912._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_8912 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank, automatic_var_5 COMMA_SOURCE_FILE_AT_LINE (260)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@instruction_MOVFF.check'                 *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVFF__check (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVFF * operand_9162,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9162 != NULL) {
    const GGS_registerExpression  _temp_9412 = operand_9162->mSourceRegisterName ;
    if (_temp_9412._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterDeclaration _method = findCategoryMethod__registerExpression__checkRegisterDeclaration (_temp_9412._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_9412 (HERE), var_cas_inRegisterTable COMMA_SOURCE_FILE_AT_LINE (278)) ;
      }
    }
    const GGS_registerExpression  _temp_9485 = operand_9162->mDestinationRegisterName ;
    if (_temp_9485._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterDeclaration _method = findCategoryMethod__registerExpression__checkRegisterDeclaration (_temp_9485._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_9485 (HERE), var_cas_inRegisterTable COMMA_SOURCE_FILE_AT_LINE (279)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Category method '@instruction_FBA.check'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FBA__check (C_Compiler & _inLexique,
                                const cPtr_instruction_FBA * operand_9658,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9658 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    const GGS_registerExpression  _temp_9927 = operand_9658->mRegisterExpression ;
    if (_temp_9927._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_9927._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_9927 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (293)) ;
      }
    }
    const GGS_bitNumberExpression  _temp_10073 = operand_9658->mBitNumber ;
    if (_temp_10073._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__checkBitNumber _method = findCategoryMethod__bitNumberExpression__checkBitNumber (_temp_10073._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_10073 (HERE), var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (299)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Category method '@instruction_JSR.check'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_JSR__check (C_Compiler & _inLexique,
                                const cPtr_instruction_JSR * operand_10234,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10234 != NULL) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    const GGS_routineMap  _temp_10514 = var_cas_inRoutineMap ;
    if (_temp_10514._isBuilt ()) {
      _temp_10514 (HERE)->method_searchKey (_inLexique, operand_10234->mTargetLabel, var_cas_isNoReturn, var_cas_requiredBank COMMA_SOURCE_FILE_AT_LINE (314)) ;
    }
    if ((((var_cas_requiredBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredBank)._operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = (((GGS_string (true, "the routine '"))._operator_concat (operand_10234->mTargetLabel))._operator_concat (GGS_string (true, "' requires BSR to be set to ")))._operator_concat (var_cas_requiredBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (316))) ;
      var_cas_errorMessage.writeString (", but BSR ") ;
      if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString ("does contain any reliable value") ;
      }else{
        var_cas_errorMessage.writeString ("is set to ") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (321))) ;
      }
      operand_10234->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (323)) ;
    }
    if ((var_cas_isNoReturn).isBuiltAndTrue ()) {
      operand_10234->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a \"noreturn\" routine should be called with a BRA, GOTO, Bcc or JUMP instruction") COMMA_SOURCE_FILE_AT_LINE (326)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@instruction_JUMP.check'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_JUMP__check (C_Compiler & _inLexique,
                                const cPtr_instruction_JUMP * operand_11296,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11296 != NULL) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    const GGS_routineMap  _temp_11569 = var_cas_inRoutineMap ;
    if (_temp_11569._isBuilt ()) {
      _temp_11569 (HERE)->method_searchKey (_inLexique, operand_11296->mTargetLabel, var_cas_isNoReturn, var_cas_requiredBank COMMA_SOURCE_FILE_AT_LINE (342)) ;
    }
    if ((((var_cas_requiredBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredBank)._operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = (((GGS_string (true, "the routine '"))._operator_concat (operand_11296->mTargetLabel))._operator_concat (GGS_string (true, "' requires BSR to be set to ")))._operator_concat (var_cas_requiredBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (344))) ;
      var_cas_errorMessage.writeString (", but BSR ") ;
      if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString ("does contain any reliable value") ;
      }else{
        var_cas_errorMessage.writeString ("is set to ") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (349))) ;
      }
      operand_11296->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (351)) ;
    }
    if (((var_cas_isNoReturn)._operator_not ()).isBuiltAndTrue ()) {
      operand_11296->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine should be called with a RCALL, CALL or JSR instruction") COMMA_SOURCE_FILE_AT_LINE (354)) ;
    }
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Category method '@instruction_JUMPCC.check'                 *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_JUMPCC__check (C_Compiler & _inLexique,
                                const cPtr_instruction_JUMPCC * operand_12383,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12383 != NULL) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    const GGS_routineMap  _temp_12663 = var_cas_inRoutineMap ;
    if (_temp_12663._isBuilt ()) {
      _temp_12663 (HERE)->method_searchKey (_inLexique, operand_12383->mTargetLabel, var_cas_isNoReturn, var_cas_requiredBank COMMA_SOURCE_FILE_AT_LINE (371)) ;
    }
    if ((((var_cas_requiredBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredBank)._operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = (((GGS_string (true, "the routine '"))._operator_concat (operand_12383->mTargetLabel))._operator_concat (GGS_string (true, "' requires BSR to be set to ")))._operator_concat (var_cas_requiredBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (373))) ;
      var_cas_errorMessage.writeString (", but BSR ") ;
      if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString ("does contain any reliable value") ;
      }else{
        var_cas_errorMessage.writeString ("is set to ") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (378))) ;
      }
      operand_12383->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (380)) ;
    }
    if (((var_cas_isNoReturn)._operator_not ()).isBuiltAndTrue ()) {
      operand_12383->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine should be called with a RCALL, CALL or JSR instruction") COMMA_SOURCE_FILE_AT_LINE (383)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_literalOperation.check'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_literalOperation__check (C_Compiler & _inLexique,
                                const cPtr_instruction_literalOperation * operand_13452,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13452 != NULL) {
    if (((operand_13452->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (397)))._operator_strictSup (GGS_uint (true, 255U))).isBuiltAndTrue ()) {
      operand_13452->mLiteralValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the literal value ("))._operator_concat (operand_13452->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (398)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (398))))._operator_concat (GGS_string (true, ") should be lower or equal to 255")) COMMA_SOURCE_FILE_AT_LINE (398)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@instruction_LFSR.check'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LFSR__check (C_Compiler & _inLexique,
                                const cPtr_instruction_LFSR * operand_13981,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13981 != NULL) {
    if (((operand_13981->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (412)))._operator_strictSup (GGS_uint (true, 2U))).isBuiltAndTrue ()) {
      operand_13981->mFSRindex.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the LFSR register index ("))._operator_concat (operand_13981->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (413)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (413))))._operator_concat (GGS_string (true, ") should be lower or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (413)) ;
    }
    const GGS_registerExpression  _temp_14387 = operand_13981->mRegisterExpression ;
    if (_temp_14387._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterDeclaration _method = findCategoryMethod__registerExpression__checkRegisterDeclaration (_temp_14387._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_14387 (HERE), var_cas_inRegisterTable COMMA_SOURCE_FILE_AT_LINE (415)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@instruction_MOVAW.check'                 *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVAW__check (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVAW * operand_14562,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14562 != NULL) {
    const GGS_registerExpression  _temp_14812 = operand_14562->mRegisterExpression ;
    if (_temp_14812._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 _method = findCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 (_temp_14812._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_14812 (HERE), var_cas_inRegisterTable COMMA_SOURCE_FILE_AT_LINE (428)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@instruction_computed_retlw.check'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_retlw__check (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_retlw * operand_15018,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15018 != NULL) {
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      operand_15018->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a \"noreturn\" routine does not accept computed retlw instruction") COMMA_SOURCE_FILE_AT_LINE (445)) ;
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_15018->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "an interrupt routine does not accept computed retlw instruction") COMMA_SOURCE_FILE_AT_LINE (447)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@instruction_MNOP.check'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MNOP__check (C_Compiler & _inLexique,
                                const cPtr_instruction_MNOP * operand_15720,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15720 != NULL) {
    if (((operand_15720->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (461)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      operand_15720->mOccurrenceFactor.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "occurrence argument is zero: no generated code") COMMA_SOURCE_FILE_AT_LINE (462)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@instruction_computed_bra.check'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_bra__check (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_bra * operand_16223,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16223 != NULL) {
    {
      GGS_lstringlist::cEnumerator enumerator_16439 (operand_16223->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_16439 = NULL ;
      while (((operand_16439 = enumerator_16439.nextObject ()))) {
        macroValidPointer (operand_16439) ;
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        const GGS_routineMap  _temp_16522 = var_cas_inRoutineMap ;
        if (_temp_16522._isBuilt ()) {
          _temp_16522 (HERE)->method_searchKey (_inLexique, operand_16439->mValue, var_cas_isNoReturn, var_cas_requiredBank COMMA_SOURCE_FILE_AT_LINE (479)) ;
        }
        if ((((var_cas_requiredBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredBank)._operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
          GGS_string var_cas_errorMessage ;
          var_cas_errorMessage = (((GGS_string (true, "the routine '"))._operator_concat (operand_16439->mValue))._operator_concat (GGS_string (true, "' requires BSR to be set to ")))._operator_concat (var_cas_requiredBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (481))) ;
          var_cas_errorMessage.writeString (", but BSR ") ;
          if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
            var_cas_errorMessage.writeString ("does contain any reliable value") ;
          }else{
            var_cas_errorMessage.writeString ("is set to ") ;
            var_cas_errorMessage._dotAssign_operation (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (486))) ;
          }
          operand_16439->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (488)) ;
        }
        if (((var_cas_isNoReturn)._operator_not ()).isBuiltAndTrue ()) {
          operand_16439->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "for being named in a computed bra, the '"))._operator_concat (operand_16439->mValue))._operator_concat (GGS_string (true, "' routine should be declared with the \"noreturn\" qualifier")) COMMA_SOURCE_FILE_AT_LINE (491)) ;
        }
      }
    }
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      operand_16223->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine does not accept computed bra instruction") COMMA_SOURCE_FILE_AT_LINE (497)) ;
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_16223->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "an interrupt routine does not accept computed bra instruction") COMMA_SOURCE_FILE_AT_LINE (500)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@instruction_computed_goto.check'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_goto__check (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_goto * operand_17711,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17711 != NULL) {
    {
      GGS_lstringlist::cEnumerator enumerator_17927 (operand_17711->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_17927 = NULL ;
      while (((operand_17927 = enumerator_17927.nextObject ()))) {
        macroValidPointer (operand_17927) ;
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        const GGS_routineMap  _temp_18010 = var_cas_inRoutineMap ;
        if (_temp_18010._isBuilt ()) {
          _temp_18010 (HERE)->method_searchKey (_inLexique, operand_17927->mValue, var_cas_isNoReturn, var_cas_requiredBank COMMA_SOURCE_FILE_AT_LINE (517)) ;
        }
        if ((((var_cas_requiredBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredBank)._operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
          GGS_string var_cas_errorMessage ;
          var_cas_errorMessage = (((GGS_string (true, "the routine '"))._operator_concat (operand_17927->mValue))._operator_concat (GGS_string (true, "' requires BSR to be set to ")))._operator_concat (var_cas_requiredBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (519))) ;
          var_cas_errorMessage.writeString (", but BSR ") ;
          if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
            var_cas_errorMessage.writeString ("does contain any reliable value") ;
          }else{
            var_cas_errorMessage.writeString ("is set to ") ;
            var_cas_errorMessage._dotAssign_operation (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (524))) ;
          }
          operand_17927->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (526)) ;
        }
        if (((var_cas_isNoReturn)._operator_not ()).isBuiltAndTrue ()) {
          operand_17927->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "for being named in a computed goto, the '"))._operator_concat (operand_17927->mValue))._operator_concat (GGS_string (true, "' routine should be declared with the \"noreturn\" qualifier")) COMMA_SOURCE_FILE_AT_LINE (529)) ;
        }
      }
    }
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      operand_17711->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine does not accept computed goto instruction") COMMA_SOURCE_FILE_AT_LINE (535)) ;
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_17711->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "an interrupt routine does not accept computed goto instruction") COMMA_SOURCE_FILE_AT_LINE (538)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Category method '@instruction_FOREVER.check'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FOREVER__check (C_Compiler & _inLexique,
                                const cPtr_instruction_FOREVER * operand_19196,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19196 != NULL) {
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      operand_19196->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine does not accept the \"forever\" instruction") COMMA_SOURCE_FILE_AT_LINE (554)) ;
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_19196->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "an interrupt routine does not accept the \"forever\" instruction") COMMA_SOURCE_FILE_AT_LINE (557)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
    GGS_uint  var_cas_finalBank ;
    var_cas_finalBank = var_cas_ioCurrentBank ;
    ::routine_checkInstructionList (_inLexique,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_finalBank,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind,  operand_19196->mInstructionList COMMA_SOURCE_FILE_AT_LINE (560)) ;
    if (((var_cas_ioCurrentBank)._operator_isNotEqual (var_cas_finalBank)).isBuiltAndTrue ()) {
      operand_19196->mEndOfInstructionList.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "instruction list does not leave BSR value unchanged") COMMA_SOURCE_FILE_AT_LINE (571)) ;
    }
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_IF_FA_SEMI_COLON.check'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_FA_SEMI_COLON__check (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_FA_SEMI_COLON * operand_20284,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20284 != NULL) {
    GGS_bitSliceTable  automatic_var_6 ;
    const GGS_registerExpression  _temp_20506 = operand_20284->mRegisterExpression ;
    if (_temp_20506._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_20506._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_20506 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank, automatic_var_6 COMMA_SOURCE_FILE_AT_LINE (587)) ;
      }
    }
    GGS_bool var_cas_unusedContinuesInSequence ;
    var_cas_unusedContinuesInSequence = GGS_bool (true, true) ;
    const GGS_piccolo_instruction  _temp_20718 = operand_20284->mInstruction ;
    if (_temp_20718._isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__check _method = findCategoryMethod__piccolo_instruction__check (_temp_20718._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_20718 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_ioCurrentBank, var_cas_unusedContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (595)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@instruction_IF_BitTest.check'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_BitTest__check (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_BitTest * operand_21004,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21004 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    const GGS_registerExpression  _temp_21259 = operand_21004->mRegisterExpression ;
    if (_temp_21259._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_21259._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_21259 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (616)) ;
      }
    }
    const GGS_bitNumberExpression  _temp_21405 = operand_21004->mBitNumber ;
    if (_temp_21405._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__checkBitNumber _method = findCategoryMethod__bitNumberExpression__checkBitNumber (_temp_21405._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_21405 (HERE), var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (622)) ;
      }
    }
    GGS_bool var_cas_unusedContinuesInSequence ;
    var_cas_unusedContinuesInSequence = GGS_bool (true, true) ;
    const GGS_piccolo_instruction  _temp_21530 = operand_21004->mInstruction ;
    if (_temp_21530._isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__check _method = findCategoryMethod__piccolo_instruction__check (_temp_21530._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_21530 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_ioCurrentBank, var_cas_unusedContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (625)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Virtual Table for category method '@conditionExpression.checkCondition'   *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__conditionExpression__checkCondition> gDispatchTableFor__conditionExpression__checkCondition ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__conditionExpression__checkCondition (typeCategoryMethod__conditionExpression__checkCondition inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__conditionExpression__checkCondition.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__conditionExpression__checkCondition
findCategoryMethod__conditionExpression__checkCondition (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__conditionExpression__checkCondition result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__conditionExpression__checkCondition.count ()) {
    result = gDispatchTableFor__conditionExpression__checkCondition (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__conditionExpression__checkCondition (superClassPtr) ;
      gDispatchTableFor__conditionExpression__checkCondition.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@bcc_in_structured_if_condition.checkCondition'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bcc_in_structured_if_condition__checkCondition (C_Compiler &,
                                const cPtr_bcc_in_structured_if_condition * operand_22052,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioCurrentBank */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22052 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@registerComparisonCondition.checkCondition'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerComparisonCondition__checkCondition (C_Compiler & _inLexique,
                                const cPtr_registerComparisonCondition * operand_22322,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22322 != NULL) {
    GGS_bitSliceTable  automatic_var_7 ;
    const GGS_registerExpression  _temp_22454 = operand_22322->mRegisterExpression ;
    if (_temp_22454._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_22454._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_22454 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank, automatic_var_7 COMMA_SOURCE_FILE_AT_LINE (659)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@incDecRegisterInCondition.checkCondition'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__incDecRegisterInCondition__checkCondition (C_Compiler & _inLexique,
                                const cPtr_incDecRegisterInCondition * operand_22712,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22712 != NULL) {
    GGS_bitSliceTable  automatic_var_8 ;
    const GGS_registerExpression  _temp_22844 = operand_22712->mRegisterExpression ;
    if (_temp_22844._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_22844._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_22844 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (674)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@registerTestCondition.checkCondition'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerTestCondition__checkCondition (C_Compiler & _inLexique,
                                const cPtr_registerTestCondition * operand_23098,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23098 != NULL) {
    GGS_bitSliceTable  automatic_var_9 ;
    const GGS_registerExpression  _temp_23230 = operand_23098->mRegisterExpression ;
    if (_temp_23230._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_23230._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_23230 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (689)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@negateCondition.checkCondition'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__negateCondition__checkCondition (C_Compiler & _inLexique,
                                const cPtr_negateCondition * operand_23478,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23478 != NULL) {
    const GGS_conditionExpression  _temp_23601 = operand_23478->mCondition ;
    if (_temp_23601._isBuilt ()) {
      typeCategoryMethod__conditionExpression__checkCondition _method = findCategoryMethod__conditionExpression__checkCondition (_temp_23601._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_23601 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank COMMA_SOURCE_FILE_AT_LINE (704)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@andCondition.checkCondition'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__andCondition__checkCondition (C_Compiler & _inLexique,
                                const cPtr_andCondition * operand_23817,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23817 != NULL) {
    const GGS_conditionExpression  _temp_23945 = operand_23817->mLeftExpression ;
    if (_temp_23945._isBuilt ()) {
      typeCategoryMethod__conditionExpression__checkCondition _method = findCategoryMethod__conditionExpression__checkCondition (_temp_23945._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_23945 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank COMMA_SOURCE_FILE_AT_LINE (718)) ;
      }
    }
    const GGS_conditionExpression  _temp_24056 = operand_23817->mRightExpression ;
    if (_temp_24056._isBuilt ()) {
      typeCategoryMethod__conditionExpression__checkCondition _method = findCategoryMethod__conditionExpression__checkCondition (_temp_24056._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_24056 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank COMMA_SOURCE_FILE_AT_LINE (723)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@bitTest_in_structured_if_condition.checkCondition'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitTest_in_structured_if_condition__checkCondition (C_Compiler & _inLexique,
                                const cPtr_bitTest_in_structured_if_condition * operand_24294,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24294 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    const GGS_registerExpression  _temp_24459 = operand_24294->mRegisterExpression ;
    if (_temp_24459._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_24459._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_24459 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (738)) ;
      }
    }
    const GGS_bitNumberExpression  _temp_24605 = operand_24294->mBitNumber ;
    if (_temp_24605._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__checkBitNumber _method = findCategoryMethod__bitNumberExpression__checkBitNumber (_temp_24605._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_24605 (HERE), var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (744)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@instruction_structured_if.check'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_structured_if__check (C_Compiler & _inLexique,
                                const cPtr_instruction_structured_if * operand_24776,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24776 != NULL) {
    const GGS_conditionExpression  _temp_25005 = operand_24776->mIfCondition ;
    if (_temp_25005._isBuilt ()) {
      typeCategoryMethod__conditionExpression__checkCondition _method = findCategoryMethod__conditionExpression__checkCondition (_temp_25005._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_25005 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank COMMA_SOURCE_FILE_AT_LINE (758)) ;
      }
    }
    GGS_uint  var_cas_finalBank ;
    var_cas_finalBank = var_cas_ioCurrentBank ;
    ::routine_checkInstructionList (_inLexique,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_finalBank,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind,  operand_24776->mThenInstructionList COMMA_SOURCE_FILE_AT_LINE (764)) ;
    {
      GGS_partList::cEnumerator enumerator_25370 (operand_24776->mElsifPartList, true) ;
      const GGS_partList::cElement * operand_25370 = NULL ;
      while (((operand_25370 = enumerator_25370.nextObject ()))) {
        macroValidPointer (operand_25370) ;
        const GGS_conditionExpression  _temp_25404 = operand_25370->mCondition ;
        if (_temp_25404._isBuilt ()) {
          typeCategoryMethod__conditionExpression__checkCondition _method = findCategoryMethod__conditionExpression__checkCondition (_temp_25404._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_25404 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank COMMA_SOURCE_FILE_AT_LINE (776)) ;
          }
        }
        GGS_bool var_cas_continuesInSequence ;
        GGS_uint  var_cas_elsifPartCurrentBank ;
        var_cas_elsifPartCurrentBank = var_cas_ioCurrentBank ;
        ::routine_checkInstructionList (_inLexique,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_elsifPartCurrentBank,  var_cas_continuesInSequence,  var_cas_inRoutineKind,  operand_25370->mInstructionList COMMA_SOURCE_FILE_AT_LINE (782)) ;
        if (((var_cas_elsifPartCurrentBank)._operator_isNotEqual (var_cas_finalBank)).isBuiltAndTrue ()) {
          operand_25370->mEndOfPartLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "This branch does not leave BSR value as the first one does") COMMA_SOURCE_FILE_AT_LINE (793)) ;
        }
        var_cas_ioContinuesInSequence = (var_cas_ioContinuesInSequence)._operator_or (var_cas_continuesInSequence) ;
      }
    }
    GGS_bool var_cas_continuesInSequence ;
    GGS_uint  var_cas_elsePartCurrentBank ;
    var_cas_elsePartCurrentBank = var_cas_ioCurrentBank ;
    ::routine_checkInstructionList (_inLexique,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_elsePartCurrentBank,  var_cas_continuesInSequence,  var_cas_inRoutineKind,  operand_24776->mElseInstructionList COMMA_SOURCE_FILE_AT_LINE (799)) ;
    if (((var_cas_elsePartCurrentBank)._operator_isNotEqual (var_cas_finalBank)).isBuiltAndTrue ()) {
      operand_24776->mEndOfElsePartLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "This branch does not leave BSR value as the first one does") COMMA_SOURCE_FILE_AT_LINE (810)) ;
    }
    var_cas_ioContinuesInSequence = (var_cas_ioContinuesInSequence)._operator_or (var_cas_continuesInSequence) ;
    var_cas_ioCurrentBank = var_cas_finalBank ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@instruction_do_while.check'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_do_while__check (C_Compiler & _inLexique,
                                const cPtr_instruction_do_while * operand_26718,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_26718 != NULL) {
    GGS_uint  var_cas_finalBank ;
    var_cas_finalBank = var_cas_ioCurrentBank ;
    ::routine_checkInstructionList (_inLexique,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_finalBank,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind,  operand_26718->mRepeatedInstructionList COMMA_SOURCE_FILE_AT_LINE (828)) ;
    if (((var_cas_ioCurrentBank)._operator_isNotEqual (var_cas_finalBank)).isBuiltAndTrue ()) {
      operand_26718->mEndOfRepeatedInstructionList.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "This branch does not leave BSR value unchanged") COMMA_SOURCE_FILE_AT_LINE (839)) ;
    }
    {
      GGS_partList::cEnumerator enumerator_27326 (operand_26718->mWhilePartList, true) ;
      const GGS_partList::cElement * operand_27326 = NULL ;
      while (((operand_27326 = enumerator_27326.nextObject ()))) {
        macroValidPointer (operand_27326) ;
        const GGS_conditionExpression  _temp_27360 = operand_27326->mCondition ;
        if (_temp_27360._isBuilt ()) {
          typeCategoryMethod__conditionExpression__checkCondition _method = findCategoryMethod__conditionExpression__checkCondition (_temp_27360._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_27360 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank COMMA_SOURCE_FILE_AT_LINE (843)) ;
          }
        }
        GGS_uint  var_cas_bank ;
        var_cas_bank = var_cas_ioCurrentBank ;
        ::routine_checkInstructionList (_inLexique,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_bank,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind,  operand_27326->mInstructionList COMMA_SOURCE_FILE_AT_LINE (848)) ;
        if (((var_cas_ioCurrentBank)._operator_isNotEqual (var_cas_bank)).isBuiltAndTrue ()) {
          operand_27326->mEndOfPartLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "This branch does not leave BSR value unchanged") COMMA_SOURCE_FILE_AT_LINE (859)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@instruction_IF_IncDec.check'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_IncDec__check (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_IncDec * operand_27963,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_27963 != NULL) {
    GGS_bitSliceTable  automatic_var_10 ;
    const GGS_registerExpression  _temp_28185 = operand_27963->mRegisterExpression ;
    if (_temp_28185._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_28185._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_28185 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (874)) ;
      }
    }
    GGS_bool var_cas_unusedContinuesInSequence ;
    var_cas_unusedContinuesInSequence = GGS_bool (true, true) ;
    const GGS_piccolo_instruction  _temp_28397 = operand_27963->mInstruction ;
    if (_temp_28397._isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__check _method = findCategoryMethod__piccolo_instruction__check (_temp_28397._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_28397 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_ioCurrentBank, var_cas_unusedContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (882)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "semanticsCheckings"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_semanticsCheckings (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_piccoloModel  var_cas_inPiccoloModel,
                                const GGS_bool  /* var_cas_inHasHighInterrupt */,
                                const GGS_bool  /* var_cas_inHasLowInterrupt */,
                                GGS_string & /* var_cas_ioListFileContents */ COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_semanticsCheckings at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_routineMap  var_cas_routineMap ;
  var_cas_routineMap = GGS_routineMap ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_routineDefinitionList::cEnumerator enumerator_28982 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (904)), true) ;
    const GGS_routineDefinitionList::cElement * operand_28982 = NULL ;
    while (((operand_28982 = enumerator_28982.nextObject ()))) {
      macroValidPointer (operand_28982) ;
      var_cas_routineMap.modifier_insertKey (_inLexique, operand_28982->mRoutineName, operand_28982->mIsNoReturn, operand_28982->mBanksel.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (905)) COMMA_SOURCE_FILE_AT_LINE (905)) ;
    }
  }
  if ((var_cas_routineMap.reader_hasKey (_inLexique, GGS_string (true, "main") COMMA_SOURCE_FILE_AT_LINE (908))).isBuiltAndTrue ()) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    const GGS_routineMap  _temp_29289 = var_cas_routineMap ;
    if (_temp_29289._isBuilt ()) {
      _temp_29289 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "main"), GGS_location (_inLexique) COMMA_HERE), var_cas_isNoReturn, var_cas_requiredBank COMMA_SOURCE_FILE_AT_LINE (911)) ;
    }
    if (((var_cas_isNoReturn)._operator_not ()).isBuiltAndTrue ()) {
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the \"main\" should be declared with \"noreturn\" qualifier: \"noreturn main requiresbank 0\"") COMMA_SOURCE_FILE_AT_LINE (913)) ;
    }
    if (((var_cas_requiredBank)._operator_isNotEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the \"main\" should be declared with \"requiresbank 0\" qualifier: \"noreturn main requiresbank 0\"") COMMA_SOURCE_FILE_AT_LINE (916)) ;
    }
  }else{
    var_cas_inPiccoloModel.reader_mEndOfProgram (_inLexique COMMA_SOURCE_FILE_AT_LINE (919)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the program should declare the \"main\" routine") COMMA_SOURCE_FILE_AT_LINE (919)) ;
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_29850 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (922)), true) ;
    const GGS_routineDefinitionList::cElement * operand_29850 = NULL ;
    while (((operand_29850 = enumerator_29850.nextObject ()))) {
      macroValidPointer (operand_29850) ;
      GGS_bool var_cas_continuesInSequence ;
      var_cas_continuesInSequence = GGS_bool (true, true) ;
      GGS_uint  var_cas_currentBank ;
      var_cas_currentBank = operand_29850->mBanksel.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (924)) ;
      GGS_routineKind var_cas_routineKind ;
      if ((operand_29850->mIsNoReturn).isBuiltAndTrue ()) {
        var_cas_routineKind = GGS_routineKind::constructor_noReturnRoutine (_inLexique COMMA_HERE) ;
      }else{
        var_cas_routineKind = GGS_routineKind::constructor_regularRoutine (_inLexique COMMA_HERE) ;
      }
      {
        GGS_instructionList::cEnumerator enumerator_30172 (operand_29850->mInstructionList, true) ;
        const GGS_instructionList::cElement * operand_30172 = NULL ;
        while (((operand_30172 = enumerator_30172.nextObject ()))) {
          macroValidPointer (operand_30172) ;
          if (((var_cas_continuesInSequence)._operator_not ()).isBuiltAndTrue ()) {
            operand_30172->mInstruction.reader_mInstructionLocation (_inLexique COMMA_SOURCE_FILE_AT_LINE (933)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unreachable code") COMMA_SOURCE_FILE_AT_LINE (933)) ;
            var_cas_continuesInSequence = GGS_bool (true, true) ;
          }
          const GGS_piccolo_instruction  _temp_30376 = operand_30172->mInstruction ;
          if (_temp_30376._isBuilt ()) {
            typeCategoryMethod__piccolo_instruction__check _method = findCategoryMethod__piccolo_instruction__check (_temp_30376._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_30376 (HERE), var_cas_inAccessBankSplitOffset, var_cas_routineMap, var_cas_inRegisterTable, var_cas_currentBank, var_cas_continuesInSequence, var_cas_routineKind COMMA_SOURCE_FILE_AT_LINE (936)) ;
            }
          }
        }
      }
      if (((((operand_29850->mBanksel.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (945)))._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_currentBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))))._operator_and ((operand_29850->mIsNoReturn)._operator_not ())).isBuiltAndTrue ()) {
        operand_29850->mEndOfRoutineLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "execution will change BSR contents") COMMA_SOURCE_FILE_AT_LINE (946)) ;
      }
      if (((((operand_29850->mBanksel.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (948)))._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_currentBank)._operator_isNotEqual (operand_29850->mBanksel.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (948)))))._operator_and ((operand_29850->mIsNoReturn)._operator_not ())).isBuiltAndTrue ()) {
        operand_29850->mEndOfRoutineLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "execution will change BSR contents") COMMA_SOURCE_FILE_AT_LINE (949)) ;
      }
      if (((operand_29850->mIsNoReturn)._operator_and (var_cas_continuesInSequence)).isBuiltAndTrue ()) {
        operand_29850->mEndOfRoutineLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "execution should not reach the end of a \"noreturn\" routine") COMMA_SOURCE_FILE_AT_LINE (952)) ;
      }
    }
  }
  {
    GGS_interruptDefinitionList::cEnumerator enumerator_31164 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (956)), true) ;
    const GGS_interruptDefinitionList::cElement * operand_31164 = NULL ;
    while (((operand_31164 = enumerator_31164.nextObject ()))) {
      macroValidPointer (operand_31164) ;
      GGS_bool var_cas_continuesInSequence ;
      var_cas_continuesInSequence = GGS_bool (true, true) ;
      GGS_uint  var_cas_currentBank ;
      var_cas_currentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
      {
        GGS_instructionList::cEnumerator enumerator_31301 (operand_31164->mInstructionList, true) ;
        const GGS_instructionList::cElement * operand_31301 = NULL ;
        while (((operand_31301 = enumerator_31301.nextObject ()))) {
          macroValidPointer (operand_31301) ;
          if (((var_cas_continuesInSequence)._operator_not ()).isBuiltAndTrue ()) {
            operand_31301->mInstruction.reader_mInstructionLocation (_inLexique COMMA_SOURCE_FILE_AT_LINE (961)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unreachable code") COMMA_SOURCE_FILE_AT_LINE (961)) ;
            var_cas_continuesInSequence = GGS_bool (true, true) ;
          }
          const GGS_piccolo_instruction  _temp_31505 = operand_31301->mInstruction ;
          if (_temp_31505._isBuilt ()) {
            typeCategoryMethod__piccolo_instruction__check _method = findCategoryMethod__piccolo_instruction__check (_temp_31505._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_31505 (HERE), var_cas_inAccessBankSplitOffset, var_cas_routineMap, var_cas_inRegisterTable, var_cas_currentBank, var_cas_continuesInSequence, GGS_routineKind::constructor_interruptRoutine (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (964)) ;
            }
          }
        }
      }
      if (((var_cas_continuesInSequence)._operator_not ()).isBuiltAndTrue ()) {
        operand_31164->mEndOfInterruptLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "execution cannot reach the end of the interrupt routine") COMMA_SOURCE_FILE_AT_LINE (974)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_semanticsCheckings\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticsCheckings (void) {
 enterCategoryMethod__bitNumberExpression__checkBitNumber ((typeCategoryMethod__bitNumberExpression__checkBitNumber) category_method__bitNumberLiteralValue__checkBitNumber, gClassInfoFor__bitNumberLiteralValue.slotID ()) ;
 enterCategoryMethod__bitNumberExpression__checkBitNumber ((typeCategoryMethod__bitNumberExpression__checkBitNumber) category_method__bitNumberLabelValue__checkBitNumber, gClassInfoFor__bitNumberLabelValue.slotID ()) ;
 enterCategoryMethod__registerExpression__checkRegisterDeclaration (category_method__registerExpression__checkRegisterDeclaration, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 (category_method__registerExpression__checkRegisterDeclarationAndAddressLowerThan256, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (category_method__registerExpression__checkRegisterAddressingAndBankAccess, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check (category_method__piccolo_instruction__check, gClassInfoFor__piccolo_instruction.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_nobanksel__check, gClassInfoFor__instruction_nobanksel.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_banksel__check, gClassInfoFor__instruction_banksel.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_savebank__check, gClassInfoFor__instruction_savebank.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_FDA__check, gClassInfoFor__instruction_FDA.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_FA__check, gClassInfoFor__instruction_FA.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_MOVFF__check, gClassInfoFor__instruction_MOVFF.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_FBA__check, gClassInfoFor__instruction_FBA.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_JSR__check, gClassInfoFor__instruction_JSR.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_JUMP__check, gClassInfoFor__instruction_JUMP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_JUMPCC__check, gClassInfoFor__instruction_JUMPCC.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_literalOperation__check, gClassInfoFor__instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_LFSR__check, gClassInfoFor__instruction_LFSR.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_MOVAW__check, gClassInfoFor__instruction_MOVAW.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_computed_retlw__check, gClassInfoFor__instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_MNOP__check, gClassInfoFor__instruction_MNOP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_computed_bra__check, gClassInfoFor__instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_computed_goto__check, gClassInfoFor__instruction_computed_goto.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_FOREVER__check, gClassInfoFor__instruction_FOREVER.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_IF_FA_SEMI_COLON__check, gClassInfoFor__instruction_IF_FA_SEMI_COLON.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_IF_BitTest__check, gClassInfoFor__instruction_IF_BitTest.slotID ()) ;
 enterCategoryMethod__conditionExpression__checkCondition ((typeCategoryMethod__conditionExpression__checkCondition) category_method__bcc_in_structured_if_condition__checkCondition, gClassInfoFor__bcc_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__conditionExpression__checkCondition ((typeCategoryMethod__conditionExpression__checkCondition) category_method__registerComparisonCondition__checkCondition, gClassInfoFor__registerComparisonCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__checkCondition ((typeCategoryMethod__conditionExpression__checkCondition) category_method__incDecRegisterInCondition__checkCondition, gClassInfoFor__incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__checkCondition ((typeCategoryMethod__conditionExpression__checkCondition) category_method__registerTestCondition__checkCondition, gClassInfoFor__registerTestCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__checkCondition ((typeCategoryMethod__conditionExpression__checkCondition) category_method__negateCondition__checkCondition, gClassInfoFor__negateCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__checkCondition ((typeCategoryMethod__conditionExpression__checkCondition) category_method__andCondition__checkCondition, gClassInfoFor__andCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__checkCondition ((typeCategoryMethod__conditionExpression__checkCondition) category_method__bitTest_in_structured_if_condition__checkCondition, gClassInfoFor__bitTest_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_structured_if__check, gClassInfoFor__instruction_structured_if.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_do_while__check, gClassInfoFor__instruction_do_while.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_IF_IncDec__check, gClassInfoFor__instruction_IF_IncDec.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_semanticsCheckings (prologueRoutineFor_semanticsCheckings,
                                   NULL) ;

//---------------------------------------------------------------------------*

