//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'semanticsCheckings.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       august 1st, 2008, at 22h1'3"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "semanticsCheckings.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticsCheckings.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                           class 'e_routineMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_routineMap::e_routineMap (void) :
mIsNoReturn (),
mRequiredBank (),
mReturnedBank (),
mPreservesBank () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@routineMap'                           *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_routineMap::
elementOf_GGS_routineMap (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_routineMap & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_routineMap::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mIsNoReturn.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mRequiredBank.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mReturnedBank.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mPreservesBank.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_routineMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_routineMap * _p = dynamic_cast <const elementOf_GGS_routineMap *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.mIsNoReturn._operator_isEqual (_p->mInfo.mIsNoReturn)).boolValue ()
           && (mInfo.mRequiredBank._operator_isEqual (_p->mInfo.mRequiredBank)).boolValue ()
           && (mInfo.mReturnedBank._operator_isEqual (_p->mInfo.mReturnedBank)).boolValue ()
           && (mInfo.mPreservesBank._operator_isEqual (_p->mInfo.mPreservesBank)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_routineMap::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_routineMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_routineMap * info = (e_routineMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_routineMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_routineMap * info = (e_routineMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_routineMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineMap::
_operator_isEqual (const GGS_routineMap & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineMap::
_operator_isNotEqual (const GGS_routineMap & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_bool& inParameter0,
                const GGS_uint & inParameter1,
                const GGS_uint & inParameter2,
                const GGS_bool& inParameter3,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inParameter1._isBuilt ()
   && inParameter2._isBuilt ()
   && inParameter3._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_routineMap info  ;
    info.mIsNoReturn = inParameter0 ;
    info.mRequiredBank = inParameter1 ;
    info.mReturnedBank = inParameter2 ;
    info.mPreservesBank = inParameter3 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_bool  & outParameter0,
               GGS_uint   & outParameter1,
               GGS_uint   & outParameter2,
               GGS_bool  & outParameter3,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    outParameter1._drop () ;
    outParameter2._drop () ;
    outParameter3._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mIsNoReturn ;
    outParameter1 = node->mInfo.mRequiredBank ;
    outParameter2 = node->mInfo.mReturnedBank ;
    outParameter3 = node->mInfo.mPreservesBank ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
modifier_setMIsNoReturnForKey (C_Compiler & inLexique,
                        const GGS_bool& inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMIsNoReturnForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mIsNoReturn = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
modifier_setMRequiredBankForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMRequiredBankForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mRequiredBank = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
modifier_setMReturnedBankForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMReturnedBankForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mReturnedBank = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
modifier_setMPreservesBankForKey (C_Compiler & inLexique,
                        const GGS_bool& inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMPreservesBankForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mPreservesBank = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_bool  & outParameter0,
                                GGS_uint   & outParameter1,
                                GGS_uint   & outParameter2,
                                GGS_bool  & outParameter3 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "the '%K' routine is not declared",
                  inKey,
                  outParameter0,
                  outParameter1,
                  outParameter2,
                  outParameter3,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
modifier_insertKey (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_bool& inParameter0,
                                const GGS_uint & inParameter1,
                                const GGS_uint & inParameter2,
                                const GGS_bool& inParameter3 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "the '%K' routine is already declared in %L",
                 inKey,
                 inParameter0,
                 inParameter1,
                 inParameter2,
                 inParameter3,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_routineMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_routineMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_routineMap::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @routineMap " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_bool & GGS_routineMap::cEnumerator::_mIsNoReturn (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mIsNoReturn ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_routineMap::cEnumerator::_mRequiredBank (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRequiredBank ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_routineMap::cEnumerator::_mReturnedBank (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mReturnedBank ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_bool & GGS_routineMap::cEnumerator::_mPreservesBank (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mPreservesBank ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// Virtual Table for category method '@bitNumberExpression.checkBitNumber'   *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__bitNumberExpression__checkBitNumber> gDispatchTableFor__bitNumberExpression__checkBitNumber ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__bitNumberExpression__checkBitNumber (typeCategoryMethod__bitNumberExpression__checkBitNumber inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__bitNumberExpression__checkBitNumber.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__bitNumberExpression__checkBitNumber
findCategoryMethod__bitNumberExpression__checkBitNumber (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__bitNumberExpression__checkBitNumber result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__bitNumberExpression__checkBitNumber.count ()) {
    result = gDispatchTableFor__bitNumberExpression__checkBitNumber (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__bitNumberExpression__checkBitNumber (superClassPtr) ;
      gDispatchTableFor__bitNumberExpression__checkBitNumber.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@bitNumberLiteralValue.checkBitNumber'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLiteralValue__checkBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLiteralValue * operand_1173,
                                const GGS_bitSliceTable   /* var_cas_inBitSliceTable */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1173 != NULL) {
    if (((operand_1173->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (32)))._operator_strictSup (GGS_uint (true, 7U))).isBuiltAndTrue ()) {
      operand_1173->mBitNumberLiteralValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "The bit number is "))._operator_concat (operand_1173->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (33)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (33))))._operator_concat (GGS_string (true, " (should be <= 7)")) COMMA_SOURCE_FILE_AT_LINE (33)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@bitNumberLabelValue.checkBitNumber'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLabelValue__checkBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLabelValue * operand_1537,
                                const GGS_bitSliceTable   var_cas_inBitSliceTable
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1537 != NULL) {
    GGS_uint  var_cas_sliceIndex ;
    GGS_uint  var_cas_sliceSize ;
    const GGS_bitSliceTable  _temp_1648 = var_cas_inBitSliceTable ;
    if (_temp_1648._isBuilt ()) {
      _temp_1648 (HERE)->method_searchKey (_inLexique, operand_1537->mBitNumberLabelValue, var_cas_sliceIndex, var_cas_sliceSize COMMA_SOURCE_FILE_AT_LINE (44)) ;
    }
    if (((operand_1537->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (45)))._operator_strictSup (var_cas_sliceSize)).isBuiltAndTrue ()) {
      operand_1537->mBitNumberIndexValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "The "))._operator_concat (operand_1537->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (46)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (46))))._operator_concat (GGS_string (true, " index is too large (should be < ")))._operator_concat (var_cas_sliceSize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (47))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (47)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@registerExpression.checkRegisterDeclaration'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__checkRegisterDeclaration (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_2197,
                                const GGS_registerTable   var_cas_inRegisterTable
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2197 != NULL) {
    GGS_uint  var_cas_size ;
    GGS_uintlist  automatic_var_0 ;
    GGS_bitSliceTable  automatic_var_1 ;
    const GGS_registerTable  _temp_2298 = var_cas_inRegisterTable ;
    if (_temp_2298._isBuilt ()) {
      _temp_2298 (HERE)->method_searchKey (_inLexique, operand_2197->mRegisterName, automatic_var_0, var_cas_size, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (60)) ;
    }
    if (((operand_2197->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (62)))._operator_supOrEqual (var_cas_size)).isBuiltAndTrue ()) {
      operand_2197->mOffset.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "index ("))._operator_concat (operand_2197->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (63)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (63))))._operator_concat (GGS_string (true, ") should be lower than size (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (63))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (63)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@registerExpression.checkRegisterDeclaration'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__checkRegisterDeclaration> gDispatchTableFor__registerExpression__checkRegisterDeclaration ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__checkRegisterDeclaration (typeCategoryMethod__registerExpression__checkRegisterDeclaration inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__checkRegisterDeclaration.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__checkRegisterDeclaration
findCategoryMethod__registerExpression__checkRegisterDeclaration (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__checkRegisterDeclaration result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__checkRegisterDeclaration.count ()) {
    result = gDispatchTableFor__registerExpression__checkRegisterDeclaration (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__checkRegisterDeclaration (superClassPtr) ;
      gDispatchTableFor__registerExpression__checkRegisterDeclaration.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerExpression.checkRegisterDeclarationAndAddressLowerThan256'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_2632,
                                const GGS_registerTable   var_cas_inRegisterTable
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2632 != NULL) {
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  automatic_var_2 ;
    GGS_bitSliceTable  automatic_var_3 ;
    const GGS_registerTable  _temp_2791 = var_cas_inRegisterTable ;
    if (_temp_2791._isBuilt ()) {
      _temp_2791 (HERE)->method_searchKey (_inLexique, operand_2632->mRegisterName, var_cas_registerAddressList, automatic_var_2, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (74)) ;
    }
    GGS_bool var_cas_found ;
    var_cas_found = GGS_bool (true, false) ;
    {
      GGS_uintlist::cEnumerator enumerator_2922 (var_cas_registerAddressList, true) ;
      const GGS_uintlist::cElement * operand_2922 = NULL ;
      while (((operand_2922 = enumerator_2922.nextObject ()))
          && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_2922) ;
        var_cas_found = (operand_2922->mValue._add_operation (_inLexique, operand_2632->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (78)) COMMA_SOURCE_FILE_AT_LINE (78)))._operator_strictInf (GGS_uint (true, 256U)) ;
      }
    }
    if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
      operand_2632->mRegisterName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the register '"))._operator_concat (operand_2632->mRegisterName))._operator_concat (GGS_string (true, "' should be should have an address < 256")) COMMA_SOURCE_FILE_AT_LINE (81)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@registerExpression.checkRegisterDeclarationAndAddressLowerThan256'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256> gDispatchTableFor__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 (typeCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__checkRegisterDeclarationAndAddressLowerThan256.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256
findCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__checkRegisterDeclarationAndAddressLowerThan256.count ()) {
    result = gDispatchTableFor__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 (superClassPtr) ;
      gDispatchTableFor__registerExpression__checkRegisterDeclarationAndAddressLowerThan256.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerExpression.checkRegisterAddressingAndBankAccess' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__checkRegisterAddressingAndBankAccess (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_3281,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank,
                                GGS_bitSliceTable  & var_cas_outBitSliceTable
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3281 != NULL) {
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  var_cas_size ;
    const GGS_registerTable  _temp_3521 = var_cas_inRegisterTable ;
    if (_temp_3521._isBuilt ()) {
      _temp_3521 (HERE)->method_searchKey (_inLexique, operand_3281->mRegisterName, var_cas_registerAddressList, var_cas_size, var_cas_outBitSliceTable COMMA_SOURCE_FILE_AT_LINE (96)) ;
    }
    if (((operand_3281->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (98)))._operator_supOrEqual (var_cas_size)).isBuiltAndTrue ()) {
      operand_3281->mOffset.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "index ("))._operator_concat (operand_3281->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (99)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (99))))._operator_concat (GGS_string (true, ") should be lower than size (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (99))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (99)) ;
    }
    GGS_bool var_cas_found ;
    var_cas_found = GGS_bool (true, false) ;
    {
      GGS_uintlist::cEnumerator enumerator_3861 (var_cas_registerAddressList, true) ;
      const GGS_uintlist::cElement * operand_3861 = NULL ;
      while (((operand_3861 = enumerator_3861.nextObject ()))
          && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_3861) ;
        var_cas_found = ((operand_3861->mValue)._operator_strictInf (var_cas_inAccessBankSplitOffset))._operator_or ((operand_3861->mValue)._operator_supOrEqual (GGS_uint (true, 3840U)._add_operation (_inLexique, var_cas_inAccessBankSplitOffset COMMA_SOURCE_FILE_AT_LINE (104)))) ;
      }
    }
    if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
      if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        operand_3281->mRegisterName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the register '"))._operator_concat (operand_3281->mRegisterName))._operator_concat (GGS_string (true, "' should be addressed with BSR, but BSR does not contain a reliable value")) COMMA_SOURCE_FILE_AT_LINE (109)) ;
      }else{
        GGS_uint  var_cas_bankFirst ;
        var_cas_bankFirst = var_cas_ioCurrentBank._multiply_operation (_inLexique, GGS_uint (true, 256U) COMMA_SOURCE_FILE_AT_LINE (111)) ;
        GGS_uint  var_cas_bankLast ;
        var_cas_bankLast = var_cas_bankFirst._add_operation (_inLexique, GGS_uint (true, 255U) COMMA_SOURCE_FILE_AT_LINE (112)) ;
        {
          GGS_uintlist::cEnumerator enumerator_4348 (var_cas_registerAddressList, true) ;
          const GGS_uintlist::cElement * operand_4348 = NULL ;
          while (((operand_4348 = enumerator_4348.nextObject ()))
              && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
            macroValidPointer (operand_4348) ;
            var_cas_found = ((operand_4348->mValue)._operator_supOrEqual (var_cas_bankFirst))._operator_and ((operand_4348->mValue)._operator_infOrEqual (var_cas_bankLast)) ;
          }
        }
        if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
          operand_3281->mRegisterName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the register '"))._operator_concat (operand_3281->mRegisterName))._operator_concat (GGS_string (true, "' should be addressed with BSR, but BSR contains ")))._operator_concat (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (117))))._operator_concat (GGS_string (true, " that does not correspond to register bank")) COMMA_SOURCE_FILE_AT_LINE (117)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@registerExpression.checkRegisterAddressingAndBankAccess'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess> gDispatchTableFor__registerExpression__checkRegisterAddressingAndBankAccess ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__checkRegisterAddressingAndBankAccess.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess
findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__checkRegisterAddressingAndBankAccess.count ()) {
    result = gDispatchTableFor__registerExpression__checkRegisterAddressingAndBankAccess (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (superClassPtr) ;
      gDispatchTableFor__registerExpression__checkRegisterAddressingAndBankAccess.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Class for 'routineKind' Enumeration                     *
//                                                                           *
//---------------------------------------------------------------------------*

bool GGS_routineKind::
_isBuilt (void) const {
  return mValue > kNotBuilt ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_isEqual (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue == inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_isNotEqual (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue != inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_infOrEqual (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue <= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_supOrEqual (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue >= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_strictInf (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue < inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_strictSup (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue > inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_routineKind::
reader_description (C_Compiler & /* _inLexique */
                    COMMA_UNUSED_LOCATION_ARGS,
                    const sint32 /* inIndentation */) const {
  C_String s ;
  s << "<enum @routineKind" ;
  switch (mValue) {
  case enum_interruptRoutine:
    s << " interruptRoutine>" ;
    break ;
  case enum_noReturnRoutine:
    s << " noReturnRoutine>" ;
    break ;
  case enum_regularRoutine:
    s << " regularRoutine>" ;
    break ;
  case kNotBuilt:
    s << " (not built)>" ;
    break ;
  }
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Category method '@piccolo_instruction.check'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__piccolo_instruction__check (C_Compiler &,
                                const cPtr_piccolo_instruction * operand_5206,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5206 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Virtual Table for category method '@piccolo_instruction.check'       *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__piccolo_instruction__check> gDispatchTableFor__piccolo_instruction__check ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__piccolo_instruction__check (typeCategoryMethod__piccolo_instruction__check inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__piccolo_instruction__check.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__piccolo_instruction__check
findCategoryMethod__piccolo_instruction__check (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__piccolo_instruction__check result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__piccolo_instruction__check.count ()) {
    result = gDispatchTableFor__piccolo_instruction__check (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__piccolo_instruction__check (superClassPtr) ;
      gDispatchTableFor__piccolo_instruction__check.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "checkInstructionList"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkInstructionList (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_outContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind,
                                const GGS_instructionList   var_cas_inInstructionList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkInstructionList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outContinuesInSequence = GGS_bool (true, true) ;
  {
    GGS_instructionList::cEnumerator enumerator_5901 (var_cas_inInstructionList, true) ;
    const GGS_instructionList::cElement * operand_5901 = NULL ;
    while (((operand_5901 = enumerator_5901.nextObject ()))) {
      macroValidPointer (operand_5901) ;
      if (((var_cas_outContinuesInSequence)._operator_not ()).isBuiltAndTrue ()) {
        operand_5901->mInstruction.reader_mInstructionLocation (_inLexique COMMA_SOURCE_FILE_AT_LINE (162)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unreachable code") COMMA_SOURCE_FILE_AT_LINE (162)) ;
        var_cas_outContinuesInSequence = GGS_bool (true, true) ;
      }
      const GGS_piccolo_instruction  _temp_6102 = operand_5901->mInstruction ;
      if (_temp_6102._isBuilt ()) {
        typeCategoryMethod__piccolo_instruction__check _method = findCategoryMethod__piccolo_instruction__check (_temp_6102._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_6102 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_outContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (165)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkInstructionList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@instruction_nobanksel.check'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_nobanksel__check (C_Compiler & _inLexique,
                                const cPtr_instruction_nobanksel * operand_6442,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6442 != NULL) {
    if ((var_cas_inShouldPreserveBSR).isBuiltAndTrue ()) {
      operand_6442->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "cannot use \n"
        "obank\" here: BSR should be preserved (use it in a \"banksave\" construct)") COMMA_SOURCE_FILE_AT_LINE (189)) ;
    }
    var_cas_ioCurrentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Category method '@instruction_banksel.check'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_banksel__check (C_Compiler & _inLexique,
                                const cPtr_instruction_banksel * operand_7029,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7029 != NULL) {
    if ((var_cas_inShouldPreserveBSR).isBuiltAndTrue ()) {
      operand_7029->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "cannot use \"banksel\" here: BSR should be preserved (use it in \"banksave\" construct)") COMMA_SOURCE_FILE_AT_LINE (206)) ;
    }
    if (((operand_7029->mBankIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (208)))._operator_strictSup (GGS_uint (true, 15U))).isBuiltAndTrue ()) {
      operand_7029->mBankIndex.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "selected bank index should be lower or equal to 15") COMMA_SOURCE_FILE_AT_LINE (209)) ;
      var_cas_ioCurrentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
    }else if (((operand_7029->mBankIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (211)))._operator_isEqual (var_cas_ioCurrentBank)).isBuiltAndTrue ()) {
      operand_7029->mBankIndex.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, ((GGS_string (true, "useless instruction: the bank "))._operator_concat (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (212))))._operator_concat (GGS_string (true, " is already selected")) COMMA_SOURCE_FILE_AT_LINE (212)) ;
    }else{
      var_cas_ioCurrentBank = operand_7029->mBankIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (214)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@instruction_savebank.check'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_savebank__check (C_Compiler & _inLexique,
                                const cPtr_instruction_savebank * operand_7962,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7962 != NULL) {
    const GGS_registerExpression  _temp_8204 = operand_7962->mRegister ;
    if (_temp_8204._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterDeclaration _method = findCategoryMethod__registerExpression__checkRegisterDeclaration (_temp_8204._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_8204 (HERE), var_cas_inRegisterTable COMMA_SOURCE_FILE_AT_LINE (229)) ;
      }
    }
    GGS_uint  var_cas_finalBank ;
    var_cas_finalBank = var_cas_ioCurrentBank ;
    ::routine_checkInstructionList (_inLexique,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_finalBank,  GGS_bool (true, false),  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind,  operand_7962->mInstructionList COMMA_SOURCE_FILE_AT_LINE (231)) ;
    if (((var_cas_ioContinuesInSequence)._operator_not ()).isBuiltAndTrue ()) {
      operand_7962->mEndOfSaveBankInstruction.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "useless saving: execution does reach the end of \"savebank\" instruction list") COMMA_SOURCE_FILE_AT_LINE (243)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Category method '@instruction_FDA.check'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FDA__check (C_Compiler & _inLexique,
                                const cPtr_instruction_FDA * operand_8801,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8801 != NULL) {
    GGS_bitSliceTable  automatic_var_4 ;
    const GGS_registerExpression  _temp_9074 = operand_8801->mRegisterExpression ;
    if (_temp_9074._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_9074._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_9074 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank, automatic_var_4 COMMA_SOURCE_FILE_AT_LINE (258)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Category method '@instruction_FA.check'                   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FA__check (C_Compiler & _inLexique,
                                const cPtr_instruction_FA * operand_9321,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9321 != NULL) {
    GGS_bitSliceTable  automatic_var_5 ;
    const GGS_registerExpression  _temp_9594 = operand_9321->mRegisterExpression ;
    if (_temp_9594._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_9594._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_9594 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank, automatic_var_5 COMMA_SOURCE_FILE_AT_LINE (277)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@instruction_MOVFF.check'                 *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVFF__check (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVFF * operand_9844,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9844 != NULL) {
    const GGS_registerExpression  _temp_10131 = operand_9844->mSourceRegisterName ;
    if (_temp_10131._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterDeclaration _method = findCategoryMethod__registerExpression__checkRegisterDeclaration (_temp_10131._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_10131 (HERE), var_cas_inRegisterTable COMMA_SOURCE_FILE_AT_LINE (296)) ;
      }
    }
    const GGS_registerExpression  _temp_10204 = operand_9844->mDestinationRegisterName ;
    if (_temp_10204._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterDeclaration _method = findCategoryMethod__registerExpression__checkRegisterDeclaration (_temp_10204._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_10204 (HERE), var_cas_inRegisterTable COMMA_SOURCE_FILE_AT_LINE (297)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Category method '@instruction_FBA.check'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FBA__check (C_Compiler & _inLexique,
                                const cPtr_instruction_FBA * operand_10377,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10377 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    const GGS_registerExpression  _temp_10683 = operand_10377->mRegisterExpression ;
    if (_temp_10683._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_10683._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_10683 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (312)) ;
      }
    }
    const GGS_bitNumberExpression  _temp_10829 = operand_10377->mBitNumber ;
    if (_temp_10829._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__checkBitNumber _method = findCategoryMethod__bitNumberExpression__checkBitNumber (_temp_10829._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_10829 (HERE), var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (318)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Category method '@instruction_JSR.check'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_JSR__check (C_Compiler & _inLexique,
                                const cPtr_instruction_JSR * operand_10990,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10990 != NULL) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    GGS_uint  var_cas_returnedBank ;
    GGS_bool var_cas_preservesBank ;
    const GGS_routineMap  _temp_11354 = var_cas_inRoutineMap ;
    if (_temp_11354._isBuilt ()) {
      _temp_11354 (HERE)->method_searchKey (_inLexique, operand_10990->mTargetLabel, var_cas_isNoReturn, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank COMMA_SOURCE_FILE_AT_LINE (336)) ;
    }
    if ((((var_cas_requiredBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredBank)._operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = (((GGS_string (true, "the routine '"))._operator_concat (operand_10990->mTargetLabel))._operator_concat (GGS_string (true, "' requires BSR to be set to ")))._operator_concat (var_cas_requiredBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (338))) ;
      var_cas_errorMessage.writeString (", but BSR ") ;
      if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString ("does contain any reliable value") ;
      }else{
        var_cas_errorMessage.writeString ("is set to ") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (343))) ;
      }
      operand_10990->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (345)) ;
    }
    if ((var_cas_isNoReturn).isBuiltAndTrue ()) {
      operand_10990->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a \"noreturn\" routine should be called with a BRA, GOTO, Bcc or JUMP instruction") COMMA_SOURCE_FILE_AT_LINE (348)) ;
    }
    if (((var_cas_preservesBank)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_ioCurrentBank = var_cas_returnedBank ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@instruction_JUMP.check'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_JUMP__check (C_Compiler & _inLexique,
                                const cPtr_instruction_JUMP * operand_12240,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12240 != NULL) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    GGS_uint  automatic_var_6 ;
    GGS_bool automatic_var_7 ;
    const GGS_routineMap  _temp_12550 = var_cas_inRoutineMap ;
    if (_temp_12550._isBuilt ()) {
      _temp_12550 (HERE)->method_searchKey (_inLexique, operand_12240->mTargetLabel, var_cas_isNoReturn, var_cas_requiredBank, automatic_var_6, automatic_var_7 COMMA_SOURCE_FILE_AT_LINE (368)) ;
    }
    if ((((var_cas_requiredBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredBank)._operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = (((GGS_string (true, "the routine '"))._operator_concat (operand_12240->mTargetLabel))._operator_concat (GGS_string (true, "' requires BSR to be set to ")))._operator_concat (var_cas_requiredBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (370))) ;
      var_cas_errorMessage.writeString (", but BSR ") ;
      if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString ("does contain any reliable value") ;
      }else{
        var_cas_errorMessage.writeString ("is set to ") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (375))) ;
      }
      operand_12240->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (377)) ;
    }
    if (((var_cas_isNoReturn)._operator_not ()).isBuiltAndTrue ()) {
      operand_12240->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine should be called with a RCALL, CALL or JSR instruction") COMMA_SOURCE_FILE_AT_LINE (380)) ;
    }
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Category method '@instruction_JUMPCC.check'                 *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_JUMPCC__check (C_Compiler & _inLexique,
                                const cPtr_instruction_JUMPCC * operand_13370,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13370 != NULL) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    GGS_uint  automatic_var_8 ;
    GGS_bool automatic_var_9 ;
    const GGS_routineMap  _temp_13687 = var_cas_inRoutineMap ;
    if (_temp_13687._isBuilt ()) {
      _temp_13687 (HERE)->method_searchKey (_inLexique, operand_13370->mTargetLabel, var_cas_isNoReturn, var_cas_requiredBank, automatic_var_8, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (398)) ;
    }
    if ((((var_cas_requiredBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredBank)._operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = (((GGS_string (true, "the routine '"))._operator_concat (operand_13370->mTargetLabel))._operator_concat (GGS_string (true, "' requires BSR to be set to ")))._operator_concat (var_cas_requiredBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (400))) ;
      var_cas_errorMessage.writeString (", but BSR ") ;
      if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString ("does contain any reliable value") ;
      }else{
        var_cas_errorMessage.writeString ("is set to ") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (405))) ;
      }
      operand_13370->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (407)) ;
    }
    if (((var_cas_isNoReturn)._operator_not ()).isBuiltAndTrue ()) {
      operand_13370->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine should be called with a RCALL, CALL or JSR instruction") COMMA_SOURCE_FILE_AT_LINE (410)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_literalOperation.check'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_literalOperation__check (C_Compiler & _inLexique,
                                const cPtr_instruction_literalOperation * operand_14482,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14482 != NULL) {
    if (((operand_14482->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (425)))._operator_strictSup (GGS_uint (true, 255U))).isBuiltAndTrue ()) {
      operand_14482->mLiteralValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the literal value ("))._operator_concat (operand_14482->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (426)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (426))))._operator_concat (GGS_string (true, ") should be lower or equal to 255")) COMMA_SOURCE_FILE_AT_LINE (426)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@instruction_LFSR.check'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LFSR__check (C_Compiler & _inLexique,
                                const cPtr_instruction_LFSR * operand_15048,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15048 != NULL) {
    if (((operand_15048->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (441)))._operator_strictSup (GGS_uint (true, 2U))).isBuiltAndTrue ()) {
      operand_15048->mFSRindex.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the LFSR register index ("))._operator_concat (operand_15048->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (442)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (442))))._operator_concat (GGS_string (true, ") should be lower or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (442)) ;
    }
    const GGS_registerExpression  _temp_15491 = operand_15048->mRegisterExpression ;
    if (_temp_15491._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterDeclaration _method = findCategoryMethod__registerExpression__checkRegisterDeclaration (_temp_15491._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_15491 (HERE), var_cas_inRegisterTable COMMA_SOURCE_FILE_AT_LINE (444)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@instruction_MOVAW.check'                 *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVAW__check (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVAW * operand_15666,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15666 != NULL) {
    const GGS_registerExpression  _temp_15953 = operand_15666->mRegisterExpression ;
    if (_temp_15953._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 _method = findCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 (_temp_15953._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_15953 (HERE), var_cas_inRegisterTable COMMA_SOURCE_FILE_AT_LINE (458)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@instruction_computed_retlw.check'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_retlw__check (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_retlw * operand_16159,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16159 != NULL) {
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      operand_16159->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a \"noreturn\" routine does not accept computed retlw instruction") COMMA_SOURCE_FILE_AT_LINE (476)) ;
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_16159->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "an interrupt routine does not accept computed retlw instruction") COMMA_SOURCE_FILE_AT_LINE (478)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@instruction_MNOP.check'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MNOP__check (C_Compiler & _inLexique,
                                const cPtr_instruction_MNOP * operand_16898,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16898 != NULL) {
    if (((operand_16898->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (493)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      operand_16898->mOccurrenceFactor.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "occurrence argument is zero: no generated code") COMMA_SOURCE_FILE_AT_LINE (494)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@instruction_computed_bra.check'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_bra__check (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_bra * operand_17438,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17438 != NULL) {
    {
      GGS_lstringlist::cEnumerator enumerator_17691 (operand_17438->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_17691 = NULL ;
      while (((operand_17691 = enumerator_17691.nextObject ()))) {
        macroValidPointer (operand_17691) ;
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        GGS_uint  automatic_var_10 ;
        GGS_bool automatic_var_11 ;
        const GGS_routineMap  _temp_17774 = var_cas_inRoutineMap ;
        if (_temp_17774._isBuilt ()) {
          _temp_17774 (HERE)->method_searchKey (_inLexique, operand_17691->mValue, var_cas_isNoReturn, var_cas_requiredBank, automatic_var_10, automatic_var_11 COMMA_SOURCE_FILE_AT_LINE (512)) ;
        }
        if ((((var_cas_requiredBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredBank)._operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
          GGS_string var_cas_errorMessage ;
          var_cas_errorMessage = (((GGS_string (true, "the routine '"))._operator_concat (operand_17691->mValue))._operator_concat (GGS_string (true, "' requires BSR to be set to ")))._operator_concat (var_cas_requiredBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (514))) ;
          var_cas_errorMessage.writeString (", but BSR ") ;
          if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
            var_cas_errorMessage.writeString ("does contain any reliable value") ;
          }else{
            var_cas_errorMessage.writeString ("is set to ") ;
            var_cas_errorMessage._dotAssign_operation (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (519))) ;
          }
          operand_17691->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (521)) ;
        }
        if (((var_cas_isNoReturn)._operator_not ()).isBuiltAndTrue ()) {
          operand_17691->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "for being named in a computed bra, the '"))._operator_concat (operand_17691->mValue))._operator_concat (GGS_string (true, "' routine should be declared with the \"noreturn\" qualifier")) COMMA_SOURCE_FILE_AT_LINE (524)) ;
        }
      }
    }
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      operand_17438->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine does not accept computed bra instruction") COMMA_SOURCE_FILE_AT_LINE (530)) ;
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_17438->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "an interrupt routine does not accept computed bra instruction") COMMA_SOURCE_FILE_AT_LINE (533)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@instruction_computed_goto.check'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_goto__check (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_goto * operand_18969,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18969 != NULL) {
    {
      GGS_lstringlist::cEnumerator enumerator_19222 (operand_18969->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_19222 = NULL ;
      while (((operand_19222 = enumerator_19222.nextObject ()))) {
        macroValidPointer (operand_19222) ;
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        GGS_uint  automatic_var_12 ;
        GGS_bool automatic_var_13 ;
        const GGS_routineMap  _temp_19305 = var_cas_inRoutineMap ;
        if (_temp_19305._isBuilt ()) {
          _temp_19305 (HERE)->method_searchKey (_inLexique, operand_19222->mValue, var_cas_isNoReturn, var_cas_requiredBank, automatic_var_12, automatic_var_13 COMMA_SOURCE_FILE_AT_LINE (551)) ;
        }
        if ((((var_cas_requiredBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredBank)._operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
          GGS_string var_cas_errorMessage ;
          var_cas_errorMessage = (((GGS_string (true, "the routine '"))._operator_concat (operand_19222->mValue))._operator_concat (GGS_string (true, "' requires BSR to be set to ")))._operator_concat (var_cas_requiredBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (553))) ;
          var_cas_errorMessage.writeString (", but BSR ") ;
          if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
            var_cas_errorMessage.writeString ("does contain any reliable value") ;
          }else{
            var_cas_errorMessage.writeString ("is set to ") ;
            var_cas_errorMessage._dotAssign_operation (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (558))) ;
          }
          operand_19222->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (560)) ;
        }
        if (((var_cas_isNoReturn)._operator_not ()).isBuiltAndTrue ()) {
          operand_19222->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "for being named in a computed goto, the '"))._operator_concat (operand_19222->mValue))._operator_concat (GGS_string (true, "' routine should be declared with the \"noreturn\" qualifier")) COMMA_SOURCE_FILE_AT_LINE (563)) ;
        }
      }
    }
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      operand_18969->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine does not accept computed goto instruction") COMMA_SOURCE_FILE_AT_LINE (569)) ;
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_18969->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "an interrupt routine does not accept computed goto instruction") COMMA_SOURCE_FILE_AT_LINE (572)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Category method '@instruction_FOREVER.check'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FOREVER__check (C_Compiler & _inLexique,
                                const cPtr_instruction_FOREVER * operand_20497,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20497 != NULL) {
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      operand_20497->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine does not accept the \"forever\" instruction") COMMA_SOURCE_FILE_AT_LINE (589)) ;
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_20497->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "an interrupt routine does not accept the \"forever\" instruction") COMMA_SOURCE_FILE_AT_LINE (592)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
    GGS_uint  var_cas_finalBank ;
    var_cas_finalBank = var_cas_ioCurrentBank ;
    ::routine_checkInstructionList (_inLexique,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_finalBank,  var_cas_inShouldPreserveBSR,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind,  operand_20497->mInstructionList COMMA_SOURCE_FILE_AT_LINE (595)) ;
    if (((var_cas_ioCurrentBank)._operator_isNotEqual (var_cas_finalBank)).isBuiltAndTrue ()) {
      operand_20497->mEndOfInstructionList.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "instruction list does not leave BSR value unchanged") COMMA_SOURCE_FILE_AT_LINE (607)) ;
    }
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_IF_FA_SEMI_COLON.check'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_FA_SEMI_COLON__check (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_FA_SEMI_COLON * operand_21640,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21640 != NULL) {
    GGS_bitSliceTable  automatic_var_14 ;
    const GGS_registerExpression  _temp_21892 = operand_21640->mRegisterExpression ;
    if (_temp_21892._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_21892._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_21892 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank, automatic_var_14 COMMA_SOURCE_FILE_AT_LINE (624)) ;
      }
    }
    GGS_bool var_cas_unusedContinuesInSequence ;
    var_cas_unusedContinuesInSequence = GGS_bool (true, true) ;
    const GGS_piccolo_instruction  _temp_22104 = operand_21640->mInstruction ;
    if (_temp_22104._isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__check _method = findCategoryMethod__piccolo_instruction__check (_temp_22104._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_22104 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_unusedContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (632)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@instruction_IF_BitTest.check'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_BitTest__check (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_BitTest * operand_22415,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22415 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    const GGS_registerExpression  _temp_22700 = operand_22415->mRegisterExpression ;
    if (_temp_22700._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_22700._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_22700 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (655)) ;
      }
    }
    const GGS_bitNumberExpression  _temp_22846 = operand_22415->mBitNumber ;
    if (_temp_22846._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__checkBitNumber _method = findCategoryMethod__bitNumberExpression__checkBitNumber (_temp_22846._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_22846 (HERE), var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (661)) ;
      }
    }
    GGS_bool var_cas_unusedContinuesInSequence ;
    var_cas_unusedContinuesInSequence = GGS_bool (true, true) ;
    const GGS_piccolo_instruction  _temp_22971 = operand_22415->mInstruction ;
    if (_temp_22971._isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__check _method = findCategoryMethod__piccolo_instruction__check (_temp_22971._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_22971 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_unusedContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (664)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Virtual Table for category method '@conditionExpression.checkCondition'   *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__conditionExpression__checkCondition> gDispatchTableFor__conditionExpression__checkCondition ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__conditionExpression__checkCondition (typeCategoryMethod__conditionExpression__checkCondition inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__conditionExpression__checkCondition.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__conditionExpression__checkCondition
findCategoryMethod__conditionExpression__checkCondition (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__conditionExpression__checkCondition result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__conditionExpression__checkCondition.count ()) {
    result = gDispatchTableFor__conditionExpression__checkCondition (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__conditionExpression__checkCondition (superClassPtr) ;
      gDispatchTableFor__conditionExpression__checkCondition.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@bcc_in_structured_if_condition.checkCondition'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bcc_in_structured_if_condition__checkCondition (C_Compiler &,
                                const cPtr_bcc_in_structured_if_condition * operand_23518,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioCurrentBank */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23518 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@registerComparisonCondition.checkCondition'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerComparisonCondition__checkCondition (C_Compiler & _inLexique,
                                const cPtr_registerComparisonCondition * operand_23788,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23788 != NULL) {
    GGS_bitSliceTable  automatic_var_15 ;
    const GGS_registerExpression  _temp_23920 = operand_23788->mRegisterExpression ;
    if (_temp_23920._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_23920._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_23920 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank, automatic_var_15 COMMA_SOURCE_FILE_AT_LINE (699)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@incDecRegisterInCondition.checkCondition'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__incDecRegisterInCondition__checkCondition (C_Compiler & _inLexique,
                                const cPtr_incDecRegisterInCondition * operand_24178,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24178 != NULL) {
    GGS_bitSliceTable  automatic_var_16 ;
    const GGS_registerExpression  _temp_24310 = operand_24178->mRegisterExpression ;
    if (_temp_24310._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_24310._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_24310 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank, automatic_var_16 COMMA_SOURCE_FILE_AT_LINE (714)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@registerTestCondition.checkCondition'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerTestCondition__checkCondition (C_Compiler & _inLexique,
                                const cPtr_registerTestCondition * operand_24564,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24564 != NULL) {
    GGS_bitSliceTable  automatic_var_17 ;
    const GGS_registerExpression  _temp_24696 = operand_24564->mRegisterExpression ;
    if (_temp_24696._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_24696._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_24696 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank, automatic_var_17 COMMA_SOURCE_FILE_AT_LINE (729)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@negateCondition.checkCondition'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__negateCondition__checkCondition (C_Compiler & _inLexique,
                                const cPtr_negateCondition * operand_24944,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24944 != NULL) {
    const GGS_conditionExpression  _temp_25067 = operand_24944->mCondition ;
    if (_temp_25067._isBuilt ()) {
      typeCategoryMethod__conditionExpression__checkCondition _method = findCategoryMethod__conditionExpression__checkCondition (_temp_25067._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_25067 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank COMMA_SOURCE_FILE_AT_LINE (744)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@andCondition.checkCondition'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__andCondition__checkCondition (C_Compiler & _inLexique,
                                const cPtr_andCondition * operand_25283,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25283 != NULL) {
    const GGS_conditionExpression  _temp_25411 = operand_25283->mLeftExpression ;
    if (_temp_25411._isBuilt ()) {
      typeCategoryMethod__conditionExpression__checkCondition _method = findCategoryMethod__conditionExpression__checkCondition (_temp_25411._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_25411 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank COMMA_SOURCE_FILE_AT_LINE (758)) ;
      }
    }
    const GGS_conditionExpression  _temp_25522 = operand_25283->mRightExpression ;
    if (_temp_25522._isBuilt ()) {
      typeCategoryMethod__conditionExpression__checkCondition _method = findCategoryMethod__conditionExpression__checkCondition (_temp_25522._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_25522 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank COMMA_SOURCE_FILE_AT_LINE (763)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@bitTest_in_structured_if_condition.checkCondition'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitTest_in_structured_if_condition__checkCondition (C_Compiler & _inLexique,
                                const cPtr_bitTest_in_structured_if_condition * operand_25760,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25760 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    const GGS_registerExpression  _temp_25925 = operand_25760->mRegisterExpression ;
    if (_temp_25925._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_25925._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_25925 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (778)) ;
      }
    }
    const GGS_bitNumberExpression  _temp_26071 = operand_25760->mBitNumber ;
    if (_temp_26071._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__checkBitNumber _method = findCategoryMethod__bitNumberExpression__checkBitNumber (_temp_26071._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_26071 (HERE), var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (784)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@instruction_structured_if.check'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_structured_if__check (C_Compiler & _inLexique,
                                const cPtr_instruction_structured_if * operand_26242,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_26242 != NULL) {
    const GGS_conditionExpression  _temp_26501 = operand_26242->mIfCondition ;
    if (_temp_26501._isBuilt ()) {
      typeCategoryMethod__conditionExpression__checkCondition _method = findCategoryMethod__conditionExpression__checkCondition (_temp_26501._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_26501 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank COMMA_SOURCE_FILE_AT_LINE (799)) ;
      }
    }
    GGS_uint  var_cas_finalBank ;
    var_cas_finalBank = var_cas_ioCurrentBank ;
    ::routine_checkInstructionList (_inLexique,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_finalBank,  var_cas_inShouldPreserveBSR,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind,  operand_26242->mThenInstructionList COMMA_SOURCE_FILE_AT_LINE (805)) ;
    {
      GGS_partList::cEnumerator enumerator_26891 (operand_26242->mElsifPartList, true) ;
      const GGS_partList::cElement * operand_26891 = NULL ;
      while (((operand_26891 = enumerator_26891.nextObject ()))) {
        macroValidPointer (operand_26891) ;
        const GGS_conditionExpression  _temp_26925 = operand_26891->mCondition ;
        if (_temp_26925._isBuilt ()) {
          typeCategoryMethod__conditionExpression__checkCondition _method = findCategoryMethod__conditionExpression__checkCondition (_temp_26925._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_26925 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank COMMA_SOURCE_FILE_AT_LINE (818)) ;
          }
        }
        GGS_bool var_cas_continuesInSequence ;
        GGS_uint  var_cas_elsifPartCurrentBank ;
        var_cas_elsifPartCurrentBank = var_cas_ioCurrentBank ;
        ::routine_checkInstructionList (_inLexique,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_elsifPartCurrentBank,  var_cas_inShouldPreserveBSR,  var_cas_continuesInSequence,  var_cas_inRoutineKind,  operand_26891->mInstructionList COMMA_SOURCE_FILE_AT_LINE (824)) ;
        if (((var_cas_elsifPartCurrentBank)._operator_isNotEqual (var_cas_finalBank)).isBuiltAndTrue ()) {
          operand_26891->mEndOfPartLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "This branch does not leave BSR value as the first one does") COMMA_SOURCE_FILE_AT_LINE (836)) ;
        }
        var_cas_ioContinuesInSequence = (var_cas_ioContinuesInSequence)._operator_or (var_cas_continuesInSequence) ;
      }
    }
    GGS_bool var_cas_continuesInSequence ;
    GGS_uint  var_cas_elsePartCurrentBank ;
    var_cas_elsePartCurrentBank = var_cas_ioCurrentBank ;
    ::routine_checkInstructionList (_inLexique,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_elsePartCurrentBank,  var_cas_inShouldPreserveBSR,  var_cas_continuesInSequence,  var_cas_inRoutineKind,  operand_26242->mElseInstructionList COMMA_SOURCE_FILE_AT_LINE (842)) ;
    if (((var_cas_elsePartCurrentBank)._operator_isNotEqual (var_cas_finalBank)).isBuiltAndTrue ()) {
      operand_26242->mEndOfElsePartLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "This branch does not leave BSR value as the first one does") COMMA_SOURCE_FILE_AT_LINE (854)) ;
    }
    var_cas_ioContinuesInSequence = (var_cas_ioContinuesInSequence)._operator_or (var_cas_continuesInSequence) ;
    var_cas_ioCurrentBank = var_cas_finalBank ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@instruction_do_while.check'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_do_while__check (C_Compiler & _inLexique,
                                const cPtr_instruction_do_while * operand_28291,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_28291 != NULL) {
    GGS_uint  var_cas_finalBank ;
    var_cas_finalBank = var_cas_ioCurrentBank ;
    ::routine_checkInstructionList (_inLexique,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_finalBank,  var_cas_inShouldPreserveBSR,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind,  operand_28291->mRepeatedInstructionList COMMA_SOURCE_FILE_AT_LINE (873)) ;
    if (((var_cas_ioCurrentBank)._operator_isNotEqual (var_cas_finalBank)).isBuiltAndTrue ()) {
      operand_28291->mEndOfRepeatedInstructionList.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "This branch does not leave BSR value unchanged") COMMA_SOURCE_FILE_AT_LINE (885)) ;
    }
    {
      GGS_partList::cEnumerator enumerator_28954 (operand_28291->mWhilePartList, true) ;
      const GGS_partList::cElement * operand_28954 = NULL ;
      while (((operand_28954 = enumerator_28954.nextObject ()))) {
        macroValidPointer (operand_28954) ;
        const GGS_conditionExpression  _temp_28988 = operand_28954->mCondition ;
        if (_temp_28988._isBuilt ()) {
          typeCategoryMethod__conditionExpression__checkCondition _method = findCategoryMethod__conditionExpression__checkCondition (_temp_28988._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_28988 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank COMMA_SOURCE_FILE_AT_LINE (889)) ;
          }
        }
        GGS_uint  var_cas_bank ;
        var_cas_bank = var_cas_ioCurrentBank ;
        ::routine_checkInstructionList (_inLexique,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_bank,  var_cas_inShouldPreserveBSR,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind,  operand_28954->mInstructionList COMMA_SOURCE_FILE_AT_LINE (894)) ;
        if (((var_cas_ioCurrentBank)._operator_isNotEqual (var_cas_bank)).isBuiltAndTrue ()) {
          operand_28954->mEndOfPartLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "This branch does not leave BSR value unchanged") COMMA_SOURCE_FILE_AT_LINE (906)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@instruction_IF_IncDec.check'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_IncDec__check (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_IncDec * operand_29618,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29618 != NULL) {
    GGS_bitSliceTable  automatic_var_18 ;
    const GGS_registerExpression  _temp_29870 = operand_29618->mRegisterExpression ;
    if (_temp_29870._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_29870._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_29870 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioCurrentBank, automatic_var_18 COMMA_SOURCE_FILE_AT_LINE (922)) ;
      }
    }
    GGS_bool var_cas_unusedContinuesInSequence ;
    var_cas_unusedContinuesInSequence = GGS_bool (true, true) ;
    const GGS_piccolo_instruction  _temp_30082 = operand_29618->mInstruction ;
    if (_temp_30082._isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__check _method = findCategoryMethod__piccolo_instruction__check (_temp_30082._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_30082 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_unusedContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (930)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "semanticsCheckings"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_semanticsCheckings (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_piccoloModel  var_cas_inPiccoloModel,
                                const GGS_bool  /* var_cas_inHasHighInterrupt */,
                                const GGS_bool  /* var_cas_inHasLowInterrupt */,
                                GGS_string & /* var_cas_ioListFileContents */ COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_semanticsCheckings at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_routineMap  var_cas_routineMap ;
  var_cas_routineMap = GGS_routineMap ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_routineDefinitionList::cEnumerator enumerator_30692 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (953)), true) ;
    const GGS_routineDefinitionList::cElement * operand_30692 = NULL ;
    while (((operand_30692 = enumerator_30692.nextObject ()))) {
      macroValidPointer (operand_30692) ;
      if ((((operand_30692->mRequiredBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (954)))._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((operand_30692->mRequiredBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (954)))._operator_strictSup (GGS_uint (true, 15U)))).isBuiltAndTrue ()) {
        operand_30692->mRequiredBank.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the required bank value should be lower or equal to 15") COMMA_SOURCE_FILE_AT_LINE (955)) ;
      }
      if ((((operand_30692->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (957)))._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((operand_30692->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (957)))._operator_strictSup (GGS_uint (true, 15U)))).isBuiltAndTrue ()) {
        operand_30692->mReturnedBank.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the returned bank value should be lower or equal to 15") COMMA_SOURCE_FILE_AT_LINE (958)) ;
      }
      var_cas_routineMap.modifier_insertKey (_inLexique, operand_30692->mRoutineName, operand_30692->mIsNoReturn, operand_30692->mRequiredBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (960)), operand_30692->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (960)), operand_30692->mPreservesBank COMMA_SOURCE_FILE_AT_LINE (960)) ;
    }
  }
  if ((var_cas_routineMap.reader_hasKey (_inLexique, GGS_string (true, "main") COMMA_SOURCE_FILE_AT_LINE (963))).isBuiltAndTrue ()) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    GGS_uint  automatic_var_19 ;
    GGS_bool automatic_var_20 ;
    const GGS_routineMap  _temp_31398 = var_cas_routineMap ;
    if (_temp_31398._isBuilt ()) {
      _temp_31398 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "main"), GGS_location (_inLexique) COMMA_HERE), var_cas_isNoReturn, var_cas_requiredBank, automatic_var_19, automatic_var_20 COMMA_SOURCE_FILE_AT_LINE (966)) ;
    }
    if (((var_cas_isNoReturn)._operator_not ()).isBuiltAndTrue ()) {
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the \"main\" should be declared with \"noreturn\" qualifier: \"noreturn main requiresbank 0\"") COMMA_SOURCE_FILE_AT_LINE (968)) ;
    }
    if (((var_cas_requiredBank)._operator_isNotEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the \"main\" should be declared with \"requiresbank 0\" qualifier: \"noreturn main requiresbank 0\"") COMMA_SOURCE_FILE_AT_LINE (971)) ;
    }
  }else{
    var_cas_inPiccoloModel.reader_mEndOfProgram (_inLexique COMMA_SOURCE_FILE_AT_LINE (974)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the program should declare the \"main\" routine") COMMA_SOURCE_FILE_AT_LINE (974)) ;
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_31965 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (977)), true) ;
    const GGS_routineDefinitionList::cElement * operand_31965 = NULL ;
    while (((operand_31965 = enumerator_31965.nextObject ()))) {
      macroValidPointer (operand_31965) ;
      GGS_bool var_cas_continuesInSequence ;
      var_cas_continuesInSequence = GGS_bool (true, true) ;
      GGS_uint  var_cas_currentBank ;
      var_cas_currentBank = operand_31965->mRequiredBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (979)) ;
      GGS_routineKind var_cas_routineKind ;
      if ((operand_31965->mIsNoReturn).isBuiltAndTrue ()) {
        var_cas_routineKind = GGS_routineKind::constructor_noReturnRoutine (_inLexique COMMA_HERE) ;
      }else{
        var_cas_routineKind = GGS_routineKind::constructor_regularRoutine (_inLexique COMMA_HERE) ;
      }
      {
        GGS_instructionList::cEnumerator enumerator_32292 (operand_31965->mInstructionList, true) ;
        const GGS_instructionList::cElement * operand_32292 = NULL ;
        while (((operand_32292 = enumerator_32292.nextObject ()))) {
          macroValidPointer (operand_32292) ;
          if (((var_cas_continuesInSequence)._operator_not ()).isBuiltAndTrue ()) {
            operand_32292->mInstruction.reader_mInstructionLocation (_inLexique COMMA_SOURCE_FILE_AT_LINE (988)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unreachable code") COMMA_SOURCE_FILE_AT_LINE (988)) ;
            var_cas_continuesInSequence = GGS_bool (true, true) ;
          }
          const GGS_piccolo_instruction  _temp_32496 = operand_32292->mInstruction ;
          if (_temp_32496._isBuilt ()) {
            typeCategoryMethod__piccolo_instruction__check _method = findCategoryMethod__piccolo_instruction__check (_temp_32496._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_32496 (HERE), var_cas_inAccessBankSplitOffset, var_cas_routineMap, var_cas_inRegisterTable, var_cas_currentBank, operand_31965->mPreservesBank, var_cas_continuesInSequence, var_cas_routineKind COMMA_SOURCE_FILE_AT_LINE (991)) ;
            }
          }
        }
      }
      if (((((operand_31965->mIsNoReturn)._operator_not ())._operator_and ((operand_31965->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1001)))._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))))._operator_and ((var_cas_currentBank)._operator_isNotEqual (operand_31965->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1001))))).isBuiltAndTrue ()) {
        operand_31965->mEndOfRoutineLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string (true, "execution will not set BSR to "))._operator_concat (operand_31965->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1002)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1002))) COMMA_SOURCE_FILE_AT_LINE (1002)) ;
      }
      if (((operand_31965->mIsNoReturn)._operator_and (var_cas_continuesInSequence)).isBuiltAndTrue ()) {
        operand_31965->mEndOfRoutineLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "execution should not reach the end of a \"noreturn\" routine") COMMA_SOURCE_FILE_AT_LINE (1005)) ;
      }
    }
  }
  {
    GGS_interruptDefinitionList::cEnumerator enumerator_33164 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1009)), true) ;
    const GGS_interruptDefinitionList::cElement * operand_33164 = NULL ;
    while (((operand_33164 = enumerator_33164.nextObject ()))) {
      macroValidPointer (operand_33164) ;
      GGS_bool var_cas_continuesInSequence ;
      var_cas_continuesInSequence = GGS_bool (true, true) ;
      GGS_uint  var_cas_currentBank ;
      var_cas_currentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
      {
        GGS_instructionList::cEnumerator enumerator_33301 (operand_33164->mInstructionList, true) ;
        const GGS_instructionList::cElement * operand_33301 = NULL ;
        while (((operand_33301 = enumerator_33301.nextObject ()))) {
          macroValidPointer (operand_33301) ;
          if (((var_cas_continuesInSequence)._operator_not ()).isBuiltAndTrue ()) {
            operand_33301->mInstruction.reader_mInstructionLocation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1014)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unreachable code") COMMA_SOURCE_FILE_AT_LINE (1014)) ;
            var_cas_continuesInSequence = GGS_bool (true, true) ;
          }
          const GGS_piccolo_instruction  _temp_33505 = operand_33301->mInstruction ;
          if (_temp_33505._isBuilt ()) {
            typeCategoryMethod__piccolo_instruction__check _method = findCategoryMethod__piccolo_instruction__check (_temp_33505._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_33505 (HERE), var_cas_inAccessBankSplitOffset, var_cas_routineMap, var_cas_inRegisterTable, var_cas_currentBank, GGS_bool (true, false), var_cas_continuesInSequence, GGS_routineKind::constructor_interruptRoutine (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (1017)) ;
            }
          }
        }
      }
      if (((var_cas_continuesInSequence)._operator_not ()).isBuiltAndTrue ()) {
        operand_33164->mEndOfInterruptLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "execution cannot reach the end of the interrupt routine") COMMA_SOURCE_FILE_AT_LINE (1028)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_semanticsCheckings\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticsCheckings (void) {
 enterCategoryMethod__bitNumberExpression__checkBitNumber ((typeCategoryMethod__bitNumberExpression__checkBitNumber) category_method__bitNumberLiteralValue__checkBitNumber, gClassInfoFor__bitNumberLiteralValue.slotID ()) ;
 enterCategoryMethod__bitNumberExpression__checkBitNumber ((typeCategoryMethod__bitNumberExpression__checkBitNumber) category_method__bitNumberLabelValue__checkBitNumber, gClassInfoFor__bitNumberLabelValue.slotID ()) ;
 enterCategoryMethod__registerExpression__checkRegisterDeclaration (category_method__registerExpression__checkRegisterDeclaration, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 (category_method__registerExpression__checkRegisterDeclarationAndAddressLowerThan256, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (category_method__registerExpression__checkRegisterAddressingAndBankAccess, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check (category_method__piccolo_instruction__check, gClassInfoFor__piccolo_instruction.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_nobanksel__check, gClassInfoFor__instruction_nobanksel.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_banksel__check, gClassInfoFor__instruction_banksel.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_savebank__check, gClassInfoFor__instruction_savebank.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_FDA__check, gClassInfoFor__instruction_FDA.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_FA__check, gClassInfoFor__instruction_FA.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_MOVFF__check, gClassInfoFor__instruction_MOVFF.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_FBA__check, gClassInfoFor__instruction_FBA.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_JSR__check, gClassInfoFor__instruction_JSR.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_JUMP__check, gClassInfoFor__instruction_JUMP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_JUMPCC__check, gClassInfoFor__instruction_JUMPCC.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_literalOperation__check, gClassInfoFor__instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_LFSR__check, gClassInfoFor__instruction_LFSR.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_MOVAW__check, gClassInfoFor__instruction_MOVAW.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_computed_retlw__check, gClassInfoFor__instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_MNOP__check, gClassInfoFor__instruction_MNOP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_computed_bra__check, gClassInfoFor__instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_computed_goto__check, gClassInfoFor__instruction_computed_goto.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_FOREVER__check, gClassInfoFor__instruction_FOREVER.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_IF_FA_SEMI_COLON__check, gClassInfoFor__instruction_IF_FA_SEMI_COLON.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_IF_BitTest__check, gClassInfoFor__instruction_IF_BitTest.slotID ()) ;
 enterCategoryMethod__conditionExpression__checkCondition ((typeCategoryMethod__conditionExpression__checkCondition) category_method__bcc_in_structured_if_condition__checkCondition, gClassInfoFor__bcc_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__conditionExpression__checkCondition ((typeCategoryMethod__conditionExpression__checkCondition) category_method__registerComparisonCondition__checkCondition, gClassInfoFor__registerComparisonCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__checkCondition ((typeCategoryMethod__conditionExpression__checkCondition) category_method__incDecRegisterInCondition__checkCondition, gClassInfoFor__incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__checkCondition ((typeCategoryMethod__conditionExpression__checkCondition) category_method__registerTestCondition__checkCondition, gClassInfoFor__registerTestCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__checkCondition ((typeCategoryMethod__conditionExpression__checkCondition) category_method__negateCondition__checkCondition, gClassInfoFor__negateCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__checkCondition ((typeCategoryMethod__conditionExpression__checkCondition) category_method__andCondition__checkCondition, gClassInfoFor__andCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__checkCondition ((typeCategoryMethod__conditionExpression__checkCondition) category_method__bitTest_in_structured_if_condition__checkCondition, gClassInfoFor__bitTest_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_structured_if__check, gClassInfoFor__instruction_structured_if.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_do_while__check, gClassInfoFor__instruction_do_while.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_IF_IncDec__check, gClassInfoFor__instruction_IF_IncDec.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_semanticsCheckings (prologueRoutineFor_semanticsCheckings,
                                   NULL) ;

//---------------------------------------------------------------------------*

