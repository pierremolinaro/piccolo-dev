//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'semanticsCheckings.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      august 1st, 2008, at 14h20'12"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "semanticsCheckings.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticsCheckings.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                           class 'e_routineMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_routineMap::e_routineMap (void) :
mIsNoReturn () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@routineMap'                           *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_routineMap::
elementOf_GGS_routineMap (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_routineMap & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_routineMap::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mIsNoReturn.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_routineMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_routineMap * _p = dynamic_cast <const elementOf_GGS_routineMap *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.mIsNoReturn._operator_isEqual (_p->mInfo.mIsNoReturn)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_routineMap::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_routineMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_routineMap * info = (e_routineMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_routineMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_routineMap * info = (e_routineMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_routineMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineMap::
_operator_isEqual (const GGS_routineMap & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineMap::
_operator_isNotEqual (const GGS_routineMap & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_bool& inParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_routineMap info  ;
    info.mIsNoReturn = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_bool  & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mIsNoReturn ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
modifier_setMIsNoReturnForKey (C_Compiler & inLexique,
                        const GGS_bool& inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMIsNoReturnForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mIsNoReturn = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_bool  & outParameter0 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "the '%K' routine is not declared",
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
modifier_insertKey (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_bool& inParameter0 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "the '%K' routine is already declared in %L",
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_routineMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_routineMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_routineMap::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @routineMap " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_bool & GGS_routineMap::cEnumerator::_mIsNoReturn (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mIsNoReturn ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// Virtual Table for category method '@bitNumberExpression.checkBitNumber'   *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__bitNumberExpression__checkBitNumber> gDispatchTableFor__bitNumberExpression__checkBitNumber ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__bitNumberExpression__checkBitNumber (typeCategoryMethod__bitNumberExpression__checkBitNumber inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__bitNumberExpression__checkBitNumber.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__bitNumberExpression__checkBitNumber
findCategoryMethod__bitNumberExpression__checkBitNumber (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__bitNumberExpression__checkBitNumber result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__bitNumberExpression__checkBitNumber.count ()) {
    result = gDispatchTableFor__bitNumberExpression__checkBitNumber (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__bitNumberExpression__checkBitNumber (superClassPtr) ;
      gDispatchTableFor__bitNumberExpression__checkBitNumber.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@bitNumberLiteralValue.checkBitNumber'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLiteralValue__checkBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLiteralValue * operand_1100,
                                const GGS_bitSliceTable   /* var_cas_inBitSliceTable */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1100 != NULL) {
    if (((operand_1100->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (29)))._operator_strictSup (GGS_uint (true, 7U))).isBuiltAndTrue ()) {
      operand_1100->mBitNumberLiteralValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "The bit number is "))._operator_concat (operand_1100->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (30)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (30))))._operator_concat (GGS_string (true, " (should be <= 7)")) COMMA_SOURCE_FILE_AT_LINE (30)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@bitNumberLabelValue.checkBitNumber'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLabelValue__checkBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLabelValue * operand_1464,
                                const GGS_bitSliceTable   var_cas_inBitSliceTable
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1464 != NULL) {
    GGS_uint  var_cas_sliceIndex ;
    GGS_uint  var_cas_sliceSize ;
    const GGS_bitSliceTable  _temp_1575 = var_cas_inBitSliceTable ;
    if (_temp_1575._isBuilt ()) {
      _temp_1575 (HERE)->method_searchKey (_inLexique, operand_1464->mBitNumberLabelValue, var_cas_sliceIndex, var_cas_sliceSize COMMA_SOURCE_FILE_AT_LINE (41)) ;
    }
    if (((operand_1464->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (42)))._operator_strictSup (var_cas_sliceSize)).isBuiltAndTrue ()) {
      operand_1464->mBitNumberIndexValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "The "))._operator_concat (operand_1464->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (43)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (43))))._operator_concat (GGS_string (true, " index is too large (should be < ")))._operator_concat (var_cas_sliceSize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (44))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (44)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@registerExpression.checkRegisterDeclaration'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__checkRegisterDeclaration (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_2124,
                                const GGS_registerTable   var_cas_inRegisterTable
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2124 != NULL) {
    GGS_uint  var_cas_size ;
    GGS_uintlist  automatic_var_0 ;
    GGS_bitSliceTable  automatic_var_1 ;
    const GGS_registerTable  _temp_2225 = var_cas_inRegisterTable ;
    if (_temp_2225._isBuilt ()) {
      _temp_2225 (HERE)->method_searchKey (_inLexique, operand_2124->mRegisterName, automatic_var_0, var_cas_size, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (57)) ;
    }
    if (((operand_2124->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (59)))._operator_supOrEqual (var_cas_size)).isBuiltAndTrue ()) {
      operand_2124->mOffset.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "index ("))._operator_concat (operand_2124->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (60)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (60))))._operator_concat (GGS_string (true, ") should be lower than size (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (60))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (60)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@registerExpression.checkRegisterDeclaration'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__checkRegisterDeclaration> gDispatchTableFor__registerExpression__checkRegisterDeclaration ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__checkRegisterDeclaration (typeCategoryMethod__registerExpression__checkRegisterDeclaration inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__checkRegisterDeclaration.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__checkRegisterDeclaration
findCategoryMethod__registerExpression__checkRegisterDeclaration (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__checkRegisterDeclaration result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__checkRegisterDeclaration.count ()) {
    result = gDispatchTableFor__registerExpression__checkRegisterDeclaration (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__checkRegisterDeclaration (superClassPtr) ;
      gDispatchTableFor__registerExpression__checkRegisterDeclaration.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerExpression.checkRegisterDeclarationAndAddressLowerThan256'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_2559,
                                const GGS_registerTable   var_cas_inRegisterTable
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2559 != NULL) {
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  automatic_var_2 ;
    GGS_bitSliceTable  automatic_var_3 ;
    const GGS_registerTable  _temp_2718 = var_cas_inRegisterTable ;
    if (_temp_2718._isBuilt ()) {
      _temp_2718 (HERE)->method_searchKey (_inLexique, operand_2559->mRegisterName, var_cas_registerAddressList, automatic_var_2, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (71)) ;
    }
    GGS_bool var_cas_found ;
    var_cas_found = GGS_bool (true, false) ;
    {
      GGS_uintlist::cEnumerator enumerator_2849 (var_cas_registerAddressList, true) ;
      const GGS_uintlist::cElement * operand_2849 = NULL ;
      while (((operand_2849 = enumerator_2849.nextObject ()))
          && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_2849) ;
        var_cas_found = (operand_2849->mValue._add_operation (_inLexique, operand_2559->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (75)) COMMA_SOURCE_FILE_AT_LINE (75)))._operator_strictInf (GGS_uint (true, 256U)) ;
      }
    }
    if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
      operand_2559->mRegisterName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the register '"))._operator_concat (operand_2559->mRegisterName))._operator_concat (GGS_string (true, "' should be should have an address < 256")) COMMA_SOURCE_FILE_AT_LINE (78)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@registerExpression.checkRegisterDeclarationAndAddressLowerThan256'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256> gDispatchTableFor__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 (typeCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__checkRegisterDeclarationAndAddressLowerThan256.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256
findCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__checkRegisterDeclarationAndAddressLowerThan256.count ()) {
    result = gDispatchTableFor__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 (superClassPtr) ;
      gDispatchTableFor__registerExpression__checkRegisterDeclarationAndAddressLowerThan256.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerExpression.checkRegisterAddressingAndBankAccess' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__checkRegisterAddressingAndBankAccess (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_3208,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_uint   var_cas_inCurrentBank,
                                GGS_bitSliceTable  & var_cas_outBitSliceTable
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3208 != NULL) {
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  var_cas_size ;
    const GGS_registerTable  _temp_3448 = var_cas_inRegisterTable ;
    if (_temp_3448._isBuilt ()) {
      _temp_3448 (HERE)->method_searchKey (_inLexique, operand_3208->mRegisterName, var_cas_registerAddressList, var_cas_size, var_cas_outBitSliceTable COMMA_SOURCE_FILE_AT_LINE (93)) ;
    }
    if (((operand_3208->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (95)))._operator_supOrEqual (var_cas_size)).isBuiltAndTrue ()) {
      operand_3208->mOffset.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "index ("))._operator_concat (operand_3208->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (96)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (96))))._operator_concat (GGS_string (true, ") should be lower than size (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (96))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (96)) ;
    }
    GGS_bool var_cas_found ;
    var_cas_found = GGS_bool (true, false) ;
    {
      GGS_uintlist::cEnumerator enumerator_3788 (var_cas_registerAddressList, true) ;
      const GGS_uintlist::cElement * operand_3788 = NULL ;
      while (((operand_3788 = enumerator_3788.nextObject ()))
          && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_3788) ;
        var_cas_found = ((operand_3788->mValue)._operator_strictInf (var_cas_inAccessBankSplitOffset))._operator_or ((operand_3788->mValue)._operator_supOrEqual (GGS_uint (true, 3840U)._add_operation (_inLexique, var_cas_inAccessBankSplitOffset COMMA_SOURCE_FILE_AT_LINE (101)))) ;
      }
    }
    if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
      if (((var_cas_inCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        operand_3208->mRegisterName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the register '"))._operator_concat (operand_3208->mRegisterName))._operator_concat (GGS_string (true, "' should be addressed with BSR, but BSR does not contain a reliable value")) COMMA_SOURCE_FILE_AT_LINE (106)) ;
      }else{
        GGS_uint  var_cas_bankFirst ;
        var_cas_bankFirst = var_cas_inCurrentBank._multiply_operation (_inLexique, GGS_uint (true, 256U) COMMA_SOURCE_FILE_AT_LINE (108)) ;
        GGS_uint  var_cas_bankLast ;
        var_cas_bankLast = var_cas_bankFirst._add_operation (_inLexique, GGS_uint (true, 255U) COMMA_SOURCE_FILE_AT_LINE (109)) ;
        {
          GGS_uintlist::cEnumerator enumerator_4275 (var_cas_registerAddressList, true) ;
          const GGS_uintlist::cElement * operand_4275 = NULL ;
          while (((operand_4275 = enumerator_4275.nextObject ()))
              && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
            macroValidPointer (operand_4275) ;
            var_cas_found = ((operand_4275->mValue)._operator_supOrEqual (var_cas_bankFirst))._operator_and ((operand_4275->mValue)._operator_infOrEqual (var_cas_bankLast)) ;
          }
        }
        if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
          operand_3208->mRegisterName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the register '"))._operator_concat (operand_3208->mRegisterName))._operator_concat (GGS_string (true, "' should be addressed with BSR, but BSR contains ")))._operator_concat (var_cas_inCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (114))))._operator_concat (GGS_string (true, " that does not correspond to register bank")) COMMA_SOURCE_FILE_AT_LINE (114)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@registerExpression.checkRegisterAddressingAndBankAccess'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess> gDispatchTableFor__registerExpression__checkRegisterAddressingAndBankAccess ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__checkRegisterAddressingAndBankAccess.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess
findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__checkRegisterAddressingAndBankAccess.count ()) {
    result = gDispatchTableFor__registerExpression__checkRegisterAddressingAndBankAccess (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (superClassPtr) ;
      gDispatchTableFor__registerExpression__checkRegisterAddressingAndBankAccess.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Class for 'routineKind' Enumeration                     *
//                                                                           *
//---------------------------------------------------------------------------*

bool GGS_routineKind::
_isBuilt (void) const {
  return mValue > kNotBuilt ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_isEqual (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue == inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_isNotEqual (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue != inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_infOrEqual (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue <= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_supOrEqual (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue >= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_strictInf (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue < inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_strictSup (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue > inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_routineKind::
reader_description (C_Compiler & /* _inLexique */
                    COMMA_UNUSED_LOCATION_ARGS,
                    const sint32 /* inIndentation */) const {
  C_String s ;
  s << "<enum @routineKind" ;
  switch (mValue) {
  case enum_interruptRoutine:
    s << " interruptRoutine>" ;
    break ;
  case enum_noReturnRoutine:
    s << " noReturnRoutine>" ;
    break ;
  case enum_regularRoutine:
    s << " regularRoutine>" ;
    break ;
  case kNotBuilt:
    s << " (not built)>" ;
    break ;
  }
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Category method '@piccolo_instruction.check'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__piccolo_instruction__check (C_Compiler &,
                                const cPtr_piccolo_instruction * operand_5133,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inCurrentBank */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5133 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Virtual Table for category method '@piccolo_instruction.check'       *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__piccolo_instruction__check> gDispatchTableFor__piccolo_instruction__check ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__piccolo_instruction__check (typeCategoryMethod__piccolo_instruction__check inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__piccolo_instruction__check.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__piccolo_instruction__check
findCategoryMethod__piccolo_instruction__check (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__piccolo_instruction__check result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__piccolo_instruction__check.count ()) {
    result = gDispatchTableFor__piccolo_instruction__check (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__piccolo_instruction__check (superClassPtr) ;
      gDispatchTableFor__piccolo_instruction__check.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Category method '@instruction_FDA.check'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FDA__check (C_Compiler & _inLexique,
                                const cPtr_instruction_FDA * operand_5495,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_uint   var_cas_inCurrentBank,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5495 != NULL) {
    GGS_bitSliceTable  automatic_var_4 ;
    const GGS_registerExpression  _temp_5731 = operand_5495->mRegisterExpression ;
    if (_temp_5731._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_5731._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_5731 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_inCurrentBank, automatic_var_4 COMMA_SOURCE_FILE_AT_LINE (153)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Category method '@instruction_FA.check'                   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FA__check (C_Compiler & _inLexique,
                                const cPtr_instruction_FA * operand_5977,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_uint   var_cas_inCurrentBank,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5977 != NULL) {
    GGS_bitSliceTable  automatic_var_5 ;
    const GGS_registerExpression  _temp_6213 = operand_5977->mRegisterExpression ;
    if (_temp_6213._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_6213._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_6213 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_inCurrentBank, automatic_var_5 COMMA_SOURCE_FILE_AT_LINE (171)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@instruction_MOVFF.check'                 *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVFF__check (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVFF * operand_6462,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_uint   /* var_cas_inCurrentBank */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6462 != NULL) {
    const GGS_registerExpression  _temp_6712 = operand_6462->mSourceRegisterName ;
    if (_temp_6712._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterDeclaration _method = findCategoryMethod__registerExpression__checkRegisterDeclaration (_temp_6712._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_6712 (HERE), var_cas_inRegisterTable COMMA_SOURCE_FILE_AT_LINE (189)) ;
      }
    }
    const GGS_registerExpression  _temp_6785 = operand_6462->mDestinationRegisterName ;
    if (_temp_6785._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterDeclaration _method = findCategoryMethod__registerExpression__checkRegisterDeclaration (_temp_6785._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_6785 (HERE), var_cas_inRegisterTable COMMA_SOURCE_FILE_AT_LINE (190)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Category method '@instruction_FBA.check'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FBA__check (C_Compiler & _inLexique,
                                const cPtr_instruction_FBA * operand_6958,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_uint   var_cas_inCurrentBank,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6958 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    const GGS_registerExpression  _temp_7227 = operand_6958->mRegisterExpression ;
    if (_temp_7227._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_7227._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_7227 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_inCurrentBank, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (204)) ;
      }
    }
    const GGS_bitNumberExpression  _temp_7372 = operand_6958->mBitNumber ;
    if (_temp_7372._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__checkBitNumber _method = findCategoryMethod__bitNumberExpression__checkBitNumber (_temp_7372._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_7372 (HERE), var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (210)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Category method '@instruction_JSR.check'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_JSR__check (C_Compiler & _inLexique,
                                const cPtr_instruction_JSR * operand_7533,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inCurrentBank */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7533 != NULL) {
    GGS_bool var_cas_isNoReturn ;
    const GGS_routineMap  _temp_7797 = var_cas_inRoutineMap ;
    if (_temp_7797._isBuilt ()) {
      _temp_7797 (HERE)->method_searchKey (_inLexique, operand_7533->mTargetLabel, var_cas_isNoReturn COMMA_SOURCE_FILE_AT_LINE (224)) ;
    }
    if ((var_cas_isNoReturn).isBuiltAndTrue ()) {
      operand_7533->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a \"noreturn\" routine should be called with a BRA, GOTO, Bcc or JUMP instruction") COMMA_SOURCE_FILE_AT_LINE (226)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@instruction_JUMP.check'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_JUMP__check (C_Compiler & _inLexique,
                                const cPtr_instruction_JUMP * operand_8106,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inCurrentBank */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8106 != NULL) {
    GGS_bool var_cas_isNoReturn ;
    const GGS_routineMap  _temp_8370 = var_cas_inRoutineMap ;
    if (_temp_8370._isBuilt ()) {
      _temp_8370 (HERE)->method_searchKey (_inLexique, operand_8106->mTargetLabel, var_cas_isNoReturn COMMA_SOURCE_FILE_AT_LINE (241)) ;
    }
    if (((var_cas_isNoReturn)._operator_not ()).isBuiltAndTrue ()) {
      operand_8106->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine should be called with a RCALL, CALL or JSR instruction") COMMA_SOURCE_FILE_AT_LINE (243)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Category method '@instruction_JUMPCC.check'                 *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_JUMPCC__check (C_Compiler & _inLexique,
                                const cPtr_instruction_JUMPCC * operand_8676,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inCurrentBank */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8676 != NULL) {
    GGS_bool var_cas_isNoReturn ;
    const GGS_routineMap  _temp_8940 = var_cas_inRoutineMap ;
    if (_temp_8940._isBuilt ()) {
      _temp_8940 (HERE)->method_searchKey (_inLexique, operand_8676->mTargetLabel, var_cas_isNoReturn COMMA_SOURCE_FILE_AT_LINE (258)) ;
    }
    if (((var_cas_isNoReturn)._operator_not ()).isBuiltAndTrue ()) {
      operand_8676->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine should be called with a RCALL, CALL or JSR instruction") COMMA_SOURCE_FILE_AT_LINE (260)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_literalOperation.check'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_literalOperation__check (C_Compiler & _inLexique,
                                const cPtr_instruction_literalOperation * operand_9256,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inCurrentBank */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9256 != NULL) {
    if (((operand_9256->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (274)))._operator_strictSup (GGS_uint (true, 255U))).isBuiltAndTrue ()) {
      operand_9256->mLiteralValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the literal value ("))._operator_concat (operand_9256->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (275)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (275))))._operator_concat (GGS_string (true, ") should be lower or equal to 255")) COMMA_SOURCE_FILE_AT_LINE (275)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@instruction_LFSR.check'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LFSR__check (C_Compiler & _inLexique,
                                const cPtr_instruction_LFSR * operand_9785,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_uint   /* var_cas_inCurrentBank */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9785 != NULL) {
    if (((operand_9785->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (289)))._operator_strictSup (GGS_uint (true, 2U))).isBuiltAndTrue ()) {
      operand_9785->mFSRindex.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the LFSR register index ("))._operator_concat (operand_9785->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (290)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (290))))._operator_concat (GGS_string (true, ") should be lower or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (290)) ;
    }
    const GGS_registerExpression  _temp_10191 = operand_9785->mRegisterExpression ;
    if (_temp_10191._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterDeclaration _method = findCategoryMethod__registerExpression__checkRegisterDeclaration (_temp_10191._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_10191 (HERE), var_cas_inRegisterTable COMMA_SOURCE_FILE_AT_LINE (292)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@instruction_MOVAW.check'                 *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVAW__check (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVAW * operand_10366,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_uint   /* var_cas_inCurrentBank */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10366 != NULL) {
    const GGS_registerExpression  _temp_10616 = operand_10366->mRegisterExpression ;
    if (_temp_10616._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 _method = findCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 (_temp_10616._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_10616 (HERE), var_cas_inRegisterTable COMMA_SOURCE_FILE_AT_LINE (305)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@instruction_computed_retlw.check'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_retlw__check (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_retlw * operand_10822,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inCurrentBank */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10822 != NULL) {
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      operand_10822->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a \"noreturn\" routine does not accept computed retlw instruction") COMMA_SOURCE_FILE_AT_LINE (322)) ;
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_10822->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "an interrupt routine does not accept computed retlw instruction") COMMA_SOURCE_FILE_AT_LINE (324)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@instruction_MNOP.check'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MNOP__check (C_Compiler & _inLexique,
                                const cPtr_instruction_MNOP * operand_11524,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inCurrentBank */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11524 != NULL) {
    if (((operand_11524->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (338)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      operand_11524->mOccurrenceFactor.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "occurrence argument is zero: no generated code") COMMA_SOURCE_FILE_AT_LINE (339)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@instruction_computed_bra.check'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_bra__check (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_bra * operand_12027,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inCurrentBank */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12027 != NULL) {
    {
      GGS_lstringlist::cEnumerator enumerator_12250 (operand_12027->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_12250 = NULL ;
      while (((operand_12250 = enumerator_12250.nextObject ()))) {
        macroValidPointer (operand_12250) ;
        GGS_bool var_cas_isNoReturn ;
        const GGS_routineMap  _temp_12308 = var_cas_inRoutineMap ;
        if (_temp_12308._isBuilt ()) {
          _temp_12308 (HERE)->method_searchKey (_inLexique, operand_12250->mValue, var_cas_isNoReturn COMMA_SOURCE_FILE_AT_LINE (355)) ;
        }
        if (((var_cas_isNoReturn)._operator_not ()).isBuiltAndTrue ()) {
          operand_12250->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "for being named in a computed bra, the '"))._operator_concat (operand_12250->mValue))._operator_concat (GGS_string (true, "' routine should be declared with the \"noreturn\" qualifier")) COMMA_SOURCE_FILE_AT_LINE (357)) ;
        }
      }
    }
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      operand_12027->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine does not accept computed bra instruction") COMMA_SOURCE_FILE_AT_LINE (363)) ;
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_12027->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "an interrupt routine does not accept computed bra instruction") COMMA_SOURCE_FILE_AT_LINE (366)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@instruction_computed_goto.check'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_goto__check (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_goto * operand_13015,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inCurrentBank */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13015 != NULL) {
    {
      GGS_lstringlist::cEnumerator enumerator_13238 (operand_13015->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_13238 = NULL ;
      while (((operand_13238 = enumerator_13238.nextObject ()))) {
        macroValidPointer (operand_13238) ;
        GGS_bool var_cas_isNoReturn ;
        const GGS_routineMap  _temp_13296 = var_cas_inRoutineMap ;
        if (_temp_13296._isBuilt ()) {
          _temp_13296 (HERE)->method_searchKey (_inLexique, operand_13238->mValue, var_cas_isNoReturn COMMA_SOURCE_FILE_AT_LINE (382)) ;
        }
        if (((var_cas_isNoReturn)._operator_not ()).isBuiltAndTrue ()) {
          operand_13238->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "for being named in a computed goto, the '"))._operator_concat (operand_13238->mValue))._operator_concat (GGS_string (true, "' routine should be declared with the \"noreturn\" qualifier")) COMMA_SOURCE_FILE_AT_LINE (384)) ;
        }
      }
    }
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      operand_13015->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine does not accept computed goto instruction") COMMA_SOURCE_FILE_AT_LINE (390)) ;
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_13015->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "an interrupt routine does not accept computed goto instruction") COMMA_SOURCE_FILE_AT_LINE (393)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Category method '@instruction_FOREVER.check'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FOREVER__check (C_Compiler & _inLexique,
                                const cPtr_instruction_FOREVER * operand_14000,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inCurrentBank */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14000 != NULL) {
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      operand_14000->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine does not accept the \"forever\" instruction") COMMA_SOURCE_FILE_AT_LINE (410)) ;
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_14000->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "an interrupt routine does not accept the \"forever\" instruction") COMMA_SOURCE_FILE_AT_LINE (413)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_IF_FA_SEMI_COLON.check'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_FA_SEMI_COLON__check (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_FA_SEMI_COLON * operand_14711,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_uint   var_cas_inCurrentBank,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14711 != NULL) {
    GGS_bitSliceTable  automatic_var_6 ;
    const GGS_registerExpression  _temp_14933 = operand_14711->mRegisterExpression ;
    if (_temp_14933._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_14933._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_14933 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_inCurrentBank, automatic_var_6 COMMA_SOURCE_FILE_AT_LINE (427)) ;
      }
    }
    GGS_bool var_cas_unusedContinuesInSequence ;
    var_cas_unusedContinuesInSequence = GGS_bool (true, true) ;
    const GGS_piccolo_instruction  _temp_15144 = operand_14711->mInstruction ;
    if (_temp_15144._isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__check _method = findCategoryMethod__piccolo_instruction__check (_temp_15144._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_15144 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_inCurrentBank, var_cas_unusedContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (435)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@instruction_IF_BitTest.check'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_BitTest__check (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_BitTest * operand_15429,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_uint   var_cas_inCurrentBank,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15429 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    const GGS_registerExpression  _temp_15684 = operand_15429->mRegisterExpression ;
    if (_temp_15684._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_15684._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_15684 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_inCurrentBank, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (456)) ;
      }
    }
    const GGS_bitNumberExpression  _temp_15829 = operand_15429->mBitNumber ;
    if (_temp_15829._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__checkBitNumber _method = findCategoryMethod__bitNumberExpression__checkBitNumber (_temp_15829._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_15829 (HERE), var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (462)) ;
      }
    }
    GGS_bool var_cas_unusedContinuesInSequence ;
    var_cas_unusedContinuesInSequence = GGS_bool (true, true) ;
    const GGS_piccolo_instruction  _temp_15954 = operand_15429->mInstruction ;
    if (_temp_15954._isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__check _method = findCategoryMethod__piccolo_instruction__check (_temp_15954._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_15954 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_inCurrentBank, var_cas_unusedContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (465)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Virtual Table for category method '@conditionExpression.checkCondition'   *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__conditionExpression__checkCondition> gDispatchTableFor__conditionExpression__checkCondition ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__conditionExpression__checkCondition (typeCategoryMethod__conditionExpression__checkCondition inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__conditionExpression__checkCondition.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__conditionExpression__checkCondition
findCategoryMethod__conditionExpression__checkCondition (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__conditionExpression__checkCondition result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__conditionExpression__checkCondition.count ()) {
    result = gDispatchTableFor__conditionExpression__checkCondition (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__conditionExpression__checkCondition (superClassPtr) ;
      gDispatchTableFor__conditionExpression__checkCondition.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@bcc_in_structured_if_condition.checkCondition'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bcc_in_structured_if_condition__checkCondition (C_Compiler &,
                                const cPtr_bcc_in_structured_if_condition * operand_16475,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inCurrentBank */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16475 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@registerComparisonCondition.checkCondition'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerComparisonCondition__checkCondition (C_Compiler & _inLexique,
                                const cPtr_registerComparisonCondition * operand_16745,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_uint   var_cas_inCurrentBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16745 != NULL) {
    GGS_bitSliceTable  automatic_var_7 ;
    const GGS_registerExpression  _temp_16877 = operand_16745->mRegisterExpression ;
    if (_temp_16877._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_16877._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_16877 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_inCurrentBank, automatic_var_7 COMMA_SOURCE_FILE_AT_LINE (499)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@incDecRegisterInCondition.checkCondition'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__incDecRegisterInCondition__checkCondition (C_Compiler & _inLexique,
                                const cPtr_incDecRegisterInCondition * operand_17134,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_uint   var_cas_inCurrentBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17134 != NULL) {
    GGS_bitSliceTable  automatic_var_8 ;
    const GGS_registerExpression  _temp_17266 = operand_17134->mRegisterExpression ;
    if (_temp_17266._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_17266._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_17266 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_inCurrentBank, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (514)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@registerTestCondition.checkCondition'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerTestCondition__checkCondition (C_Compiler & _inLexique,
                                const cPtr_registerTestCondition * operand_17519,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_uint   var_cas_inCurrentBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17519 != NULL) {
    GGS_bitSliceTable  automatic_var_9 ;
    const GGS_registerExpression  _temp_17651 = operand_17519->mRegisterExpression ;
    if (_temp_17651._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_17651._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_17651 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_inCurrentBank, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (529)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@negateCondition.checkCondition'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__negateCondition__checkCondition (C_Compiler & _inLexique,
                                const cPtr_negateCondition * operand_17898,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_uint   var_cas_inCurrentBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17898 != NULL) {
    const GGS_conditionExpression  _temp_18021 = operand_17898->mCondition ;
    if (_temp_18021._isBuilt ()) {
      typeCategoryMethod__conditionExpression__checkCondition _method = findCategoryMethod__conditionExpression__checkCondition (_temp_18021._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_18021 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_inCurrentBank COMMA_SOURCE_FILE_AT_LINE (544)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@andCondition.checkCondition'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__andCondition__checkCondition (C_Compiler & _inLexique,
                                const cPtr_andCondition * operand_18236,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_uint   var_cas_inCurrentBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18236 != NULL) {
    const GGS_conditionExpression  _temp_18364 = operand_18236->mLeftExpression ;
    if (_temp_18364._isBuilt ()) {
      typeCategoryMethod__conditionExpression__checkCondition _method = findCategoryMethod__conditionExpression__checkCondition (_temp_18364._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_18364 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_inCurrentBank COMMA_SOURCE_FILE_AT_LINE (558)) ;
      }
    }
    const GGS_conditionExpression  _temp_18474 = operand_18236->mRightExpression ;
    if (_temp_18474._isBuilt ()) {
      typeCategoryMethod__conditionExpression__checkCondition _method = findCategoryMethod__conditionExpression__checkCondition (_temp_18474._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_18474 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_inCurrentBank COMMA_SOURCE_FILE_AT_LINE (563)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@bitTest_in_structured_if_condition.checkCondition'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitTest_in_structured_if_condition__checkCondition (C_Compiler & _inLexique,
                                const cPtr_bitTest_in_structured_if_condition * operand_18711,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_uint   var_cas_inCurrentBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18711 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    const GGS_registerExpression  _temp_18876 = operand_18711->mRegisterExpression ;
    if (_temp_18876._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_18876._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_18876 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_inCurrentBank, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (578)) ;
      }
    }
    const GGS_bitNumberExpression  _temp_19021 = operand_18711->mBitNumber ;
    if (_temp_19021._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__checkBitNumber _method = findCategoryMethod__bitNumberExpression__checkBitNumber (_temp_19021._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_19021 (HERE), var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (584)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "checkInstructionList"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkInstructionList (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_uint   var_cas_inCurrentBank,
                                GGS_bool & var_cas_outContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind,
                                const GGS_instructionList   var_cas_inInstructionList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkInstructionList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outContinuesInSequence = GGS_bool (true, true) ;
  {
    GGS_instructionList::cEnumerator enumerator_19448 (var_cas_inInstructionList, true) ;
    const GGS_instructionList::cElement * operand_19448 = NULL ;
    while (((operand_19448 = enumerator_19448.nextObject ()))) {
      macroValidPointer (operand_19448) ;
      if (((var_cas_outContinuesInSequence)._operator_not ()).isBuiltAndTrue ()) {
        operand_19448->mInstruction.reader_mInstructionLocation (_inLexique COMMA_SOURCE_FILE_AT_LINE (601)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unreachable code") COMMA_SOURCE_FILE_AT_LINE (601)) ;
        var_cas_outContinuesInSequence = GGS_bool (true, true) ;
      }
      const GGS_piccolo_instruction  _temp_19649 = operand_19448->mInstruction ;
      if (_temp_19649._isBuilt ()) {
        typeCategoryMethod__piccolo_instruction__check _method = findCategoryMethod__piccolo_instruction__check (_temp_19649._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_19649 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_inCurrentBank, var_cas_outContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (604)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkInstructionList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@instruction_structured_if.check'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_structured_if__check (C_Compiler & _inLexique,
                                const cPtr_instruction_structured_if * operand_19965,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_uint   var_cas_inCurrentBank,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19965 != NULL) {
    const GGS_conditionExpression  _temp_20194 = operand_19965->mIfCondition ;
    if (_temp_20194._isBuilt ()) {
      typeCategoryMethod__conditionExpression__checkCondition _method = findCategoryMethod__conditionExpression__checkCondition (_temp_20194._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_20194 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_inCurrentBank COMMA_SOURCE_FILE_AT_LINE (626)) ;
      }
    }
    ::routine_checkInstructionList (_inLexique,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inCurrentBank,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind,  operand_19965->mThenInstructionList COMMA_SOURCE_FILE_AT_LINE (630)) ;
    {
      GGS_partList::cEnumerator enumerator_20524 (operand_19965->mElsifPartList, true) ;
      const GGS_partList::cElement * operand_20524 = NULL ;
      while (((operand_20524 = enumerator_20524.nextObject ()))) {
        macroValidPointer (operand_20524) ;
        const GGS_conditionExpression  _temp_20558 = operand_20524->mCondition ;
        if (_temp_20558._isBuilt ()) {
          typeCategoryMethod__conditionExpression__checkCondition _method = findCategoryMethod__conditionExpression__checkCondition (_temp_20558._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_20558 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_inCurrentBank COMMA_SOURCE_FILE_AT_LINE (643)) ;
          }
        }
        GGS_bool var_cas_continuesInSequence ;
        ::routine_checkInstructionList (_inLexique,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inCurrentBank,  var_cas_continuesInSequence,  var_cas_inRoutineKind,  operand_20524->mInstructionList COMMA_SOURCE_FILE_AT_LINE (648)) ;
        var_cas_ioContinuesInSequence = (var_cas_ioContinuesInSequence)._operator_or (var_cas_continuesInSequence) ;
      }
    }
    GGS_bool var_cas_continuesInSequence ;
    ::routine_checkInstructionList (_inLexique,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inCurrentBank,  var_cas_continuesInSequence,  var_cas_inRoutineKind,  operand_19965->mElseInstructionList COMMA_SOURCE_FILE_AT_LINE (661)) ;
    var_cas_ioContinuesInSequence = (var_cas_ioContinuesInSequence)._operator_or (var_cas_continuesInSequence) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@instruction_do_while.check'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_do_while__check (C_Compiler & _inLexique,
                                const cPtr_instruction_do_while * operand_21422,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_uint   var_cas_inCurrentBank,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21422 != NULL) {
    ::routine_checkInstructionList (_inLexique,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inCurrentBank,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind,  operand_21422->mRepeatedInstructionList COMMA_SOURCE_FILE_AT_LINE (683)) ;
    {
      GGS_partList::cEnumerator enumerator_21858 (operand_21422->mWhilePartList, true) ;
      const GGS_partList::cElement * operand_21858 = NULL ;
      while (((operand_21858 = enumerator_21858.nextObject ()))) {
        macroValidPointer (operand_21858) ;
        const GGS_conditionExpression  _temp_21892 = operand_21858->mCondition ;
        if (_temp_21892._isBuilt ()) {
          typeCategoryMethod__conditionExpression__checkCondition _method = findCategoryMethod__conditionExpression__checkCondition (_temp_21892._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_21892 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_inCurrentBank COMMA_SOURCE_FILE_AT_LINE (696)) ;
          }
        }
        ::routine_checkInstructionList (_inLexique,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inCurrentBank,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind,  operand_21858->mInstructionList COMMA_SOURCE_FILE_AT_LINE (700)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@instruction_IF_IncDec.check'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_IncDec__check (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_IncDec * operand_22340,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_uint   var_cas_inCurrentBank,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22340 != NULL) {
    GGS_bitSliceTable  automatic_var_10 ;
    const GGS_registerExpression  _temp_22562 = operand_22340->mRegisterExpression ;
    if (_temp_22562._isBuilt ()) {
      typeCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess _method = findCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (_temp_22562._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_22562 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_inCurrentBank, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (723)) ;
      }
    }
    GGS_bool var_cas_unusedContinuesInSequence ;
    var_cas_unusedContinuesInSequence = GGS_bool (true, true) ;
    const GGS_piccolo_instruction  _temp_22773 = operand_22340->mInstruction ;
    if (_temp_22773._isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__check _method = findCategoryMethod__piccolo_instruction__check (_temp_22773._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_22773 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_inCurrentBank, var_cas_unusedContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (731)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "semanticsCheckings"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_semanticsCheckings (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_piccoloModel  var_cas_inPiccoloModel,
                                const GGS_bool  /* var_cas_inHasHighInterrupt */,
                                const GGS_bool  /* var_cas_inHasLowInterrupt */,
                                GGS_string & /* var_cas_ioListFileContents */ COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_semanticsCheckings at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_routineMap  var_cas_routineMap ;
  var_cas_routineMap = GGS_routineMap ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_routineDefinitionList::cEnumerator enumerator_23357 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (753)), true) ;
    const GGS_routineDefinitionList::cElement * operand_23357 = NULL ;
    while (((operand_23357 = enumerator_23357.nextObject ()))) {
      macroValidPointer (operand_23357) ;
      var_cas_routineMap.modifier_insertKey (_inLexique, operand_23357->mRoutineName, operand_23357->mIsNoReturn COMMA_SOURCE_FILE_AT_LINE (754)) ;
    }
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_23533 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (757)), true) ;
    const GGS_routineDefinitionList::cElement * operand_23533 = NULL ;
    while (((operand_23533 = enumerator_23533.nextObject ()))) {
      macroValidPointer (operand_23533) ;
      GGS_bool var_cas_continuesInSequence ;
      var_cas_continuesInSequence = GGS_bool (true, true) ;
      GGS_uint  var_cas_currentBank ;
      var_cas_currentBank = operand_23533->mBanksel.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (759)) ;
      GGS_routineKind var_cas_routineKind ;
      if ((operand_23533->mIsNoReturn).isBuiltAndTrue ()) {
        var_cas_routineKind = GGS_routineKind::constructor_noReturnRoutine (_inLexique COMMA_HERE) ;
      }else{
        var_cas_routineKind = GGS_routineKind::constructor_regularRoutine (_inLexique COMMA_HERE) ;
      }
      {
        GGS_instructionList::cEnumerator enumerator_23855 (operand_23533->mInstructionList, true) ;
        const GGS_instructionList::cElement * operand_23855 = NULL ;
        while (((operand_23855 = enumerator_23855.nextObject ()))) {
          macroValidPointer (operand_23855) ;
          if (((var_cas_continuesInSequence)._operator_not ()).isBuiltAndTrue ()) {
            operand_23855->mInstruction.reader_mInstructionLocation (_inLexique COMMA_SOURCE_FILE_AT_LINE (768)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unreachable code") COMMA_SOURCE_FILE_AT_LINE (768)) ;
            var_cas_continuesInSequence = GGS_bool (true, true) ;
          }
          const GGS_piccolo_instruction  _temp_24059 = operand_23855->mInstruction ;
          if (_temp_24059._isBuilt ()) {
            typeCategoryMethod__piccolo_instruction__check _method = findCategoryMethod__piccolo_instruction__check (_temp_24059._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_24059 (HERE), var_cas_inAccessBankSplitOffset, var_cas_routineMap, var_cas_inRegisterTable, var_cas_currentBank, var_cas_continuesInSequence, var_cas_routineKind COMMA_SOURCE_FILE_AT_LINE (771)) ;
            }
          }
        }
      }
      if (((operand_23533->mIsNoReturn)._operator_and (var_cas_continuesInSequence)).isBuiltAndTrue ()) {
        operand_23533->mEndOfRoutineLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "execution should not reach the end of a \"noreturn\" routine") COMMA_SOURCE_FILE_AT_LINE (781)) ;
      }
    }
  }
  {
    GGS_interruptDefinitionList::cEnumerator enumerator_24478 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (785)), true) ;
    const GGS_interruptDefinitionList::cElement * operand_24478 = NULL ;
    while (((operand_24478 = enumerator_24478.nextObject ()))) {
      macroValidPointer (operand_24478) ;
      GGS_bool var_cas_continuesInSequence ;
      var_cas_continuesInSequence = GGS_bool (true, true) ;
      GGS_uint  var_cas_currentBank ;
      var_cas_currentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
      {
        GGS_instructionList::cEnumerator enumerator_24615 (operand_24478->mInstructionList, true) ;
        const GGS_instructionList::cElement * operand_24615 = NULL ;
        while (((operand_24615 = enumerator_24615.nextObject ()))) {
          macroValidPointer (operand_24615) ;
          if (((var_cas_continuesInSequence)._operator_not ()).isBuiltAndTrue ()) {
            operand_24615->mInstruction.reader_mInstructionLocation (_inLexique COMMA_SOURCE_FILE_AT_LINE (790)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unreachable code") COMMA_SOURCE_FILE_AT_LINE (790)) ;
            var_cas_continuesInSequence = GGS_bool (true, true) ;
          }
          const GGS_piccolo_instruction  _temp_24819 = operand_24615->mInstruction ;
          if (_temp_24819._isBuilt ()) {
            typeCategoryMethod__piccolo_instruction__check _method = findCategoryMethod__piccolo_instruction__check (_temp_24819._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_24819 (HERE), var_cas_inAccessBankSplitOffset, var_cas_routineMap, var_cas_inRegisterTable, var_cas_currentBank, var_cas_continuesInSequence, GGS_routineKind::constructor_interruptRoutine (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (793)) ;
            }
          }
        }
      }
      if (((var_cas_continuesInSequence)._operator_not ()).isBuiltAndTrue ()) {
        operand_24478->mEndOfInterruptLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "execution cannot reach the end of the interrupt routine") COMMA_SOURCE_FILE_AT_LINE (803)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_semanticsCheckings\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticsCheckings (void) {
 enterCategoryMethod__bitNumberExpression__checkBitNumber ((typeCategoryMethod__bitNumberExpression__checkBitNumber) category_method__bitNumberLiteralValue__checkBitNumber, gClassInfoFor__bitNumberLiteralValue.slotID ()) ;
 enterCategoryMethod__bitNumberExpression__checkBitNumber ((typeCategoryMethod__bitNumberExpression__checkBitNumber) category_method__bitNumberLabelValue__checkBitNumber, gClassInfoFor__bitNumberLabelValue.slotID ()) ;
 enterCategoryMethod__registerExpression__checkRegisterDeclaration (category_method__registerExpression__checkRegisterDeclaration, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__registerExpression__checkRegisterDeclarationAndAddressLowerThan256 (category_method__registerExpression__checkRegisterDeclarationAndAddressLowerThan256, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__registerExpression__checkRegisterAddressingAndBankAccess (category_method__registerExpression__checkRegisterAddressingAndBankAccess, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check (category_method__piccolo_instruction__check, gClassInfoFor__piccolo_instruction.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_FDA__check, gClassInfoFor__instruction_FDA.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_FA__check, gClassInfoFor__instruction_FA.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_MOVFF__check, gClassInfoFor__instruction_MOVFF.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_FBA__check, gClassInfoFor__instruction_FBA.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_JSR__check, gClassInfoFor__instruction_JSR.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_JUMP__check, gClassInfoFor__instruction_JUMP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_JUMPCC__check, gClassInfoFor__instruction_JUMPCC.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_literalOperation__check, gClassInfoFor__instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_LFSR__check, gClassInfoFor__instruction_LFSR.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_MOVAW__check, gClassInfoFor__instruction_MOVAW.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_computed_retlw__check, gClassInfoFor__instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_MNOP__check, gClassInfoFor__instruction_MNOP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_computed_bra__check, gClassInfoFor__instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_computed_goto__check, gClassInfoFor__instruction_computed_goto.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_FOREVER__check, gClassInfoFor__instruction_FOREVER.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_IF_FA_SEMI_COLON__check, gClassInfoFor__instruction_IF_FA_SEMI_COLON.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_IF_BitTest__check, gClassInfoFor__instruction_IF_BitTest.slotID ()) ;
 enterCategoryMethod__conditionExpression__checkCondition ((typeCategoryMethod__conditionExpression__checkCondition) category_method__bcc_in_structured_if_condition__checkCondition, gClassInfoFor__bcc_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__conditionExpression__checkCondition ((typeCategoryMethod__conditionExpression__checkCondition) category_method__registerComparisonCondition__checkCondition, gClassInfoFor__registerComparisonCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__checkCondition ((typeCategoryMethod__conditionExpression__checkCondition) category_method__incDecRegisterInCondition__checkCondition, gClassInfoFor__incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__checkCondition ((typeCategoryMethod__conditionExpression__checkCondition) category_method__registerTestCondition__checkCondition, gClassInfoFor__registerTestCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__checkCondition ((typeCategoryMethod__conditionExpression__checkCondition) category_method__negateCondition__checkCondition, gClassInfoFor__negateCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__checkCondition ((typeCategoryMethod__conditionExpression__checkCondition) category_method__andCondition__checkCondition, gClassInfoFor__andCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__checkCondition ((typeCategoryMethod__conditionExpression__checkCondition) category_method__bitTest_in_structured_if_condition__checkCondition, gClassInfoFor__bitTest_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_structured_if__check, gClassInfoFor__instruction_structured_if.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_do_while__check, gClassInfoFor__instruction_do_while.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__check ((typeCategoryMethod__piccolo_instruction__check) category_method__instruction_IF_IncDec__check, gClassInfoFor__instruction_IF_IncDec.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_semanticsCheckings (prologueRoutineFor_semanticsCheckings,
                                   NULL) ;

//---------------------------------------------------------------------------*

