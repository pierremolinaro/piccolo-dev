semantics baseline_ast :
import "baseline_instruction_groups.gSemantics" ;
import "generic_metamodel.gSemantics" ;

#----------------------------------------------------*

abstract class @baseline_instruction {
  @location mInstructionLocation ;
}

#----------------------------------------------------*

list @baseline_instructionList {
  @baseline_instruction mInstruction ;
}

#----------------------------------------------------*

class @baseline_instruction_FD extends @baseline_instruction {
  @baseline_instruction_FD_base_code mInstruction_FD_base_code ;
  @registerExpression mRegisterExpression ;
  @bool m_W_isDestination ;
}

#----------------------------------------------------*

class @baseline_instruction_F extends @baseline_instruction {
  @baseline_F_instruction_base_code mFAinstruction ;
  @registerExpression mRegisterExpression ;
}

#----------------------------------------------------*

class @baseline_instruction_FB extends @baseline_instruction {
  @baseline_bit_oriented_op mBitOrientedOp ;
  @registerExpression mRegisterExpression ;
  @bitNumberExpression mBitNumber ;
}

#----------------------------------------------------*

class @baseline_instruction_CALL extends @baseline_instruction {
  @lstring mTargetLabel ;
}

#----------------------------------------------------*

class @baseline_instruction_GOTO extends @baseline_instruction {
  @lstring mTargetLabel ;
}

#----------------------------------------------------*

class @baseline_instruction_WO_OPERAND extends @baseline_instruction {
  @baseline_WO_OPERAND_group mInstruction ;
}

#----------------------------------------------------*

class @baseline_instruction_TRIS extends @baseline_instruction {
  @lstring mOperand ;
}

#----------------------------------------------------*

class @baseline_instruction_literalOperation extends @baseline_instruction {
  @baseline_literal_instruction_opcode mLiteralInstruction ;
  @immediatExpression mImmediatExpression ;
}

#----------------------------------------------------*

class @baseline_instruction_MNOP extends @baseline_instruction {
  @luint mOccurrenceFactor ;
}

#----------------------------------------------------*

class @baseline_instruction_FOREVER extends @baseline_instruction {
  @baseline_instructionList mInstructionList ;
  @location mEndOfInstructionList ;
}

#----------------------------------------------------*

abstract class @baseline_instruction_IF_SEMI_COLON extends @baseline_instruction {
  @baseline_instruction mInstruction ;
}

#----------------------------------------------------*

class @baseline_instruction_IF_BitTest extends @baseline_instruction_IF_SEMI_COLON {
  @bool mSkipIfSet ;
  @registerExpression mRegisterExpression ;
  @bitNumberExpression mBitNumber ;
}

method @baseline_instruction_IF_BitTest getBaseCode !@uint outBaseCode :
  if mSkipIfSet then
    outBaseCode := 0x1C00 ; # BTFSS
  else
    outBaseCode := 0x1800 ; # BTFSC
  end if ;
end method ; 

method @baseline_instruction_IF_BitTest getMnemonic !@string outMnemonic :
  if mSkipIfSet then
    outMnemonic := "BTFSS" ;
  else
    outMnemonic := "BTFSC" ;
  end if ;
end method ; 


#----------------------------------------------------*

class @baseline_instruction_IF_IncDec extends @baseline_instruction_IF_SEMI_COLON {
  @bool mIncrement ;
  @registerExpression mRegisterExpression ;
  @bool m_W_isDestination ;
}

#----------------------------------------------------*

abstract class @baseline_conditionExpression {
}

#----------------------------------------------------*

class @baseline_incDecRegisterInCondition extends @baseline_conditionExpression {
  @registerExpression mRegisterExpression ;
  @bool mIncrement ;
  @bool m_W_isDestination ;
  @bool mBranchIfZero ;
}

#----------------------------------------------------*

class @baseline_negateCondition extends @baseline_conditionExpression {
  @baseline_conditionExpression mCondition ;
}

#----------------------------------------------------*

class @baseline_andCondition extends @baseline_conditionExpression {
  @baseline_conditionExpression mLeftExpression ;
  @baseline_conditionExpression mRightExpression ;
}

#----------------------------------------------------*

class @baseline_bitTest_in_structured_if_condition extends @baseline_conditionExpression {
  @registerExpression mRegisterExpression ;
  @bitNumberExpression mBitNumber ;
  @bool mBTFSSinstruction ;
}

#----------------------------------------------------*

class @baseline_instruction_structured_if extends @baseline_instruction {
  @baseline_conditionExpression mIfCondition ;
  @baseline_instructionList mThenInstructionList ;
  @baseline_instructionList mElseInstructionList ;
  @location mEndOfElsePartLocation ;
}

#----------------------------------------------------*

list @baseline_partList {
  @baseline_conditionExpression mCondition ;
  @baseline_instructionList mInstructionList ;
  @location mEndOfPartLocation ;
}

#----------------------------------------------------*

class @baseline_instruction_do_while extends @baseline_instruction {
  @baseline_instructionList mRepeatedInstructionList ;
  @location mEndOfRepeatedInstructionList ;
  @baseline_partList mWhilePartList ;
}

#----------------------------------------------------*

list @baseline_routineDefinitionList {
  @lstring mRoutineName ;
  @luint mPage ;
  @bool mIsNoReturn ;
  @baseline_instructionList mInstructionList ;
  @location mEndOfRoutineLocation ;
}

#----------------------------------------------------*

struct @baseline_model {
  @lstring mProgramName ;
  @lstring mDeviceName ;
  @configDefinitionList mConfigDefinitionList ;
  @bool mAcceptDefaultConfiguration ;
  @ramDefinitionList mRamDefinitionList ;
  @constantDefinitionList mConstantDefinitionList ;
  @baseline_routineDefinitionList mRoutineDefinitionList ;
  @location mEndOfProgram ;
}

#----------------------------------------------------*

end semantics ;
