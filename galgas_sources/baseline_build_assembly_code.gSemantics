semantics baseline_build_assembly_code :
import "ipic_generic.gSemantics" ;
import "baseline_intermediate_classes.gSemantics" ;
import "baseline_intermediate_instruction_length.gSemantics" ;
import "baseline_intermediate_instruction_print.gSemantics" ;
import "baseline_assembly_classes.gSemantics" ;

#----------------------------------------------------------------------------*
#                                                                            *
#               C O D E    G E N E R A T I O N                               *
#                                                                            *
#----------------------------------------------------------------------------*

abstract method @baseline_intermediate_instruction generateAssemblyCode
  ??@baseline_intermediate_registerExpression inSTATUSregister
  ??@bitSliceTable inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList
;

#----------------------------------------------------------------------------*

override method @baseline_intermediate_NULL generateAssemblyCode
  ??@baseline_intermediate_registerExpression unused inSTATUSregister
  ??@bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList unused ioAssemblyInstructionList
:
end method ;

#----------------------------------------------------------------------------*

override method @baseline_intermediate_pseudo_PAGE generateAssemblyCode
  ??@baseline_intermediate_registerExpression unused inSTATUSregister
  ??@bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList
:
  ioAssemblyInstructionList += ![@baseline_assembly_pseudo_ORG new !mPage * 512] ;
end method ;

#----------------------------------------------------------------------------*

override method @baseline_intermediate_pseudo_BEGIN_ROUTINE generateAssemblyCode
  ??@baseline_intermediate_registerExpression unused inSTATUSregister
  ??@bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList
:
  ioAssemblyInstructionList += ![@baseline_assembly_pseudo_BEGINOFROUTINE new !mRoutineName !mIsRegular] ;
end method ;

#----------------------------------------------------------------------------*

override method @baseline_intermediate_pseudo_END_ROUTINE generateAssemblyCode
  ??@baseline_intermediate_registerExpression unused inSTATUSregister
  ??@bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList
:
  ioAssemblyInstructionList += ![@baseline_assembly_pseudo_ENDOFROUTINE new !mRoutineName !mPage] ;
end method ;

#----------------------------------------------------------------------------*

override method @baseline_intermediate_instruction_FD generateAssemblyCode
  ??@baseline_intermediate_registerExpression unused inSTATUSregister
  ??@bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList
:
  ioAssemblyInstructionList += ![@baseline_assembly_instruction_FD new
    !mInstructionLocation
    !mInstruction
    !mRegisterDescription
    !m_W_isDestination
  ] ;
end method ;

#----------------------------------------------------------------------------*

override method @baseline_intermediate_instruction_F generateAssemblyCode
  ??@baseline_intermediate_registerExpression unused inSTATUSregister
  ??@bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList
:
  ioAssemblyInstructionList += ![@baseline_assembly_instruction_F new
    !mInstructionLocation
    !mInstruction
    !mRegisterDescription
  ] ;
end method ;

#----------------------------------------------------------------------------*

override method @baseline_intermediate_instruction_FB generateAssemblyCode
  ??@baseline_intermediate_registerExpression unused inSTATUSregister
  ??@bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList
:
  ioAssemblyInstructionList += ![@baseline_assembly_instruction_FB new
    !mInstructionLocation
    !mInstruction
    !mRegisterDescription
    !mBitNumber
  ] ;
end method ;

#----------------------------------------------------------------------------*

override method @baseline_intermediate_instruction_BitTestSkip generateAssemblyCode
  ??@baseline_intermediate_registerExpression unused inSTATUSregister
  ??@bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList
:
  ioAssemblyInstructionList += ![@baseline_assembly_instruction_BitTestSkip new
    !mInstructionLocation
    !mSkipIfSet
    !mRegisterDescription
    !mBitNumber
  ] ;
end method ;

#----------------------------------------------------------------------------*

override method @baseline_intermediate_WO_OPERAND generateAssemblyCode
  ??@baseline_intermediate_registerExpression unused inSTATUSregister
  ??@bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList
:
  ioAssemblyInstructionList += ![@baseline_assembly_WO_OPERAND new
    !mInstructionLocation
    !mInstruction
  ] ;
end method ;

#----------------------------------------------------------------------------*

override method @baseline_intermediate_TRIS generateAssemblyCode
  ??@baseline_intermediate_registerExpression unused inSTATUSregister
  ??@bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList
:
  ioAssemblyInstructionList += ![@baseline_assembly_TRIS new
    !mInstructionLocation
    !mOperand
    !mOpcode
  ] ;
end method ;

#----------------------------------------------------------------------------*

override method @baseline_intermediate_instruction_literalOperation generateAssemblyCode
  ??@baseline_intermediate_registerExpression unused inSTATUSregister
  ??@bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList
:
  ioAssemblyInstructionList += ![@baseline_assembly_instruction_literalOperation new
    !mInstructionLocation
    !mInstruction
    !mLiteralValue
  ] ;
end method ;

#----------------------------------------------------------------------------*

override method @baseline_intermediate_pseudo_LABEL generateAssemblyCode
  ??@baseline_intermediate_registerExpression unused inSTATUSregister
  ??@bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList
:
  ioAssemblyInstructionList += ![@baseline_assembly_pseudo_LABEL new
    !mLabel
  ] ;
end method ;

#----------------------------------------------------------------------------*

override method @baseline_intermediate_instruction_MNOP generateAssemblyCode
  ??@baseline_intermediate_registerExpression unused inSTATUSregister
  ??@bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList
:
  if [mOccurrenceFactor uint] == 0 then
    warning mOccurrenceFactor: "No generated code" ;
  end if ;
  @uint idx := 0 ;
  loop [mOccurrenceFactor uint] :
  while idx < [mOccurrenceFactor uint]
  do
    ioAssemblyInstructionList += ![@baseline_assembly_WO_OPERAND new
      !mInstructionLocation
      ![@baseline_WO_OPERAND_group NOP]
    ] ;
    idx ++ ;
  end loop ;
end method ;

#----------------------------------------------------------------------------*

override method @baseline_intermediate_GOTO generateAssemblyCode
  ??@baseline_intermediate_registerExpression inSTATUSregister
  ??@bitSliceTable inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList
:
#---
  @uint pageChangeFlags := mCurrentPage ^ mTargetPage ;
  @uint targetPageFlags := mTargetPage ;
  @uint idx := 0 ;
  loop 8 while pageChangeFlags != 0 do
    if (pageChangeFlags & 1) != 0 then
      @uint bitIndex ;
      if [inStatusRegisterBitSliceTable hasKey !"PA"] then
        [inStatusRegisterBitSliceTable searchKey 
          ![@lstring new !"PA" !mInstructionLocation]
          ?@uint sliceIndex
          ?@uint sliceSize
        ] ;
        if idx >= sliceSize then
          error mInstructionLocation : "internal error, idx (" . idx . ") >= sliceSize (" . sliceSize . ")" ;
        end if ;
        bitIndex := sliceIndex + idx ;
      elsif [inStatusRegisterBitSliceTable hasKey !"PA". idx] then
        [inStatusRegisterBitSliceTable searchKey 
          ![@lstring new !"PA". idx !mInstructionLocation]
          ?@uint sliceIndex
          ?@uint sliceSize
        ] ;
        if sliceSize != 1 then
          error mInstructionLocation : "internal error: sliceSize (" . sliceSize . ") != 1" ;
        end if ;
        bitIndex := sliceIndex ;
      else
        error mInstructionLocation : "internal error, cannot solve page bit addressing" : bitIndex ;
      end if ;
      ioAssemblyInstructionList += ![@baseline_assembly_instruction_FB new
        !mInstructionLocation
        !if (targetPageFlags & 1) != 0 then [@baseline_bit_oriented_op BSF] else [@baseline_bit_oriented_op BCF] end
        !inSTATUSregister
        !bitIndex
      ] ;
    end if ;
    pageChangeFlags := pageChangeFlags / 2 ;
    targetPageFlags := targetPageFlags / 2 ;
    idx := idx + 1 ;
  end loop ;
  ioAssemblyInstructionList += ![@baseline_assembly_GOTO new
    !mInstructionLocation
    !mTargetLabel
  ] ;
end method ;

#----------------------------------------------------------------------------*

override method @baseline_intermediate_CALL generateAssemblyCode
  ??@baseline_intermediate_registerExpression inSTATUSregister
  ??@bitSliceTable inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList
:
#---
  @uint pageChangeFlags := mCurrentPage ^ mTargetPage ;
  @uint targetPageFlags := mTargetPage ;
  @uint idx := 0 ;
  loop 8 while pageChangeFlags != 0 do
    if (pageChangeFlags & 1) != 0 then
      @uint bitIndex ;
      if [inStatusRegisterBitSliceTable hasKey !"PA"] then
        [inStatusRegisterBitSliceTable searchKey 
          ![@lstring new !"PA" !mInstructionLocation]
          ?@uint sliceIndex
          ?@uint sliceSize
        ] ;
        if idx >= sliceSize then
          error mInstructionLocation : "internal error, idx (" . idx . ") >= sliceSize (" . sliceSize . ")" ;
        end if ;
        bitIndex := sliceIndex + idx ;
      elsif [inStatusRegisterBitSliceTable hasKey !"PA". idx] then
        [inStatusRegisterBitSliceTable searchKey 
          ![@lstring new !"PA". idx !mInstructionLocation]
          ?@uint sliceIndex
          ?@uint sliceSize
        ] ;
        if sliceSize != 1 then
          error mInstructionLocation : "internal error: sliceSize (" . sliceSize . ") != 1" ;
        end if ;
        bitIndex := sliceIndex ;
      else
        error mInstructionLocation : "internal error, cannot solve page bit addressing" : bitIndex ;
      end if ;
      ioAssemblyInstructionList += ![@baseline_assembly_instruction_FB new
        !mInstructionLocation
        !if (targetPageFlags & 1) != 0 then [@baseline_bit_oriented_op BSF] else [@baseline_bit_oriented_op BCF] end
        !inSTATUSregister
        !bitIndex
      ] ;
    end if ;
    pageChangeFlags := pageChangeFlags / 2 ;
    targetPageFlags := targetPageFlags / 2 ;
    idx := idx + 1 ;
  end loop ;
  ioAssemblyInstructionList += ![@baseline_assembly_CALL new
    !mInstructionLocation
    !mTargetLabel
  ] ;
end method ;

#----------------------------------------------------*

override method @baseline_intermediate_incDecRegisterInCondition generateAssemblyCode
  ??@baseline_intermediate_registerExpression unused inSTATUSregister
  ??@bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList
:
  ioAssemblyInstructionList += ![@baseline_assembly_incDecRegisterInCondition new
    !mInstructionLocation
    !mRegisterDescription
    !mIncrement
    !m_W_isDestination
  ] ;
#---
  if mBranchIfZero then
    ioAssemblyInstructionList += ![@baseline_assembly_SKIP new
      !mInstructionLocation
    ] ;
  end if ;
#--- Generate GOTO instruction
  ioAssemblyInstructionList += ![@baseline_assembly_GOTO new
    !mInstructionLocation
    ![@lstring new !mTargetLabel !mInstructionLocation]
  ] ;
end method ;

#----------------------------------------------------------------------------*
#                                                                            *
#                                                                            *
#----------------------------------------------------------------------------*

routine build_baseline_assembly_code
  ??@baseline_intermediate_instructionList inGeneratedInstructionList
  ??@actualConfigurationMap inActualConfigurationMap
  ??@baseline_intermediate_registerExpression inSTATUSregister
  ??@bitSliceTable inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList
:
#-------------------------------- Build assembly code
  foreach inGeneratedInstructionList do
    [mInstruction generateAssemblyCode !inSTATUSregister !inStatusRegisterBitSliceTable !?ioAssemblyInstructionList] ;
  end foreach ;
#-------------------------------- Add Configuration
  foreach inActualConfigurationMap do
    setEmitAddress ! mRegisterAddress + mRegisterAddress ;
    emitCode !mRegisterValue ;
  end foreach ;
end routine ;

#----------------------------------------------------------------------------*

end semantics ;
