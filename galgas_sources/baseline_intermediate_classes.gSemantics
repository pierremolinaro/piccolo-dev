semantics baseline_intermediate_classes :
import "baseline_instruction_groups.gSemantics" ;

#-------------------------------------------------------------------------------*

struct @baseline_intermediate_registerExpression {
  @string mAssemblyString ;
  @uint mRegisterAddress ; # xxx bit full address
}

#-------------------------------------------------------------------------------*

abstract class @baseline_intermediate_instruction {
}

#-------------------------------------------------------------------------------*

list @baseline_intermediate_instructionList {
  @baseline_intermediate_instruction mInstruction feature setter ;
}

#-------------------------------------------------------------------------------*

class @baseline_intermediate_NULL extends @baseline_intermediate_instruction {
}

#-------------------------------------------------------------------------------*

class @baseline_intermediate_pseudo_PAGE extends @baseline_intermediate_instruction {
  @uint mPage ;
}

#-------------------------------------------------------------------------------*

class @baseline_intermediate_pseudo_LABEL extends @baseline_intermediate_instruction {
  @lstring mLabel ;
}

#-------------------------------------------------------------------------------*

class @baseline_intermediate_pseudo_BEGINOFROUTINE extends @baseline_intermediate_instruction {
  @lstring mRoutineName ;
  @bool mIsRegular ;
}

#-------------------------------------------------------------------------------*

class @baseline_intermediate_pseudo_ENDOFROUTINE extends @baseline_intermediate_instruction {
  @lstring mRoutineName ;
  @uint mPage ;
}

#-------------------------------------------------------------------------------*

abstract class @baseline_intermediate_actualInstruction extends @baseline_intermediate_instruction {
  @location mInstructionLocation ;
}

#-------------------------------------------------------------------------------*

class @baseline_intermediate_instruction_FD extends @baseline_intermediate_actualInstruction {
  @baseline_instruction_FD_base_code mInstruction ;
  @baseline_intermediate_registerExpression mRegisterDescription ;
  @bool m_W_isDestination ;
}

#-------------------------------------------------------------------------------*

class @baseline_intermediate_instruction_F extends @baseline_intermediate_actualInstruction {
  @baseline_F_instruction_base_code mInstruction ;
  @baseline_intermediate_registerExpression mRegisterDescription ;
}

#-------------------------------------------------------------------------------*

class @baseline_intermediate_instruction_FB extends @baseline_intermediate_actualInstruction {
  @baseline_bit_oriented_op mInstruction ;
  @baseline_intermediate_registerExpression mRegisterDescription ;
  @uint mBitNumber ;
}

#-------------------------------------------------------------------------------*

class @baseline_intermediate_instruction_BitTestSkip extends @baseline_intermediate_actualInstruction {
  @bool mSkipIfSet ;
  @baseline_intermediate_registerExpression mRegisterDescription ;
  @uint mBitNumber ;
}

#-------------------------------------------------------------------------------*

class @baseline_intermediate_GOTO extends @baseline_intermediate_actualInstruction {
  @lstring mTargetLabel ;
  @uint mCurrentPage ;
  @uint mTargetPage ;
}

#-------------------------------------------------------------------------------*

class @baseline_intermediate_CALL extends @baseline_intermediate_actualInstruction {
  @lstring mTargetLabel ;
  @uint mCurrentPage ;
  @uint mTargetPage ;
}

#----------------------------------------------------*

class @baseline_intermediate_WO_OPERAND extends @baseline_intermediate_actualInstruction {
  @baseline_WO_OPERAND_group mInstruction ;
}

#----------------------------------------------------*

class @baseline_intermediate_TRIS extends @baseline_intermediate_actualInstruction {
  @lstring mOperand ;
  @uint mOpcode ;
}

#-------------------------------------------------------------------------------*

class @baseline_intermediate_instruction_literalOperation extends @baseline_intermediate_actualInstruction {
  @baseline_literal_instruction_opcode mInstruction ;
  @uint mLiteralValue ;
}

#-------------------------------------------------------------------------------*

class @baseline_intermediate_instruction_MNOP extends @baseline_intermediate_actualInstruction {
  @luint mOccurrenceFactor ;
}

#-------------------------------------------------------------------------------*

class @baseline_intermediate_incDecRegisterInCondition extends @baseline_intermediate_actualInstruction {
  @baseline_intermediate_registerExpression mRegisterDescription ;
  @string mTargetLabel ;
  @bool mIncrement ;
  @bool m_W_isDestination ;
  @bool mBranchIfZero ;
}

#-------------------------------------------------------------------------------*

end semantics ;
