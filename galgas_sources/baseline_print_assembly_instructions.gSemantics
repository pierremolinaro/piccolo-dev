semantics baseline_print_assembly_instructions :
import "baseline_pic_assembly_classes.gSemantics" ;

#-------------------------------------------------------------------------------*

abstract method @baseline_pic_assembly_instruction print ?!@string ioListFileContents ;

#-------------------------------------------------------------------------------*

override method @baseline_pic_assembly_pseudo_ORG print ?!@string ioListFileContents :
  ioListFileContents .= "ORG " . mOrigin ;
end method ;


#-------------------------------------------------------------------------------*

override method @baseline_pic_assembly_pseudo_LABEL print ?!@string ioListFileContents :
  ioListFileContents .= "LABEL " . mLabel ;
end method ;

#-------------------------------------------------------------------------------*

override method @baseline_pic_assembly_instruction_FD print ?!@string ioListFileContents :
  ioListFileContents .= [mInstruction mnemonic] . " " . [mRegisterDescription mAssemblyString] ;
  if m_W_isDestination then
    ioListFileContents .= ", W" ;
  end if ;
end method ;

#-------------------------------------------------------------------------------*

override method @baseline_pic_assembly_instruction_F print ?!@string ioListFileContents :
  ioListFileContents .= [mInstruction mnemonic] . " " . [mRegisterDescription mAssemblyString] ;
end method ;

#-------------------------------------------------------------------------------*

override method @baseline_pic_assembly_instruction_FB print ?!@string ioListFileContents :
  ioListFileContents .= [mInstruction mnemonic] . " " . [mRegisterDescription mAssemblyString] . ", " . [mBitNumber string] ;
end method ;

#-------------------------------------------------------------------------------*

override method @baseline_pic_assembly_instruction_BitTestSkip print ?!@string ioListFileContents :
  if mSkipIfSet then
    ioListFileContents .= "BTFSS" ;
  else
    ioListFileContents .= "BTFSC" ;
  end if ;
  ioListFileContents .= " " . [mRegisterDescription mAssemblyString] . ", " . [mBitNumber string] ;
end method ;

#-------------------------------------------------------------------------------*

override method @baseline_pic_assembly_GOTO print ?!@string ioListFileContents :
  ioListFileContents .= "GOTO " . mTargetLabel ;
end method ;

#-------------------------------------------------------------------------------*

override method @baseline_pic_assembly_SKIP print ?!@string ioListFileContents :
  ioListFileContents .= "GOTO * + 2" ;
end method ;

#-------------------------------------------------------------------------------*


override method @baseline_pic_assembly_CALL print ?!@string ioListFileContents :
  ioListFileContents .= "CALL " . mTargetLabel ;
end method ;

#-------------------------------------------------------------------------------*

override method @baseline_pic_assembly_instruction_literalOperation print ?!@string ioListFileContents :
  ioListFileContents .= [mInstruction mnemonic] . " " . [mLiteralValue hexString] ;
end method ;

#-------------------------------------------------------------------------------*

override method @baseline_pic_assembly_incDecRegisterInCondition print ?!@string ioListFileContents :
  if mIncrement then
    ioListFileContents .= "INCFSZ " ;
  else
    ioListFileContents .= "DECFSZ " ;
  end if ;
  ioListFileContents .= [mRegisterDescription mAssemblyString] ;
  if m_W_isDestination then
    ioListFileContents .= ", W" ;
  end if ;
end method ;

#-------------------------------------------------------------------------------*

override method @baseline_pic_assembly_WO_OPERAND print ?!@string ioListFileContents :
  ioListFileContents .= [mInstruction mnemonic] ;
end method ;

#-------------------------------------------------------------------------------*

end semantics ;
