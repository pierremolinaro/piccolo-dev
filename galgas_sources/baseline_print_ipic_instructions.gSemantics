semantics baseline_print_ipic_instructions :
import "baseline_ipic_classes.gSemantics" ;

#-------------------------------------------------------------------------------*

abstract method @baseline_ipic_instruction print ?!@string ioListFileContents ;

#-------------------------------------------------------------------------------*

override method @baseline_ipic_NULL print ?!@string ioListFileContents :
  ioListFileContents .= "-" ;
end method ;

#-------------------------------------------------------------------------------*

override
method @baseline_ipic_pseudo_PAGE print ?!@string ioListFileContents :
  ioListFileContents .= "ORG " . [mPage * 256 hexString] ;
end method ;


#-------------------------------------------------------------------------------*

override
method @baseline_ipic_pseudo_LABEL print ?!@string ioListFileContents :
  ioListFileContents .= "LABEL " . mLabel ;
end method ;

#-------------------------------------------------------------------------------*

override
method @baseline_ipic_instruction_FD print ?!@string ioListFileContents :
  ioListFileContents .= [mInstruction_FD_base_code mnemonic] . " " . [mRegisterDescription mAssemblyString] ;
  if m_W_isDestination then
    ioListFileContents .= ", W" ;
  end if ;
end method ;

#-------------------------------------------------------------------------------*

override
method @baseline_ipic_instruction_F print ?!@string ioListFileContents :
  ioListFileContents .= [mFinstruction mnemonic] . " " . [mRegisterDescription mAssemblyString] ;
end method ;

#-------------------------------------------------------------------------------*

override
method @baseline_ipic_instruction_FB print ?!@string ioListFileContents :
  ioListFileContents .= [mBitOrientedOp mnemonic] . " " . [mRegisterDescription mAssemblyString] . ", " . [mBitNumber string] ;
end method ;

#-------------------------------------------------------------------------------*

override
method @baseline_ipic_instruction_BitTestSkip print ?!@string ioListFileContents :
  if mSkipIfSet then
    ioListFileContents .= "BTFSS" ;
  else
    ioListFileContents .= "BTFSC" ;
  end if ;
  ioListFileContents .= " " . [mRegisterDescription mAssemblyString] . ", " . [mBitNumber string] ;
end method ;


#-------------------------------------------------------------------------------*


override
method @baseline_ipic_GOTO print ?!@string ioListFileContents :
  ioListFileContents .= "GOTO " . mTargetLabel ;
end method ;

#-------------------------------------------------------------------------------*


override
method @baseline_ipic_CALL print ?!@string ioListFileContents :
  ioListFileContents .= "CALL " . mTargetLabel ;
end method ;

#-------------------------------------------------------------------------------*

override
method @baseline_ipic_instruction_literalOperation print ?!@string ioListFileContents :
  ioListFileContents .= [mLiteralInstruction mnemonic] . " " . [mLiteralValue hexString] ;
end method ;

#-------------------------------------------------------------------------------*

override
method @baseline_ipic_instruction_MNOP print ?!@string ioListFileContents :
  ioListFileContents .= "MNOP " . [[mOccurrenceFactor uint] string] ;
end method ;

#-------------------------------------------------------------------------------*

override
method @baseline_ipic_incDecRegisterInCondition print ?!@string ioListFileContents :
  ioListFileContents .= "JUMP " ;
  if mIncrement then
    ioListFileContents .= "INCF " ;
  else
    ioListFileContents .= "DECF " ;
  end if ;
  ioListFileContents .= [mRegisterDescription mAssemblyString] ;
  if m_W_isDestination then
    ioListFileContents .= ", W" ;
  end if ;
  if mBranchIfZero then
    ioListFileContents .= " Z" ;
  else
    ioListFileContents .= " NZ" ;
  end if ;
  ioListFileContents .= " " . mTargetLabel ;
end method ;

#-------------------------------------------------------------------------------*

override
method @baseline_ipic_WO_OPERAND print ?!@string ioListFileContents :
  ioListFileContents .= [mInstruction mnemonic] ;
end method ;

#-------------------------------------------------------------------------------*

end semantics ;
