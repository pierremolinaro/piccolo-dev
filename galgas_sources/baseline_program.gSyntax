syntax baseline_program ("piccolo_lexique.gLexique") :
import "generic_metamodel.gSemantics" ;
import "baseline_ast.gSemantics" ;
import "baseline_compilation.gSemantics" ;

import "piccoloDevice_semantics.gSemantics" ;
import "pic18_metamodel.gSemantics" ;

#----------------------------------------------------*

nonterminal <section_list>
  ?!@baseline_routineDefinitionList ioRoutineDefinitionList
  ?!@ramDefinitionList ioRamDefinitionList
  ?!@lstringlist unusedRegisterList
  ?!@configDefinitionList ioConfigDefinitionList
  ?!@constantDefinitionList ioConstantDefinitionList
;

#----------------------------------------------------*

rule <start_symbol> :
  $baseline$ ;
  $identifier$ ? @lstring programName ;
  $literal_string$ ? @lstring deviceName ;
  $:$ ;
  @baseline_routineDefinitionList routineDefinitionList [emptyList] ;
  @ramDefinitionList ramDefinitionList [emptyList] ;
  @lstringlist unusedRegisterList [emptyList] ;
  @configDefinitionList configDefinitionList [emptyList] ;
  @constantDefinitionList constantDefinitionList [emptyList] ;
  <section_list>
    !?routineDefinitionList
    !?ramDefinitionList
    !?unusedRegisterList
    !?configDefinitionList
    !?constantDefinitionList
  ;
  $end$ ;
#--- Semantic analysis
  if [@uint errorCount] == 0 then
    @baseline_model piccoloModel [new
      !programName
      !deviceName
      !configDefinitionList
      !ramDefinitionList
      !unusedRegisterList
      !constantDefinitionList
      !routineDefinitionList
      !here
    ] ;
    baseline_analysis !piccoloModel ![@string stringWithSourceFilePath] ;
  else
    @string hexDestinationFile := [[@string stringWithSourceFilePath] stringByDeletingPathExtension] . ".hex" ;
    if [hexDestinationFile fileExists] then
      [@string deleteFile !hexDestinationFile] ;
    end if ;
    @string asmDestinationFile := [[@string stringWithSourceFilePath] stringByDeletingPathExtension] . ".asm" ;
    if [asmDestinationFile fileExists] then
      [@string deleteFile !asmDestinationFile] ;
    end if ;
  end if ;
label importBootloaderSpecification
  !@piccoloDeviceModel outPiccoloDeviceModel
  !@string outDeviceName
  !@uint outAccessBankSplitOffset
  !@ramBankTable outRamBank
  !@registerTable outRegisterTable
  !@bootloaderReservedRAMmap outBootloaderReservedRAMmap
  !@routineDeclarationList outBootloaderRoutineDeclarationList
  !@routineDeclarationList outUserRoutineDeclarationList
  !@luint outBootloaderReservedROMsize
:
  $baseline$ ;
  $identifier$ ? @lstring programName ;
  error programName: "this file does not define a bootloader specification"
   : outPiccoloDeviceModel, outAccessBankSplitOffset, outRamBank, outRegisterTable,
      outBootloaderReservedRAMmap, outBootloaderRoutineDeclarationList,
      outUserRoutineDeclarationList, outDeviceName,
      outBootloaderReservedROMsize ;
  $literal_string$ ? * ;
  $:$ ;
  <section_list> parse ;
  $end$ ;
end rule ;

#----------------------------------------------------*

end syntax ;
