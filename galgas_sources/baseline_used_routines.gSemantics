semantics baseline_used_routines :
import "baseline_ast.gSemantics" ;

#---------------------------------------------------------------------------*

abstract method @baseline_instruction addUsedRoutines
  ?!@stringset ioUsedRoutines
;

#---------------------------------------------------------------------------*

override method @baseline_instruction_IF_BitTest addUsedRoutines
  ?!@stringset ioUsedRoutines
:
  [mInstruction addUsedRoutines !?ioUsedRoutines] ;
end method ;

#---------------------------------------------------------------------------*

override method @baseline_instruction_IF_SEMI_COLON addUsedRoutines
  ?!@stringset ioUsedRoutines
:
  [mInstruction addUsedRoutines !?ioUsedRoutines] ;
end method ;

#---------------------------------------------------------------------------*

override method @baseline_instruction_IF_IncDec addUsedRoutines
  ?!@stringset ioUsedRoutines
:
  [mInstruction addUsedRoutines !?ioUsedRoutines] ;
end method ;

#---------------------------------------------------------------------------*

override method @baseline_instruction_JUMP addUsedRoutines
  ?!@stringset ioUsedRoutines
:
  ioUsedRoutines += !mTargetLabel->string ;
end method ;

#---------------------------------------------------------------------------*

override method @baseline_instruction_GOTO addUsedRoutines
  ?!@stringset ioUsedRoutines
:
  ioUsedRoutines += !mTargetLabel->string ;
end method ;

#---------------------------------------------------------------------------*

override method @baseline_instruction_CALL addUsedRoutines
  ?!@stringset ioUsedRoutines
:
  ioUsedRoutines += !mTargetLabel->string ;
end method ;

#---------------------------------------------------------------------------*

override method @baseline_instruction_FOREVER addUsedRoutines
  ?!@stringset ioUsedRoutines
:
  addBaselineUsedRoutinesFromInstructionList !mInstructionList !?ioUsedRoutines ;
end method ;

#---------------------------------------------------------------------------*

override method @baseline_instruction_STATIC_REPEAT addUsedRoutines
  ?!@stringset ioUsedRoutines
:
  addBaselineUsedRoutinesFromInstructionList !mInstructionList !?ioUsedRoutines ;
end method ;

#---------------------------------------------------------------------------*

override method @baseline_instruction_MNOP addUsedRoutines
  ?!@stringset unused ioUsedRoutines
:
end method ;

#---------------------------------------------------------------------------*

override method @baseline_instruction_TRIS addUsedRoutines
  ?!@stringset unused ioUsedRoutines
:
end method ;

#---------------------------------------------------------------------------*

override method @baseline_instruction_WO_OPERAND addUsedRoutines
  ?!@stringset unused ioUsedRoutines
:
end method ;

#---------------------------------------------------------------------------*

override method @baseline_instruction_F addUsedRoutines
  ?!@stringset unused ioUsedRoutines
:
end method ;

#---------------------------------------------------------------------------*

override method @baseline_instruction_FB addUsedRoutines
  ?!@stringset unused ioUsedRoutines
:
end method ;

#---------------------------------------------------------------------------*

override method @baseline_instruction_do_while addUsedRoutines
  ?!@stringset ioUsedRoutines
:
  addBaselineUsedRoutinesFromInstructionList !mRepeatedInstructionList !?ioUsedRoutines ;
  foreach mWhilePartList do
    addBaselineUsedRoutinesFromInstructionList !mInstructionList !?ioUsedRoutines ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @baseline_instruction_structured_if addUsedRoutines
  ?!@stringset ioUsedRoutines
:
  addBaselineUsedRoutinesFromInstructionList !mThenInstructionList !?ioUsedRoutines ;
  addBaselineUsedRoutinesFromInstructionList !mElseInstructionList !?ioUsedRoutines ;
end method ;

#---------------------------------------------------------------------------*

override method @baseline_instruction_FD addUsedRoutines
  ?!@stringset unused ioUsedRoutines
:
end method ;

#---------------------------------------------------------------------------*

override method @baseline_instruction_JSR addUsedRoutines
  ?!@stringset ioUsedRoutines
:
  ioUsedRoutines += !mTargetLabel->string ;
end method ;

#---------------------------------------------------------------------------*

override method @baseline_instruction_literalOperation addUsedRoutines
  ?!@stringset unused ioUsedRoutines
:
end method ;

#---------------------------------------------------------------------------*

routine addBaselineUsedRoutinesFromInstructionList
  ??@baseline_instructionList inInstructionList
  ?!@stringset ioUsedRoutines
:
  foreach inInstructionList do
    [mInstruction addUsedRoutines !?ioUsedRoutines] ;
  end foreach ;
end routine ;

#---------------------------------------------------------------------------*

function baseline_computeUsedRoutines
  ??@baseline_routineDefinitionList inRoutineDefinitionList
  -> @stringset outUsedRoutineSet
:
#--- Main routine is used
  outUsedRoutineSet := [@stringset setWithString !"main"] ;
#--- Loop for accumulating used routines
  @stringset s [emptySet] ;
  loop [inRoutineDefinitionList length] :
  while s != outUsedRoutineSet do
    s := outUsedRoutineSet ;
    foreach inRoutineDefinitionList do
      if [outUsedRoutineSet hasKey !mRoutineName->string] then
        addBaselineUsedRoutinesFromInstructionList !mInstructionList !?outUsedRoutineSet ;
      end if ;
    end foreach ;
  end loop ;
end function ;

#---------------------------------------------------------------------------*

end semantics ;
