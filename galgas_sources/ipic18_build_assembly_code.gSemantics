semantics ipic18_build_assembly_code :
import semantics piccolo_embedded_devices in "piccolo_embedded_devices.gSemantics" ;
import semantics ipic18_metamodel in "ipic18_metamodel.gSemantics" ;
import "ipic18_metamodel.gSemantics" ;
import "piccolo_embedded_devices.gSemantics" ;

#----------------------------------------------------*
#                BUILD ASSEMBLY CODE                 *
#----------------------------------------------------*

abstract method @ipic18_instruction buildAssemblyCode
  ?!@stringlist unused ioStringList
  ?!@uint unused ioBccLabelIndex
;

#----------------------------------------------------*

override method @ipic_NULL buildAssemblyCode
  ?!@stringlist unused ioStringList
  ?!@uint unused ioBccLabelIndex
:
end method ;

#----------------------------------------------------*

override method @ipic_pseudo_ORG buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  ioStringList += !"  ORG " . [mOrigin hexString] ;
end method ;

#----------------------------------------------------*

override method @ipic_pseudo_LABEL buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  ioStringList += ![mLabel string] . ":" ;
end method ;

#----------------------------------------------------*

override method @ipic18_instruction_FDA buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  @string s := "  " . [mInstruction_FDA_base_code mnemonic] . " " . [mRegisterDescription mAssemblyString] ;
  if m_W_isDestination & [mRegisterDescription mNeedsBSR] then
    s .= ", W, BSR_ACCESS" ;
  elsif [mRegisterDescription mNeedsBSR] then
    s .= ", F, BSR_ACCESS" ;
  elsif m_W_isDestination then
    s .= ", W" ;
  else
    s .= ", F" ;
  end if ;
  ioStringList += !s ;
end method ;

#----------------------------------------------------*

override method @ipic18_instruction_MOVFF buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  @string s := "  MOVFF ";
  s .= [mSourceRegisterDescription mAssemblyString] ;
  s .= ", " ;
  s .= [mDestinationRegisterDescription mAssemblyString] ;
  ioStringList += !s ;
end method ;

#----------------------------------------------------*

override method @ipic18_instruction_FBA buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  @string s := "  " . [mBitOrientedOp mnemonic] ;
  s .= "  " . [mRegisterDescription mAssemblyString] ;
  s .= ", " . [mBitNumber string] ;
  if [mRegisterDescription mNeedsBSR] then
    s .= ", BSR_ACCESS" ;
  end if ;
  ioStringList += !s ;
end method ;

#----------------------------------------------------*

override method @ipic18_instruction_BitTestSkip buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  @string s := "  " ;
  if mSkipIfSet then
    s .= "BTFSS" ;
  else
    s .= "BTFSC" ;
  end if ;
  s .= "  " . [mRegisterDescription mAssemblyString] ;
  s .= ", " . [mBitNumber string] ;
  if [mRegisterDescription mNeedsBSR] then
    s .= ", BSR_ACCESS" ;
  end if ;
  ioStringList += !s ;
end method ;

#----------------------------------------------------*

override method @ipic18_instruction_FA buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  @string s := "  " . [mFAinstruction mnemonic] . " " . [mRegisterDescription mAssemblyString] ;
  if [mRegisterDescription mNeedsBSR] then
    s .= ", BSR_ACCESS" ;
  end if ;
  ioStringList += !s ;
end method ;

#----------------------------------------------------*

override method @ipic18_instruction_conditionalBranch buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint ioBccLabelIndex
:
  switch mBranchMode
  when native, ipicNative :
    ioStringList += !"  " . [mConditionalBranch mnemonic] . " " . [mTargetLabel string] ;
  when ipicBRA :
    @conditional_branch complementary ;
    getComplementaryBcc !mConditionalBranch ?complementary ;
    @string aLabel := "_bcc_label_" . [ioBccLabelIndex string] ; ioBccLabelIndex ++ ;
    ioStringList += !"  " . [complementary mnemonic] . " " . aLabel ;
    ioStringList += !"  BRA " . [mTargetLabel string] ;
    ioStringList += !aLabel . ":" ;
  when ipicGOTO :
    @conditional_branch complementary ;
    getComplementaryBcc !mConditionalBranch ?complementary ;
    @string aLabel := "_bcc_label_" . [ioBccLabelIndex string] ; ioBccLabelIndex ++ ;
    ioStringList += !"  " . [complementary mnemonic] . " " . aLabel ;
    ioStringList += !"  GOTO " . [mTargetLabel string] ;
    ioStringList += !aLabel . ":" ;
  end switch ;
end method ;

#----------------------------------------------------*

override method @ipic_jump_test_register buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint ioBccLabelIndex
:
  @string s := "  TSTFSZ " . [mRegisterDescription mAssemblyString] ;
  if [mRegisterDescription mNeedsBSR] then
    s .= ", BSR_ACCESS" ;
  end if ;
  ioStringList += !s ;
  if mBranchIfZero then
    @string aLabel := "_bcc_label_" . [ioBccLabelIndex string] ; ioBccLabelIndex ++ ;
    ioStringList += !"  BRA " . aLabel ;
    if mUsesBra then
      ioStringList += !"  BRA " . mTargetLabel ;
    else
      ioStringList += !"  GOTO " . mTargetLabel ;
    end if ;
    ioStringList += !aLabel . ":" ;
  else
    if mUsesBra then
      ioStringList += !"  BRA " . mTargetLabel ;
    else
      ioStringList += !"  GOTO " . mTargetLabel ;
    end if ;
  end if ;
end method ;

#----------------------------------------------------*

override method @ipic_incDecRegisterInCondition buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  @string s := "" ;
  if mBranchIfZero & mIncrement then
    s .= "  INFSNZ " ;
  elsif mBranchIfZero & not mIncrement then
    s .= "  DCFSNZ " ;
  elsif (not mBranchIfZero) & mIncrement then
    s .= "  INCFSZ " ;
  else
    s .= "  DECFSZ " ;
  end if ;
  s .= [mRegisterDescription mAssemblyString] ;
  if m_W_isDestination & [mRegisterDescription mNeedsBSR] then
    s .= ", W, BSR_ACCESS" ;
  elsif [mRegisterDescription mNeedsBSR] then
    s .= ", F, BSR_ACCESS" ;
  elsif m_W_isDestination then
    s .= ", W" ;
  else
    s .= ", F" ;
  end if ;
  ioStringList += !s ;
  if mUsesBra then
    ioStringList += !"  BRA " . mTargetLabel ;
  else
    ioStringList += !"  GOTO " . mTargetLabel ;
  end if ;
end method ;

#----------------------------------------------------*

override method @ipic_registerComparisonCondition buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint ioBccLabelIndex
:
  @string s := "" ;
  switch mComparison
    when notEqual : s .= "  CPFSEQ " ;
    when equal : s .= "  CPFSEQ " ;
    when greaterOrEqual : s .= "  CPFSLT " ;
    when greater : s .= "  CPFSGT " ;
    when lowerOrEqual : s .= "  CPFSGT " ;
    when lower : s .= "  CPFSLT " ;
  end switch ;
  s .= [mRegisterDescription mAssemblyString] ;
  if [mRegisterDescription mNeedsBSR] then
    s .= ", BSR_ACCESS" ;
  end if ;
  ioStringList += !s ;
  @bool usesIntermediateBRA ; [self usesIntermediateBRA ?usesIntermediateBRA] ;
  if usesIntermediateBRA then
    @string aLabel := "_bcc_label_" . [ioBccLabelIndex string] ; ioBccLabelIndex ++ ;
    ioStringList += !"  BRA " . aLabel ;
    if mUsesBra then
      ioStringList += !"  BRA " . mTargetLabel ;
    else
      ioStringList += !"  GOTO " . mTargetLabel ;
    end if ;
    ioStringList += !aLabel . ":" ;
  else
    if mUsesBra then
      ioStringList += !"  BRA " . mTargetLabel ;
    else
      ioStringList += !"  GOTO " . mTargetLabel ;
    end if ;
  end if ;
end method ;

#----------------------------------------------------*

override method @ipic_JUMP buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  switch mKind
    when ipicRelative : ioStringList += !"  BRA   " . [mTargetLabel string] ;
    when ipicAbsolute : ioStringList += !"  GOTO  " . [mTargetLabel string] ;
    when relative     : ioStringList += !"  BRA   " . [mTargetLabel string] ;
    when absolute     : ioStringList += !"  GOTO  " . [mTargetLabel string] ;
  end switch ;
end method ;

#----------------------------------------------------*

override method @ipic_JSR buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  switch mKind
    when ipicRelative : ioStringList += !"  RCALL " . [mTargetLabel string] ;
    when ipicAbsolute : ioStringList += !"  CALL  " . [mTargetLabel string] ;
    when relative     : ioStringList += !"  RCALL " . [mTargetLabel string] ;
    when absolute     : ioStringList += !"  CALL  " . [mTargetLabel string] ;
  end switch ;
end method ;

#----------------------------------------------------*

override method @ipic18_instruction_MOVLB buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  ioStringList += !"  MOVLB " . [[mBankIndex uint] hexString] ;
end method ;

#----------------------------------------------------*

override method @ipic18_instruction_CLRWDT buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  ioStringList += !"  CLRWDT" ;
end method ;

#----------------------------------------------------*

override method @ipic18_instruction_DAW buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  ioStringList += !"  DAW" ;
end method ;

#----------------------------------------------------*

override method @ipic18_instruction_NOP buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  ioStringList += !"  NOP" ;
end method ;

#----------------------------------------------------*

override method @ipic18_instruction_POP buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  ioStringList += !"  POP" ;
end method ;

#----------------------------------------------------*

override method @ipic18_instruction_PUSH buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  ioStringList += !"  PUSH" ;
end method ;

#----------------------------------------------------*

override method @ipic18_instruction_RESET buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  ioStringList += !"  RESET" ;
end method ;

#----------------------------------------------------*

override method @ipic18_instruction_RETURN buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  ioStringList += !"  RETURN" ;
end method ;

#----------------------------------------------------*

 override method @ipic18_instruction_RETFIE buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  @string s := "  RETFIE" ;
  if mFastReturn then
    s .= " 1" ;
  end if ;
  ioStringList += !s ;
end method ;

#----------------------------------------------------*

 override method @ipic18_instruction_SLEEP buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  ioStringList += !"  SLEEP" ;
end method ;

#----------------------------------------------------*

override method @ipic18_instruction_literalOperation buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  ioStringList += !"  " . [mLiteralInstruction mnemonic] . " " . [mLiteralValue hexString] ;
end method ;

#----------------------------------------------------*

 override method @ipic18_instruction_LFSR buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  ioStringList += !"  LFSR " . [[mFSRindex uint] string] . ", " . [mValue hexString] ;
end method ;

#----------------------------------------------------*

override method @ipic18_instruction_MNOP buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  if [mOccurrenceFactor uint] == 0 then
    warning mOccurrenceFactor: "No generated code" ;
  end if ;
  @uint idx := 0 ;
  loop [mOccurrenceFactor uint] :
  while idx < [mOccurrenceFactor uint]
  do
    ioStringList += !"  NOP" ;
    idx ++ ;
  end loop ;
end method ;

#----------------------------------------------------*

override method @ipic18_instruction_TBLRD buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  ioStringList += !"  TBLRD " . [mOption mnemonic] ;
end method ;

#----------------------------------------------------*

override method @ipic18_instruction_TBLWT buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  ioStringList += !"  TBLWT " . [mOption mnemonic] ;
end method ;

#----------------------------------------------------*

override method @ipic18_instruction_computed_retlw buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  if mUsesRCALL then
    ioStringList += !"  RCALL _computed_goto_2" ;
  else
    ioStringList += !"  CALL _computed_goto_2" ;
  end if ;
  foreach mLiteralValues do
    ioStringList += !"  RETLW " . [mValue hexString] ;
  end foreach ;
end method ;

#----------------------------------------------------*

override method @ipic18_instruction_computed_bra buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  if mUsesRCALL then
    ioStringList += !"  RCALL _computed_goto_2" ;
  else
    ioStringList += !"  CALL _computed_goto_2" ;
  end if ;
  foreach mTargetLabels do
    ioStringList += !"  BRA " . [mValue string] ;
  end foreach ;
end method ;

#----------------------------------------------------*

override method @ipic18_instruction_computed_goto buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  if mUsesRCALL then
    ioStringList += !"  RCALL _computed_goto_4" ;
  else
    ioStringList += !"  CALL _computed_goto_4" ;
  end if ;
  foreach mTargetLabels do
    ioStringList += !"  GOTO " . [mValue string] ;
  end foreach ;
end method ;

#----------------------------------------------------*

override method @ipic18_instruction_computed_rcall buildAssemblyCode
  ?!@stringlist ioStringList
  ?!@uint unused ioBccLabelIndex
:
  if mUsesRCALL then
    ioStringList += !"  RCALL _computed_goto_4" ;
  else
    ioStringList += !"  CALL _computed_goto_4" ;
  end if ;
  @uint idx := 0 ;
  foreach mTargetLabels do
    idx ++ ;
    ioStringList += !"  RCALL " . [mValue string] ;
    if idx < [mTargetLabels length] then
      ioStringList += !"  BRA   " . mEndOfInstructionLabel ;
    end if ;
  end foreach ;
  ioStringList += !mEndOfInstructionLabel . ":" ;
end method ;

#----------------------------------------------------*

routine pic18_build_assembly_code
  ??@string inProcessorName
  ??@registerTable inPredefinedRegisters
  ??@registerTable inAllRegisters
  ??@ipic18_instructionList inInstructionList
  ??@actualConfigurationMap inActualConfigurationMap
  !@string outAssemblyCode
:
  outAssemblyCode := "  PROCESSOR " . inProcessorName . "\n" ;
#--- Code
  outAssemblyCode .= ";--- Code\n" ;
  outAssemblyCode .= "  ORG 0\n" ;
  @uint bccLabelIndex := 0 ;
  foreach inInstructionList do
    @stringlist lineList [emptyList] ;
    [mInstruction buildAssemblyCode !?lineList !?bccLabelIndex] ;
    foreach lineList do
      outAssemblyCode .= mValue . "\n" ;
    end foreach ;
  end foreach ;
  outAssemblyCode .= "\n" ;
#--- Prefined registers
  outAssemblyCode .= ";--- Prefefined registers\n" ;
  foreach inPredefinedRegisters do
    @uint firstRegister ; [mRegisterAddressList first ?firstRegister] ;
    outAssemblyCode .= [key string] . " EQU " . [firstRegister hexString] . "\n" ;
  end foreach ;
  outAssemblyCode .= "\n" ;
#--- User defined registers in ram
  outAssemblyCode .= ";--- User defined registers (in RAM)\n" ;
  foreach inAllRegisters do
    if not [inPredefinedRegisters hasKey ![key string]] then
      @uint firstRegister ; [mRegisterAddressList first ?firstRegister] ;
      outAssemblyCode .= [key string] . " EQU " . [firstRegister hexString] . "\n" ;
    end if ;
  end foreach ;
  outAssemblyCode .= "\n" ;
#--- PICCOLO defined symbols
  outAssemblyCode .= ";--- Piccolo defined symbols\n" ;
  outAssemblyCode .= "W EQU 1\n" ;
  outAssemblyCode .= "BSR_ACCESS EQU 1\n\n" ;
#-------------------------------- Add Configuration
  if [inActualConfigurationMap count] > 0 then
    outAssemblyCode .= ";--- Configuration\n\n" ;
    foreach inActualConfigurationMap do
      outAssemblyCode .= "  __config " . [mRegisterAddress hexString] . ", " . [mRegisterValue & 255 hexString] . "\n" ;
    end foreach ;
  end if ;
#-------------------------------- End
  outAssemblyCode .= ";---\n\n" ;
  outAssemblyCode .= "  END\n\n" ;
end routine ;

#----------------------------------------------------*

end semantics ;
