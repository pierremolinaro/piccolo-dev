semantics ipic18_display_block_list :
import "ipic18_block_representation.gSemantics" ;
import "pic18_mnemonics.gSemantics" ;

#----------------------------------------------------------------------------*

#!--- Intermediate instruction display

#----------------------------------------------------------------------------*

abstract method @ipic18SequentialInstruction display
  ?!@string ioListFileContents
;

#----------------------------------------------------------------------------*

override method @ipic18InstructionWithNoOperand display
  ?!@string ioListFileContents
:
  ioListFileContents .= [mKind assemblyCode] ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_FDA display
  ?!@string ioListFileContents
:
  ioListFileContents .= [mInstruction_FDA_base_code mnemonic] . " " . [mRegisterDescription mAssemblyString] ;
  if m_W_isDestination & [mRegisterDescription mNeedsBSR] then
    ioListFileContents .= ", W, BSR_ACCESS" ;
  elsif [mRegisterDescription mNeedsBSR] then
    ioListFileContents .= ", F, BSR_ACCESS" ;
  elsif m_W_isDestination then
    ioListFileContents .= ", W" ;
  else
    ioListFileContents .= ", F" ;
  end if ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_FA display ?!@string ioListFileContents :
  ioListFileContents .= [mFAinstruction mnemonic] . " " . [mRegisterDescription mAssemblyString] ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_MOVFF display ?!@string ioListFileContents :
  ioListFileContents .= "MOVFF " . [mSourceRegisterDescription mAssemblyString]
  . ", " . [mDestinationRegisterDescription mAssemblyString] ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_literalOperation display ?!@string ioListFileContents :
  ioListFileContents .= [mLiteralInstruction mnemonic] . " " . [mLiteralValue hexString] ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_LFSR display ?!@string ioListFileContents :
  ioListFileContents .= "LFSR " . [[mFSRindex uint] string] . ", " . [mValue hexString] ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_FBA display ?!@string ioListFileContents :
  ioListFileContents .= [mBitOrientedOp mnemonic] . " " . [mRegisterDescription mAssemblyString] . ", " . [mBitNumber string] ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_JSR display ?!@string ioListFileContents :
  switch mKind
    when ipicRelative : ioListFileContents .= "JSR " . mTargetLabel ;
    when relative     : ioListFileContents .= "RCALL " . mTargetLabel ;
    when absolute     : ioListFileContents .= "CALL " . mTargetLabel ;
  end switch ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_MOVLB display ?!@string ioListFileContents :
  ioListFileContents .= "MOVLB " . [[mBankIndex uint] string] ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_TBLRD display ?!@string ioListFileContents :
  ioListFileContents .= "TBLRD " . [mOption mnemonic] ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_TBLWT display ?!@string ioListFileContents :
  ioListFileContents .= "TBLWT " . [mOption mnemonic] ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_MNOP display ?!@string ioListFileContents :
  ioListFileContents .= "MNOP " . [mOccurrenceFactor uint] ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_MOV_LABEL_W display ?!@string ioListFileContents :
  ioListFileContents .= "MOVLW ((" . mLabel . " + " . mOffset . ") >> " . mRightShift . ") & 0xFF"  ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_computed_rcall display ?!@string ioListFileContents :
  ioListFileContents .= "COMPUTED RCALL " ;
  if mUsesRCALL then
    ioListFileContents .= "(uses RCALL)" ;
  else
    ioListFileContents .= "(uses CALL)" ;
  end if ;
  foreach mTargetLabels do
    ioListFileContents .= "\n    " . mValue ;
  end foreach ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_BitTestSkip display ?!@string ioListFileContents :
  if mSkipIfSet then
    ioListFileContents .= "!" ;
  end if ;
  ioListFileContents .= [mRegisterDescription mAssemblyString] . "." . [mBitNumber string]
  . " ?\n    " ;
  [mEmbeddedInstruction display !?ioListFileContents] ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18_skip_instruction_FA display ?!@string ioListFileContents :
  ioListFileContents .= [mFAinstruction mnemonic] . " " . [mRegisterDescription mAssemblyString]
  . " ?\n    " ;
  [mEmbeddedInstruction display !?ioListFileContents] ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18_skip_instruction_FDA display ?!@string ioListFileContents :
  ioListFileContents .= [mInstruction_FDA_base_code mnemonic] . " " . [mRegisterDescription mAssemblyString] ;
  if m_W_isDestination then
    ioListFileContents .= ", W" ;
  end if ;
  ioListFileContents .= " ?\n    " ;
  [mEmbeddedInstruction display !?ioListFileContents] ;
end method ;

#----------------------------------------------------------------------------*

#!--- Terminator display

#----------------------------------------------------------------------------*

abstract method @ipic18AbstractBlockTerminator display
  ??@string inNextBlockLabel
  ?!@string ioListFileContents
;

#----------------------------------------------------------------------------*

override method @ipic18ReturnTerminator display
  ??@string unused inNextBlockLabel
  ?!@string ioListFileContents
:
  ioListFileContents .= "RETURN" ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18RetlwTerminator display
  ??@string unused inNextBlockLabel
  ?!@string ioListFileContents
:
  ioListFileContents .= "RETLW " . [mLiteralValue hexString] ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18RetfieTerminator display
  ??@string unused inNextBlockLabel
  ?!@string ioListFileContents
:
  ioListFileContents .= "RETFIE" ;
  if mFastReturn then
    ioListFileContents .= " FAST" ;
  end if ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18JumpTerminator display
  ??@string inNextBlockLabel
  ?!@string ioListFileContents
:
  @string name ;
  switch mKind
    when ipicRelative : name := "JUMP "  ;
    when relative     : name := "BRA " ;
    when absolute     : name := "GOTO " ;
  end switch ;
  if inNextBlockLabel == mLabel->string then
    ioListFileContents .= "(" . name . mLabel . ")" ;
  else
    ioListFileContents .= name . mLabel ;
  end if ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18ComputedGotoTerminator display
  ??@string unused inNextBlockLabel
  ?!@string ioListFileContents
:
  ioListFileContents .= "COMPUTED GOTO " ;
  if mUsesRCALL then
    ioListFileContents .= " (uses RCALL)" ;
  else
    ioListFileContents .= " (uses CALL)" ;
  end if ;
  foreach mTargetLabels do
    ioListFileContents .= "\n    " . mValue ;
  end foreach ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18ComputedRETLWTerminator display
  ??@string unused inNextBlockLabel
  ?!@string ioListFileContents
:
  ioListFileContents .= "COMPUTED RETLW " ;
  if mUsesRCALL then
    ioListFileContents .= " (uses RCALL)" ;
  else
    ioListFileContents .= " (uses CALL)" ;
  end if ;
  foreach mLiteralValues do
    ioListFileContents .= "\n    " . [mValue hexString] ;
  end foreach ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18ConditionalJumpTerminator display
  ??@string inNextBlockLabel
  ?!@string ioListFileContents
:
  ioListFileContents .= [mConditionalBranch condition] ;
  ioListFileContents .= " ? " ;
  [mInstructionIfConditionTrue display !inNextBlockLabel !?ioListFileContents] ;
  ioListFileContents .= " : " ;
  [mInstructionIfConditionFalse display !inNextBlockLabel !?ioListFileContents] ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18ComputedBraTerminator display
  ??@string unused inNextBlockLabel
  ?!@string ioListFileContents
:
  ioListFileContents .= "COMPUTED BRA " ;
  if mUsesRCALL then
    ioListFileContents .= " (uses RCALL)" ;
  else
    ioListFileContents .= " (uses CALL)" ;
  end if ;
  foreach mTargetLabels do
    ioListFileContents .= "\n    " . mValue ;
  end foreach ;
end method ;

#----------------------------------------------------------------------------*

override method @pic18BraCCTerminator display
  ??@string inNextBlockLabel
  ?!@string ioListFileContents
:
  switch mConditionalBranch
  when bz : ioListFileContents .= "BZ" ;
  when bn : ioListFileContents .= "BN" ;
  when bc : ioListFileContents .= "BC" ;
  when bov : ioListFileContents .= "BOV" ;
  end switch ;
  ioListFileContents .= " ? " ;
  [mInstructionIfConditionTrue display !inNextBlockLabel !?ioListFileContents] ;
  ioListFileContents .= " : " ;
  [mInstructionIfConditionFalse display !inNextBlockLabel !?ioListFileContents] ;
end method ;

#----------------------------------------------------------------------------*

override method @pic18RegisterComparisonTerminator display
  ??@string inNextBlockLabel
  ?!@string ioListFileContents
:
  ioListFileContents .= [mRegisterDescription mAssemblyString] . " " ;
  switch mComparison
  when registerEqualsToW :
    ioListFileContents .= "==" ;
  when registerGreaterThanW :
    ioListFileContents .= ">" ;
  when registerLowerThanW :
    ioListFileContents .= "<" ;
  end switch ;
  ioListFileContents .= " W ? " ;
  [mInstructionIfConditionTrue display !inNextBlockLabel !?ioListFileContents] ;
  ioListFileContents .= " : " ;
  [mInstructionIfConditionFalse display !"" !?ioListFileContents] ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18IncDecRegisterTerminator display
  ??@string inNextBlockLabel
  ?!@string ioListFileContents
:
  if mIncrement then
    ioListFileContents .= "INCF " ;
  else
    ioListFileContents .= "DECF " ;
  end if ;
  ioListFileContents .= [mRegisterDescription mAssemblyString] ;
  if m_W_isDestination then
    ioListFileContents .= ", W" ;
  end if ;
  ioListFileContents .= " Z ? " ;
  [mInstructionIfConditionTrue display !inNextBlockLabel !?ioListFileContents] ;
  ioListFileContents .= " : " ;
  [mInstructionIfConditionFalse display !inNextBlockLabel !?ioListFileContents] ;
end method ;

#----------------------------------------------------------------------------*

override method @pic18TestRegisterTerminator display
  ??@string inNextBlockLabel
  ?!@string ioListFileContents
:
  ioListFileContents .= [mRegisterDescription mAssemblyString] ;
  ioListFileContents .= " Z ? " ;
  [mInstructionIfConditionTrue display !inNextBlockLabel !?ioListFileContents] ;
  ioListFileContents .= " : " ;
  [mInstructionIfConditionFalse display !"" !?ioListFileContents] ;
end method ;

#----------------------------------------------------------------------------*

override method @pic18BitTestTerminator display
  ??@string inNextBlockLabel
  ?!@string ioListFileContents
:
  ioListFileContents .= [mRegisterDescription mAssemblyString] . "." . [mBitNumber string] . " ? " ;
  [mInstructionIfConditionTrue display !inNextBlockLabel !?ioListFileContents] ;
  ioListFileContents .= " : " ;
  [mInstructionIfConditionFalse display !inNextBlockLabel !?ioListFileContents] ;
end method ;

#----------------------------------------------------------------------------*

#! Block display

#----------------------------------------------------------------------------*

method @ipic18Block display
  ??@string inNextBlockLabel
  ?!@string ioListFileContents
:
  ioListFileContents .= "LABEL " . mLabel ;
  if mStartAddress != [@uint max] then
    ioListFileContents .= ", ORG " . [mStartAddress hexString] ;
  end if ;
  ioListFileContents .= ":\n" ;
#--- Instruction list
  foreach mInstructionList do
    ioListFileContents .= "  " ;
    [mInstruction display !?ioListFileContents] ;
    ioListFileContents .= "\n" ;
  end foreach ;
#--- Terminator
  ioListFileContents .= "  " ;
  [mTerminator display !inNextBlockLabel !?ioListFileContents] ;
  ioListFileContents .= "\n\n" ;
end method ;

#----------------------------------------------------------------------------*

#! Block list display

#----------------------------------------------------------------------------*

routine displayBlockList
  ??@string inTitle
  ?!@string ioListFileContents
  ??@ipic18BlockList inGeneratedBlockList
:
  ioListFileContents .= ["" stringByLeftAndRightPadding !79 !'*'] . "\n" ;
  ioListFileContents .= "*" . [inTitle stringByLeftAndRightPadding !77 !' '] . "*\n" ;
  ioListFileContents .= ["" stringByLeftAndRightPadding !79 !'*'] . "\n\n" ;
  foreach inGeneratedBlockList index blockIndex do
    @string nextBlockLabel ;
    if (blockIndex+1) < [inGeneratedBlockList length] then
      nextBlockLabel := [inGeneratedBlockList mBlockAtIndex !blockIndex+1]->mLabel->string ;
    else
      nextBlockLabel := "" ;
    end if ;
    [mBlock display !nextBlockLabel !?ioListFileContents] ;
  end foreach ;
end routine ;

#----------------------------------------------------------------------------*

end semantics ;
