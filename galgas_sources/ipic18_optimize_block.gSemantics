semantics ipic18_optimize_block :
import "ipic18_display_block_list.gSemantics" ;

#----------------------------------------------------------------------------*

#!--- Terminator optimizeTerminator

#----------------------------------------------------------------------------*

abstract method @ipic18AbstractBlockTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ??@string unused inBlockLabel
  ?!@bool ioOptimizationDone
  ?!@string ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
;

#----------------------------------------------------------------------------*

override method @ipic18ComputedBraTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization unused inSymbolTable
  ??@ipic18BlockList unused inBlockList
  ??@string unused inBlockLabel
  ?!@bool unused ioOptimizationDone
  ?!@string unused ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  outOptimizedTerminator := selfcopy ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18ComputedGotoTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization unused inSymbolTable
  ??@ipic18BlockList unused inBlockList
  ??@string unused inBlockLabel
  ?!@bool unused ioOptimizationDone
  ?!@string unused ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  outOptimizedTerminator := selfcopy ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18AbstractConditionTerminator optimizeTerminator
   ??@symbolTableForBlockOptimization unused inSymbolTable
  ??@ipic18BlockList unused inBlockList
  ??@string unused inBlockLabel
  ?!@bool unused ioOptimizationDone
  ?!@string unused ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  outOptimizedTerminator := selfcopy ;
end method ;

#----------------------------------------------------------------------------*

method @ipic18AbstractConditionTerminator getOptimizedTerminators
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ??@string inBlockLabel
  ?!@bool ioOptimizationDone
  ?!@string ioListFileContents
  !@ipic18SingleInstructionTerminator outOptimizedTrueTerminator
  !@ipic18SingleInstructionTerminator outOptimizedFalseTerminator
:
#---
  [mInstructionIfConditionTrue optimizeTerminator
    !inSymbolTable
    !inBlockList
    !inBlockLabel
    !?ioOptimizationDone
    !?ioListFileContents
    ?@ipic18AbstractBlockTerminator optimizedTrueTerminator
  ] ;
  outOptimizedTrueTerminator := (cast optimizedTrueTerminator : @ipic18SingleInstructionTerminator) ;
#---
  [mInstructionIfConditionFalse optimizeTerminator
    !inSymbolTable
    !inBlockList
    !inBlockLabel
    !?ioOptimizationDone
    !?ioListFileContents
    ?@ipic18AbstractBlockTerminator optimizedFalseTerminator
  ] ;
  outOptimizedFalseTerminator := (cast optimizedFalseTerminator : @ipic18SingleInstructionTerminator) ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18ConditionalJumpTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ??@string inBlockLabel
  ?!@bool ioOptimizationDone
  ?!@string ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  @bool optimization := false ;
#---
  [selfcopy getOptimizedTerminators
    !inSymbolTable
    !inBlockList
    !inBlockLabel
    !?optimization
    !?ioListFileContents
    ?@ipic18SingleInstructionTerminator optimizedTrueTerminator
    ?@ipic18SingleInstructionTerminator optimizedFalseTerminator
  ] ;
  if optimization then
    outOptimizedTerminator := [@ipic18ConditionalJumpTerminator new
      !optimizedTrueTerminator
      !optimizedFalseTerminator 
      !mBranchMode
      !mConditionalBranch
    ] ;
    ioOptimizationDone := true ;
  else
    outOptimizedTerminator := selfcopy ;
  end if ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18IncDecRegisterTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ??@string inBlockLabel
  ?!@bool ioOptimizationDone
  ?!@string ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  @bool optimization := false ;
#---
  [selfcopy getOptimizedTerminators
    !inSymbolTable
    !inBlockList
    !inBlockLabel
    !?optimization
    !?ioListFileContents
    ?@ipic18SingleInstructionTerminator optimizedTrueTerminator
    ?@ipic18SingleInstructionTerminator optimizedFalseTerminator
  ] ;
  if optimization then
    outOptimizedTerminator := [@ipic18IncDecRegisterTerminator new
      !optimizedTrueTerminator
      !optimizedFalseTerminator 
      !mRegisterDescription
      !mIncrement
      !m_W_isDestination
    ] ;
    ioOptimizationDone := true ;
  else
    outOptimizedTerminator := selfcopy ;
  end if ;
end method ;

#----------------------------------------------------------------------------*

override method @pic18BitTestTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ??@string inBlockLabel
  ?!@bool ioOptimizationDone
  ?!@string ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  @bool optimization := false ;
#---
  [selfcopy getOptimizedTerminators
    !inSymbolTable
    !inBlockList
    !inBlockLabel
    !?optimization
    !?ioListFileContents
    ?@ipic18SingleInstructionTerminator optimizedTrueTerminator
    ?@ipic18SingleInstructionTerminator optimizedFalseTerminator
  ] ;
  if optimization then
    outOptimizedTerminator := [@pic18BitTestTerminator new
      !optimizedTrueTerminator
      !optimizedFalseTerminator 
      !mRegisterDescription
      !mBitNumber
    ] ;
    ioOptimizationDone := true ;
  else
    outOptimizedTerminator := selfcopy ;
  end if ;
end method ;

#----------------------------------------------------------------------------*

override method @pic18BraCCTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ??@string inBlockLabel
  ?!@bool ioOptimizationDone
  ?!@string ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  @bool optimization := false ;
  [selfcopy getOptimizedTerminators
    !inSymbolTable
    !inBlockList
    !inBlockLabel
    !?optimization
    !?ioListFileContents
    ?@ipic18SingleInstructionTerminator optimizedTrueTerminator
    ?@ipic18SingleInstructionTerminator optimizedFalseTerminator
  ] ;
  if optimization then
    outOptimizedTerminator := [@pic18BraCCTerminator new
      !optimizedTrueTerminator
      !optimizedFalseTerminator 
      !mBranchMode
      !mConditionalBranch
    ] ;
    ioOptimizationDone := true ;
  else
    outOptimizedTerminator := selfcopy ;
  end if ;
end method ;

#----------------------------------------------------------------------------*

override method @pic18RegisterComparisonTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ??@string inBlockLabel
  ?!@bool ioOptimizationDone
  ?!@string ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  @bool optimization := false ;
  [selfcopy getOptimizedTerminators
    !inSymbolTable
    !inBlockList
    !inBlockLabel
    !?optimization
    !?ioListFileContents
    ?@ipic18SingleInstructionTerminator optimizedTrueTerminator
    ?@ipic18SingleInstructionTerminator optimizedFalseTerminator
  ] ;
  if optimization then
    outOptimizedTerminator := [@pic18RegisterComparisonTerminator new
      !optimizedTrueTerminator
      !optimizedFalseTerminator 
      !mRegisterDescription
      !mComparison
    ] ;
    ioOptimizationDone := true ;
  else
    outOptimizedTerminator := selfcopy ;
  end if ;
end method ;

#----------------------------------------------------------------------------*

override method @pic18TestRegisterTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ??@string inBlockLabel
  ?!@bool ioOptimizationDone
  ?!@string ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  @bool optimization := false ;
  [selfcopy getOptimizedTerminators
    !inSymbolTable
    !inBlockList
    !inBlockLabel
    !?optimization
    !?ioListFileContents
    ?@ipic18SingleInstructionTerminator optimizedTrueTerminator
    ?@ipic18SingleInstructionTerminator optimizedFalseTerminator
  ] ;
  if optimization then
    outOptimizedTerminator := [@pic18TestRegisterTerminator new
      !optimizedTrueTerminator
      !optimizedFalseTerminator 
      !mRegisterDescription
    ] ;
    ioOptimizationDone := true ;
  else
    outOptimizedTerminator := selfcopy ;
  end if ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18JumpTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ??@string inBlockLabel
  ?!@bool ioOptimizationDone
  ?!@string ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  outOptimizedTerminator := selfcopy ;
  if inBlockLabel != mLabel->string then
    [inSymbolTable searchKey !mLabel ??@uint targetBlockIndex] ;
    const @ipic18Block targetBlock := [inBlockList mBlockAtIndex !targetBlockIndex] ;
    if (targetBlock->mStartAddress == [@uint max]) # Relocatable
     & ([targetBlock->mInstructionList length] == 0) # Empty block
     & (targetBlock->mTerminator is @ipic18SingleInstructionTerminator) then
      @bool optimize ;
      if (targetBlock->mTerminator is @ipic18JumpTerminator) then
        const @ipic18JumpTerminator candidate := (cast targetBlock->mTerminator : @ipic18JumpTerminator) ;
        optimize := mLabel->string != [candidate mLabel]->string ;
      else
        optimize := true ;
      end if ;
      if optimize then 
        outOptimizedTerminator := targetBlock->mTerminator ;
        ioOptimizationDone := true ;
        ioListFileContents .= "  " . inBlockLabel . ": " ;
        [selfcopy display !"" !?ioListFileContents] ;
        ioListFileContents .= " -> " ;
        [outOptimizedTerminator display !"" !?ioListFileContents] ;
        ioListFileContents .= "\n" ;
      end if ;
    end if ;
  end if ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18RetfieTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization unused inSymbolTable
  ??@ipic18BlockList unused inBlockList
  ??@string unused inBlockLabel
  ?!@bool unused ioOptimizationDone
  ?!@string unused ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  outOptimizedTerminator := selfcopy ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18RetlwTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization unused inSymbolTable
  ??@ipic18BlockList unused inBlockList
  ??@string unused inBlockLabel
  ?!@bool unused ioOptimizationDone
  ?!@string unused ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  outOptimizedTerminator := selfcopy ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18ReturnTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization unused inSymbolTable
  ??@ipic18BlockList unused inBlockList
  ??@string unused inBlockLabel
  ?!@bool unused ioOptimizationDone
  ?!@string unused ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  outOptimizedTerminator := selfcopy ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18ComputedRETLWTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization unused inSymbolTable
  ??@ipic18BlockList unused inBlockList
  ??@string unused inBlockLabel
  ?!@bool unused ioOptimizationDone
  ?!@string unused ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  outOptimizedTerminator := selfcopy ;
end method ;

#----------------------------------------------------------------------------*

#!--- Terminator enterTerminatorReferencedLabels

#----------------------------------------------------------------------------*

abstract method @ipic18AbstractBlockTerminator enterTerminatorReferencedLabels
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ?!@stringset ioReferencedBlockSet
;

#----------------------------------------------------------------------------*

override method @ipic18ComputedBraTerminator enterTerminatorReferencedLabels
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ?!@stringset ioReferencedBlockSet
:
  foreach mTargetLabels do
    if not [ioReferencedBlockSet hasKey !mValue->string] then
      ioReferencedBlockSet += !mValue->string ;
      [inSymbolTable searchKey !mValue ??@uint blockIndex] ;
      const @ipic18Block b := [inBlockList mBlockAtIndex !blockIndex] ;
      [b enterReferencedLabels
        !inSymbolTable
        !inBlockList
        !?ioReferencedBlockSet
      ] ;
    end if ; 
  end foreach ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18ComputedGotoTerminator enterTerminatorReferencedLabels
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ?!@stringset ioReferencedBlockSet
:
  foreach mTargetLabels do
    if not [ioReferencedBlockSet hasKey !mValue->string] then
      ioReferencedBlockSet += !mValue->string ;
      [inSymbolTable searchKey !mValue ??@uint blockIndex] ;
      const @ipic18Block b := [inBlockList mBlockAtIndex !blockIndex] ;
      [b enterReferencedLabels
        !inSymbolTable
        !inBlockList
        !?ioReferencedBlockSet
      ] ;
    end if ; 
  end foreach ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18JumpTerminator enterTerminatorReferencedLabels
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ?!@stringset ioReferencedBlockSet
:
  if not [ioReferencedBlockSet hasKey !mLabel->string] then
    ioReferencedBlockSet += !mLabel->string ;
    [inSymbolTable searchKey !mLabel ??@uint blockIndex] ;
    const @ipic18Block b := [inBlockList mBlockAtIndex !blockIndex] ;
    [b enterReferencedLabels
      !inSymbolTable
      !inBlockList
      !?ioReferencedBlockSet
    ] ;
  end if ; 
end method ;

#----------------------------------------------------------------------------*

override method @ipic18SingleInstructionTerminator enterTerminatorReferencedLabels
  ??@symbolTableForBlockOptimization unused inSymbolTable
  ??@ipic18BlockList unused inBlockList
  ?!@stringset unused ioReferencedBlockSet
:
end method ;

#----------------------------------------------------------------------------*

override method @ipic18ComputedRETLWTerminator enterTerminatorReferencedLabels
  ??@symbolTableForBlockOptimization unused inSymbolTable
  ??@ipic18BlockList unused inBlockList
  ?!@stringset unused ioReferencedBlockSet
:
end method ;

#----------------------------------------------------------------------------*

override method @ipic18AbstractConditionTerminator enterTerminatorReferencedLabels
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ?!@stringset ioReferencedBlockSet
:
  [mInstructionIfConditionTrue enterTerminatorReferencedLabels !inSymbolTable !inBlockList !?ioReferencedBlockSet] ;
  [mInstructionIfConditionFalse enterTerminatorReferencedLabels !inSymbolTable !inBlockList !?ioReferencedBlockSet] ;
end method ;

#----------------------------------------------------------------------------*

#!--- Instruction enterInstructionReferencedLabels

#----------------------------------------------------------------------------*

method @ipic18SequentialInstruction enterInstructionReferencedLabels
  ??@symbolTableForBlockOptimization unused inSymbolTable
  ??@ipic18BlockList unused inBlockList
  ?!@stringset unused ioReferencedBlockSet
:
end method ;

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_JSR enterInstructionReferencedLabels
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ?!@stringset ioReferencedBlockSet
:
  if not [ioReferencedBlockSet hasKey !mTargetLabel->string] then
    ioReferencedBlockSet += !mTargetLabel->string ;
    [inSymbolTable searchKey !mTargetLabel ??@uint blockIndex] ;
    const @ipic18Block b := [inBlockList mBlockAtIndex !blockIndex] ;
    [b enterReferencedLabels
      !inSymbolTable
      !inBlockList
      !?ioReferencedBlockSet
    ] ;
  end if ; 
end method ;

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_computed_rcall enterInstructionReferencedLabels
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ?!@stringset ioReferencedBlockSet
:
  foreach mTargetLabels do
    if not [ioReferencedBlockSet hasKey !mValue->string] then
      ioReferencedBlockSet += !mValue->string ;
      [inSymbolTable searchKey !mValue ??@uint blockIndex] ;
      const @ipic18Block b := [inBlockList mBlockAtIndex !blockIndex] ;
      [b enterReferencedLabels
        !inSymbolTable
        !inBlockList
        !?ioReferencedBlockSet
      ] ;
    end if ; 
  end foreach ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18_condition_skip_instruction  enterInstructionReferencedLabels
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ?!@stringset ioReferencedBlockSet
:
  [mEmbeddedInstruction enterInstructionReferencedLabels
    !inSymbolTable
    !inBlockList
    !?ioReferencedBlockSet
  ] ;
end method ;

#----------------------------------------------------------------------------*

#!--- Block optimization

#----------------------------------------------------------------------------*

method @ipic18SequentialInstructionList enterInstructionReferencedLabels
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ?!@stringset ioReferencedBlockSet
:
  foreach selfcopy do
    [mInstruction enterInstructionReferencedLabels
      !inSymbolTable
      !inBlockList
      !?ioReferencedBlockSet
    ] ;  
  end foreach ;
end method ;

#----------------------------------------------------------------------------*

method @ipic18Block enterReferencedLabels
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ?!@stringset ioReferencedBlockSet
:
  [mInstructionList enterInstructionReferencedLabels
    !inSymbolTable
    !inBlockList
    !?ioReferencedBlockSet
  ] ;
  [mTerminator enterTerminatorReferencedLabels
    !inSymbolTable
    !inBlockList
    !?ioReferencedBlockSet
  ] ;
end method ;

#----------------------------------------------------------------------------*

method @ipic18Block optimize
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ?!@bool ioOptimizationDone
  ?!@string ioListFileContents
  !@ipic18Block outOptimizedBlock
:
  outOptimizedBlock := selfcopy ;
  @bool optimized := false ;
#--- Transform MOVLW k ; RETURN to RETLW
  @ipic18SequentialInstructionList instructionList := mInstructionList ;
  if ([mInstructionList length] > 0) & (mTerminator is @ipic18ReturnTerminator) then
    [instructionList last ??@ipic18SequentialInstruction lastInstruction] ;
    if (lastInstruction is @ipic18_intermediate_instruction_literalOperation) then
      const @ipic18_intermediate_instruction_literalOperation op := (cast lastInstruction : @ipic18_intermediate_instruction_literalOperation) ;
      if [op mLiteralInstruction] == [@literal_instruction_opcode MOVLW] then
        [!?instructionList popLast ?*] ;
        const @ipic18RetlwTerminator newTerminator [new ![op mLiteralValue]] ;
        outOptimizedBlock := [@ipic18Block new
          !mStartAddress
          !mLabel
          !instructionList
          !newTerminator
        ] ;
        optimized := true ;
        ioOptimizationDone := true ;
        ioListFileContents .= "  " . mLabel . ": " ;
        [mTerminator display !"" !?ioListFileContents] ;
        ioListFileContents .= " -> " ;
        [newTerminator display !"" !?ioListFileContents] ;
        ioListFileContents .= "\n" ;
      end if ;
    end if ;
#--- Transform JSR label ; RETURN to JUMP label
    if (not optimized) & (lastInstruction is @ipic18_intermediate_JSR) then
      const @ipic18_intermediate_JSR jsr := (cast lastInstruction : @ipic18_intermediate_JSR) ;
      [!?instructionList popLast ?*] ;
      const @ipic18JumpTerminator newTerminator [new ![jsr mTargetLabel] ![jsr mKind]] ;
      outOptimizedBlock := [@ipic18Block new
        !mStartAddress
        !mLabel
        !instructionList
        !newTerminator
      ] ;
      optimized := true ;
      ioOptimizationDone := true ;
      ioListFileContents .= "  " . mLabel . ": " ;
      [mTerminator display !"" !?ioListFileContents] ;
      ioListFileContents .= " -> " ;
      [newTerminator display !"" !?ioListFileContents] ;
      ioListFileContents .= "\n" ;
    end if ;
  end if ;
#--- Optimize terminator
  if not optimized then
    [mTerminator optimizeTerminator
      !inSymbolTable
      !inBlockList
      !mLabel->string
      !?ioOptimizationDone
      !?ioListFileContents
      ??@ipic18AbstractBlockTerminator optimizedTerminator
    ] ;
    outOptimizedBlock := [@ipic18Block new
      !mStartAddress
      !mLabel
      !mInstructionList
      !optimizedTerminator 
    ] ;
  end if ;
end method ;

#----------------------------------------------------------------------------*

routine ipic18OptimizeBlocks
  ?!@string ioListFileContents
  ?!@ipic18BlockList ioGeneratedBlockList
:
  ioListFileContents .= ["" stringByLeftAndRightPadding !79 !'*'] . "\n" ;
  ioListFileContents .= "*" . ["BLOCK REPRESENTATION OPTIMIZATION" stringByLeftAndRightPadding !77 !' '] . "*\n" ;
  ioListFileContents .= ["" stringByLeftAndRightPadding !79 !'*'] . "\n" ;
  if [option.verbose_output value] then
    message "Optimizations:\n" ;
  end if ;
#--- Optimizations loops
  @bool optimizationDone := true ;
  @uint optimizationPass := 0 ;
  loop [ioGeneratedBlockList length] + 1
  while optimizationDone & ([@uint errorCount] == 0) do
    optimizationDone := false ;
    optimizationPass := optimizationPass + 1 ;
    ioListFileContents .= "\n--- Pass " . optimizationPass . " (" . [ioGeneratedBlockList length] . " blocks)\n" ;
    if [option.verbose_output value] then
      message "  Pass " . optimizationPass . " (" . [ioGeneratedBlockList length] . " blocks)\n" ;
    end if ;
  #-------------------------------- Build label map
    @symbolTableForBlockOptimization symbolTable [emptyMap] ;
    foreach ioGeneratedBlockList index blockIndex do
      [!?symbolTable insertKey !mBlock->mLabel !blockIndex] ;
    end foreach ;
  #-------------------------------- Build referenced label set
    @stringset referencedBlockSet [emptySet] ;
    foreach ioGeneratedBlockList do
      if mBlock->mStartAddress != [@uint max] then # Only absolute blocks
        [mBlock enterReferencedLabels
          !symbolTable
          !ioGeneratedBlockList
          !?referencedBlockSet
        ] ;
      end if ;
    end foreach ;
  #-------------------------------- Optimization loop
    @ipic18BlockList optimizedBlockList [emptyList] ;
    foreach ioGeneratedBlockList do
      if [referencedBlockSet hasKey !mBlock->mLabel->string] | (mBlock->mStartAddress != [@uint max]) then
        [mBlock optimize
          !symbolTable
          !ioGeneratedBlockList
          !?optimizationDone
          !?ioListFileContents
          ?@ipic18Block optimizedBlock
        ] ;
        optimizedBlockList += !optimizedBlock ;
      else
        ioListFileContents .= "  " . mBlock->mLabel . ": not referenced, deleted\n" ;
        optimizationDone := true ;
      end if ;
    end foreach ;
    ioGeneratedBlockList := optimizedBlockList ;
  end loop ;
  ioListFileContents .= "  No optimization.\n\n" ;
  if [option.verbose_output value] then
    message "\n" ;
  end if ;
end routine ;

#----------------------------------------------------------------------------*


end semantics ;
