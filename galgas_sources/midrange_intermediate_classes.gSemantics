semantics midrange_intermediate_classes :
import "midrange_metamodel.gSemantics" ;
import "piccoloDevice_semantics.gSemantics" ;

#----------------------------------------------------*

struct @midrange_intermediate_registerExpression {
  @string mAssemblyString ;
  @uint mRegisterAddress ; # xxx bit full address
}

#----------------------------------------------------*

method @registerExpression resolveMidrangeAccess
  ??@uint inTotalBankCount
  ??@uint inCurrentBank
  ??@registerTable inRegisterTable
  !@midrange_intermediate_registerExpression outIPICregisterDescription
  !@bitSliceTable outBitSliceTable
:
#--- Build assembly string
  @string assemblyString := [mRegisterName string] ;
  if [mOffset uint] > 0 then
    assemblyString .= " + " . [[mOffset uint] hexString] ;
  end if ;
#--- 
  [inRegisterTable searchKey
    !mRegisterName
    ?@uintlist registerAddressList
    ?@uint size
    ?outBitSliceTable
    ?*
  ] ;
#---
  if [mOffset uint] >= size then
    error mOffset: "maximum index value is " . (size - 1) ;
  end if ;
#--- Find acceptable bank settings
  @uintlist acceptableBanks [emptyList] ;
  foreach registerAddressList do
    acceptableBanks += !mValue >> 7 ;
  end foreach ;
#---
  @uint registerAddress := 0 ;
  if inCurrentBank == [@uint max] then
  #--- No selected bank, register should be mirrored in all banks
    @uint bank := 0 ;
    @bool ok := true ;
    loop inTotalBankCount : while (bank < inTotalBankCount) & ok do
      ok := false ;
      foreach registerAddressList while not ok do
        ok := (mValue >= (bank * 128)) & (mValue < (bank * 128 + 128)) ;
        registerAddress := mValue & 0x7F ;
      end foreach ;
      bank ++ ;
    end loop ;
    if not ok then
      @string acceptableBankMessage := "" ;
      foreach registerAddressList
      do acceptableBankMessage .= [mValue >> 7 string] ;
      between acceptableBankMessage .= ", " ;
      end foreach ;
      error mRegisterName:"as no bank is currently known, the '" . mRegisterName . "' register accessible from bank ". acceptableBankMessage  . ", but should be able to be accessed from any bank setting" ;
    end if ;
  else
    @bool found := false ;
    foreach registerAddressList while not found do
      found := (mValue >= (inCurrentBank * 128)) & (mValue < (inCurrentBank * 128 + 128)) ;
      registerAddress := mValue & 0x7F ;
    end foreach ;
    if not found then
      @string acceptableBankMessage := "" ;
      foreach registerAddressList
      do acceptableBankMessage .= [mValue >> 7 string] ;
      between acceptableBankMessage .= ", " ;
      end foreach ;
      error mRegisterName:"the '" . mRegisterName . "' register cannot be accessed from bank " . [inCurrentBank string] . " (valid bank setting: " . acceptableBankMessage . ")" ;
    end if ;
  end if ;
#---
  outIPICregisterDescription := [@midrange_intermediate_registerExpression new
    !assemblyString
    !registerAddress + [mOffset uint]
  ] ;
end method ;

#----------------------------------------------------*

abstract class @midrange_intermediate_instruction {
}

#----------------------------------------------------*

list @midrange_intermediate_instructionList {
  @midrange_intermediate_instruction mInstruction feature setter ;
}

#----------------------------------------------------*

class @midrange_intermediate_NULL extends @midrange_intermediate_instruction {
}


#----------------------------------------------------*

class @midrange_intermediate_pseudo_ORG extends @midrange_intermediate_instruction {
  @uint mOrigin ;
}

#----------------------------------------------------*

class @midrange_intermediate_pseudo_LABEL extends @midrange_intermediate_instruction {
  @lstring mLabel ;
  @bool mIsDeletable ;
}

#----------------------------------------------------*

abstract class @midrange_intermediate_actualInstruction extends @midrange_intermediate_instruction {
  @location mInstructionLocation ;
}

#----------------------------------------------------*

class @midrange_intermediate_instruction_FD extends @midrange_intermediate_actualInstruction {
  @midrange_instruction_FD_base_code mInstruction_FD_base_code ;
  @midrange_intermediate_registerExpression mRegisterDescription ;
  @bool m_W_isDestination ;
}

#----------------------------------------------------*

class @midrange_intermediate_instruction_F extends @midrange_intermediate_actualInstruction {
  @midrange_F_instruction_base_code mFinstruction ;
  @midrange_intermediate_registerExpression mRegisterDescription ;
}

#----------------------------------------------------*

class @midrange_intermediate_instruction_FB extends @midrange_intermediate_actualInstruction {
  @midrange_bit_oriented_op mBitOrientedOp ;
  @midrange_intermediate_registerExpression mRegisterDescription ;
  @uint mBitNumber ;
}

#----------------------------------------------------*

class @midrange_intermediate_instruction_BitTestSkip extends @midrange_intermediate_actualInstruction {
  @bool mSkipIfSet ;
  @midrange_intermediate_registerExpression mRegisterDescription ;
  @uint mBitNumber ;
}

#----------------------------------------------------*

enum @midrange_call_goto_bit {
  set, clear, noChange
}

#----------------------------------------------------*

class @midrange_intermediate_JUMP extends @midrange_intermediate_actualInstruction {
  @lstring mTargetLabel ;
  @midrange_call_goto_bit mBit11 ;
  @midrange_call_goto_bit mBit12 ;
}

#----------------------------------------------------*

class @midrange_intermediate_GOTO extends @midrange_intermediate_actualInstruction {
  @lstring mTargetLabel ;
}

#----------------------------------------------------*

class @midrange_intermediate_CALL extends @midrange_intermediate_actualInstruction {
  @lstring mTargetLabel ;
}

#----------------------------------------------------*

class @midrange_intermediate_JSR extends @midrange_intermediate_actualInstruction {
  @lstring mTargetLabel ;
  @midrange_call_goto_bit mBit11 ;
  @midrange_call_goto_bit mBit12 ;
}

#----------------------------------------------------*

class @midrange_intermediate_instruction_CLRWDT extends @midrange_intermediate_actualInstruction {
}

#----------------------------------------------------*

class @midrange_intermediate_instruction_CLRW extends @midrange_intermediate_actualInstruction {
}

#----------------------------------------------------*

class @midrange_intermediate_instruction_NOP extends @midrange_intermediate_actualInstruction {
}

#----------------------------------------------------*

class @midrange_intermediate_instruction_RETURN extends @midrange_intermediate_actualInstruction {
}

#----------------------------------------------------*

class @midrange_intermediate_instruction_RETFIE extends @midrange_intermediate_actualInstruction {
}

#----------------------------------------------------*

class @midrange_intermediate_instruction_SLEEP extends @midrange_intermediate_actualInstruction {
}

#----------------------------------------------------*

class @midrange_intermediate_instruction_literalOperation extends @midrange_intermediate_actualInstruction {
  @midrange_literal_instruction_opcode mLiteralInstruction ;
  @uint mLiteralValue ;
}

#----------------------------------------------------*

class @midrange_intermediate_instruction_MNOP extends @midrange_intermediate_actualInstruction {
  @luint mOccurrenceFactor ;
}

#----------------------------------------------------*

class @midrange_intermediate_incDecRegisterInCondition extends @midrange_intermediate_actualInstruction {
  @midrange_intermediate_registerExpression mRegisterDescription ;
  @string mTargetLabel ;
  @bool mIncrement ;
  @bool m_W_isDestination ;
  @bool mBranchIfZero ;
}

#----------------------------------------------------*

end semantics ;
