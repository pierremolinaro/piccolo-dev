semantics midrange_metamodel :

import "generic_metamodel.gSemantics" ;

#----------------------------------------------------*

abstract class @midrange_instruction {
  @location mInstructionLocation ;
}

#----------------------------------------------------*

list @midrange_instructionList {
  @midrange_instruction mInstruction ;
}

#----------------------------------------------------*

class @midrange_instruction_nobanksel extends @midrange_instruction {
}

#----------------------------------------------------*

class @midrange_instruction_banksel extends @midrange_instruction {
  @luint mBankIndex ;
  @bool mWarningOnUselessBanksel ;
}

#----------------------------------------------------*

class @midrange_instruction_banksel_register extends @midrange_instruction {
  @registerExpression mRegister ;
  @bool mWarningOnUselessBanksel ;
}

#----------------------------------------------------*

class @midrange_instruction_savebank extends @midrange_instruction {
  @registerExpression mRegister ;
  @midrange_instructionList mInstructionList ;
  @location mEndOfSaveBankInstruction ;
}

#----------------------------------------------------*

enum @midrange_instruction_FD_base_code {
  ADDWF, ANDWF, COMF, DECF, DECFSZ, INCF, INCFSZ, IORWF, MOVF, RLF, RRF, SUBWF, SWAPF, XORWF
}

reader @midrange_instruction_FD_base_code mnemonic -> @string outResult :
  switch selfcopy
    when ADDWF : outResult := "ADDWF" ;
    when ANDWF : outResult := "ANDWF" ;
    when COMF : outResult := "COMF" ;
    when DECF : outResult := "DECF" ;
    when DECFSZ : outResult := "DECFSZ" ;
    when INCF : outResult := "INCF" ;
    when INCFSZ : outResult := "INCFSZ" ;
    when IORWF : outResult := "IORWF" ;
    when MOVF : outResult := "MOVF" ;
    when RLF : outResult := "RLF" ;
    when RRF : outResult := "RRF" ;
    when SUBWF : outResult := "SUBWF" ;
    when SWAPF : outResult := "SWAPF" ;
    when XORWF : outResult := "XORWF" ;
  end switch ;
end reader ;

#----------------------------------------------------*

class @midrange_instruction_FD extends @midrange_instruction {
  @midrange_instruction_FD_base_code mInstruction_FD_base_code ;
  @registerExpression mRegisterExpression ;
  @bool m_W_isDestination ;
}

#----------------------------------------------------*

enum @midrange_F_instruction_base_code {
  CLRF, MOVWF
}

reader @midrange_F_instruction_base_code mnemonic -> @string outResult :
  switch selfcopy
    when CLRF   : outResult := "CLRF" ;
    when MOVWF  : outResult := "MOVWF" ;
  end switch ;
end reader ;

#----------------------------------------------------*

class @midrange_instruction_F extends @midrange_instruction {
  @midrange_F_instruction_base_code mFAinstruction ;
  @registerExpression mRegisterExpression ;
}

#----------------------------------------------------*

enum @midrange_bit_oriented_op {
  BCF, BSF
}

reader @midrange_bit_oriented_op mnemonic -> @string outResult :
  switch selfcopy
    when BCF : outResult := "BCF" ;
    when BSF : outResult := "BSF" ;
  end switch ;
end reader ;

#----------------------------------------------------*

class @midrange_instruction_FB extends @midrange_instruction {
  @midrange_bit_oriented_op mBitOrientedOp ;
  @registerExpression mRegisterExpression ;
  @bitNumberExpression mBitNumber ;
}

#----------------------------------------------------*

class @midrange_instruction_CALL extends @midrange_instruction {
  @lstring mTargetLabel ;
}

#----------------------------------------------------*

class @midrange_instruction_JSR extends @midrange_instruction {
  @lstring mTargetLabel ;
}

#----------------------------------------------------*

class @midrange_instruction_JUMP extends @midrange_instruction {
  @lstring mTargetLabel ;
}

#----------------------------------------------------*

class @midrange_instruction_GOTO extends @midrange_instruction {
  @lstring mTargetLabel ;
}

#----------------------------------------------------*

class @midrange_instruction_CLRWDT extends @midrange_instruction {
}

#----------------------------------------------------*

class @midrange_instruction_CLRW extends @midrange_instruction {
}

#----------------------------------------------------*

class @midrange_instruction_NOP extends @midrange_instruction {
}

#----------------------------------------------------*

class @midrange_instruction_SLEEP extends @midrange_instruction {
}

#----------------------------------------------------*

enum @midrange_literal_instruction_opcode {
  ADDLW, ANDLW, IORLW, MOVLW, RETLW, SUBLW, XORLW
}

reader @midrange_literal_instruction_opcode mnemonic -> @string outResult :
  switch selfcopy
    when ADDLW : outResult := "ADDLW" ;
    when ANDLW : outResult := "ANDLW" ;
    when IORLW : outResult := "IORLW" ;
    when MOVLW : outResult := "MOVLW" ;
    when RETLW : outResult := "RETLW" ;
    when SUBLW : outResult := "SUBLW" ;
    when XORLW : outResult := "XORLW" ;
  end switch ;
end reader ;

#----------------------------------------------------*

class @midrange_instruction_literalOperation extends @midrange_instruction {
  @midrange_literal_instruction_opcode mLiteralInstruction ;
  @immediatExpression mImmediatExpression ;
}

#----------------------------------------------------*

class @midrange_instruction_MNOP extends @midrange_instruction {
  @luint mOccurrenceFactor ;
}

#----------------------------------------------------*

class @midrange_instruction_FOREVER extends @midrange_instruction {
  @midrange_instructionList mInstructionList ;
  @location mEndOfInstructionList ;
}

#----------------------------------------------------*

abstract class @midrange_instruction_IF_SEMI_COLON extends @midrange_instruction {
  @midrange_instruction mInstruction ;
}

#----------------------------------------------------*

class @midrange_instruction_IF_BitTest extends @midrange_instruction_IF_SEMI_COLON {
  @bool mSkipIfSet ;
  @registerExpression mRegisterExpression ;
  @bitNumberExpression mBitNumber ;
}

method @midrange_instruction_IF_BitTest getBaseCode !@uint outBaseCode :
  if mSkipIfSet then
    outBaseCode := 0x1C00 ; # BTFSS
  else
    outBaseCode := 0x1800 ; # BTFSC
  end if ;
end method ; 

method @midrange_instruction_IF_BitTest getMnemonic !@string outMnemonic :
  if mSkipIfSet then
    outMnemonic := "BTFSS" ;
  else
    outMnemonic := "BTFSC" ;
  end if ;
end method ; 


#----------------------------------------------------*

class @midrange_instruction_IF_IncDec extends @midrange_instruction_IF_SEMI_COLON {
  @bool mIncrement ;
  @registerExpression mRegisterExpression ;
  @bool m_W_isDestination ;
}

#----------------------------------------------------*

abstract class @midrange_conditionExpression {
}

#----------------------------------------------------*

class @midrange_incDecRegisterInCondition extends @midrange_conditionExpression {
  @registerExpression mRegisterExpression ;
  @bool mIncrement ;
  @bool m_W_isDestination ;
  @bool mBranchIfZero ;
}

#----------------------------------------------------*

class @midrange_negateCondition extends @midrange_conditionExpression {
  @midrange_conditionExpression mCondition ;
}

#----------------------------------------------------*

class @midrange_andCondition extends @midrange_conditionExpression {
  @midrange_conditionExpression mLeftExpression ;
  @midrange_conditionExpression mRightExpression ;
}

#----------------------------------------------------*

class @midrange_bitTest_in_structured_if_condition extends @midrange_conditionExpression {
  @registerExpression mRegisterExpression ;
  @bitNumberExpression mBitNumber ;
  @bool mBTFSSinstruction ;
}

#----------------------------------------------------*

class @midrange_instruction_structured_if extends @midrange_instruction {
  @midrange_conditionExpression mIfCondition ;
  @midrange_instructionList mThenInstructionList ;
  @midrange_instructionList mElseInstructionList ;
  @location mEndOfElsePartLocation ;
}

#----------------------------------------------------*

list @midrange_partList {
  @midrange_conditionExpression mCondition ;
  @midrange_instructionList mInstructionList ;
  @location mEndOfPartLocation ;
}

#----------------------------------------------------*

class @midrange_instruction_do_while extends @midrange_instruction {
  @midrange_instructionList mRepeatedInstructionList ;
  @location mEndOfRepeatedInstructionList ;
  @midrange_partList mWhilePartList ;
}

#----------------------------------------------------*

list @midrange_interruptDefinitionList {
  @location mInterruptLocation ;
  @midrange_instructionList mInstructionList ;
  @lstring mFirstSaveRegister ;
  @lstring mSecondSaveRegister ;
  @location mEndOfInterruptLocation ;
}

#----------------------------------------------------*

list @midrange_routineDefinitionList {
  @lstring mRoutineName ;
  @luint mPage ;
  @luint mRequiredBank ;
  @luint mReturnedBank ;
  @bool mPreservesBank ;
  @bool mIsNoReturn ;
  @midrange_instructionList mInstructionList ;
  @location mEndOfRoutineLocation ;
}

#----------------------------------------------------*

struct @midrange_model {
  @lstring mProgramName ;
  @lstring mDeviceName ;
  @configDefinitionList mConfigDefinitionList ;
  @ramDefinitionList mRamDefinitionList ;
  @midrange_interruptDefinitionList mInterruptDefinitionList ;
  @constantDefinitionList mConstantDefinitionList ;
  @midrange_routineDefinitionList mRoutineDefinitionList ;
  @bool mNeedsComputedGoto2 ;
  @bool mNeedsComputedGoto4 ;
  @location mEndOfProgram ;
}

#----------------------------------------------------*

end semantics ;
