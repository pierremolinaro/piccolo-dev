syntax pic18_bootloader_syntax ("piccolo_lexique.gLexique") :
import "pic18_metamodel.gSemantics" ;
import "pic18_bootloader_specification_semantics.gSemantics" ;
import "piccolo_options.gOption" ;

#----------------------------------------------------*

nonterminal <ram_definition>
  ?!@ramDefinitionList ioRamDefinitionList
;

nonterminal <start_symbol>
label importBootloaderSpecification
  !@piccoloDeviceModel outPiccoloDeviceModel
  !@string outDeviceName
  !@uint outAccessBankSplitOffset
  !@ramBankTable outRamBank
  !@registerTable outRegisterTable
  !@bootloaderReservedRAMmap outBootloaderReservedRAMmap
  !@routineDeclarationList outBootloaderRoutineDeclarationList
  !@routineDeclarationList outUserRoutineDeclarationList
  !@luint outBootloaderReservedROMsize
;

nonterminal <routine_declaration> ?!@routineDeclarationList ioRoutineDefinitionList ;

#----------------------------------------------------*

rule <parse_bootloader>
  !@lstring outBootloaderName
  !@lstring outDeviceName
  !@routineDeclarationList outBootloaderRoutineDeclarationList
  !@bootloaderReservedRAMmap outBootloaderReservedRAMmap
  !@luint outReservedRomSize
  !@routineDeclarationList outUserRoutineDeclarationList
  !@ramDefinitionList outSharedRamDefinitionList
  !@string outListFileContents
  !@piccoloDeviceModel outPiccoloDeviceModel
  !@uint outAccessBankSplitOffset
  !@ramBankTable outRamBank
  !@registerTable outRegisterTable
:
  $pic18$ ;
  $bootloader$ ;
  $identifier$ ? outBootloaderName ;
  $literal_string$ ? outDeviceName ;
#--- First part
  ${$ ;
  outBootloaderRoutineDeclarationList := [@routineDeclarationList emptyList] ;
  outBootloaderReservedRAMmap := [@bootloaderReservedRAMmap emptyMap] ;
  outReservedRomSize := [@luint new !0 !here] ;
  repeat
  while
    <routine_declaration> !?outBootloaderRoutineDeclarationList ;
  while
    $rom$ ;
    $=$ ;
    $integer$ ? @luint rs ;
    if [outReservedRomSize uint] != 0 then
      error rs : "ROM size already defined" ;
    elsif [rs uint] == 0 then
      error rs: "ROM size should be > 0" ;
    elsif ([rs uint] mod 8) != 0 then
      error rs: "ROM size should be a multiple of 8" ;
    else
      outReservedRomSize := rs ;
    end if ;
  while
    $ram$ ;
    $identifier$ ? @lstring bankName ;
    $=$ ;
    $integer$ ? @luint rs ;
    if [outBootloaderReservedRAMmap hasKey ![bankName string]] then
      error rs : "RAM size already defined for '" . bankName . "' bank" ;
    elsif [rs uint] == 0 then
      error rs: "RAM size should be > 0" ;
    else
      [!?outBootloaderReservedRAMmap  insertKey !bankName !rs] ;
    end if ;
  end repeat ;
  $}$ ;
#--- Second part
  ${$ ;
  outUserRoutineDeclarationList := [@routineDeclarationList emptyList] ;
  repeat
  while
    <routine_declaration> !? outUserRoutineDeclarationList ;
  end repeat ;
  $}$ ;
#--- Third part
  outSharedRamDefinitionList := [@ramDefinitionList emptyList] ;
  ${$ ;
  repeat
  while
    <ram_definition> !?outSharedRamDefinitionList ;
  end repeat ;
  $}$ ;
#--- Semantic analysis
  pic18BootloaderSpecificationAnalysis
    ![@string stringWithSourceFilePath]
    !outBootloaderName
    !outDeviceName
    !outBootloaderRoutineDeclarationList
    !outBootloaderReservedRAMmap
    !outReservedRomSize
    !outUserRoutineDeclarationList
    !outSharedRamDefinitionList
    ?outListFileContents
    ?outPiccoloDeviceModel
    ?outAccessBankSplitOffset
    ?outRamBank
    ?outRegisterTable
  ;
end rule ;

#----------------------------------------------------*

rule <start_symbol> :
  @lstring bootloaderName ;
  @lstring deviceName ;
  @routineDeclarationList bootloaderRoutineDeclarationList ;
  @bootloaderReservedRAMmap bootloaderReservedRAMmap ;
  @luint reservedRomSize ;
  @routineDeclarationList userRoutineDeclarationList ;
  @ramDefinitionList sharedRamDefinitionList ;
  @string listFileContents ;
  @piccoloDeviceModel piccoloDeviceModel ;
  @uint accessBankSplitOffset ;
  @ramBankTable ramBank ;
  @registerTable registerTable ;
  <parse_bootloader>
    ?bootloaderName
    ?deviceName
    ?bootloaderRoutineDeclarationList
    ?bootloaderReservedRAMmap
    ?reservedRomSize
    ?userRoutineDeclarationList
    ?sharedRamDefinitionList
    ?listFileContents
    ?piccoloDeviceModel
    ?accessBankSplitOffset
    ?ramBank
    ?registerTable
  ;
#--- Semantic analysis
  @string listingFile := [[@string stringWithSourceFilePath] stringByDeletingPathExtension] . ".list" ;
  if ([@uint errorCount] == 0) & [option piccolo_options.ouputListingFile value] then
    [listFileContents writeToFileWhenDifferentContents !listingFile ?*] ;
  end if ;
  if [@uint errorCount] > 0 then
    [@string deleteFileIfExists !listingFile] ;
  end if ;
label importBootloaderSpecification
  !@piccoloDeviceModel outPiccoloDeviceModel
  !@string outDeviceName
  !@uint outAccessBankSplitOffset
  !@ramBankTable outRamBank
  !@registerTable outRegisterTable
  !@bootloaderReservedRAMmap outBootloaderReservedRAMmap
  !@routineDeclarationList outBootloaderRoutineDeclarationList
  !@routineDeclarationList outUserRoutineDeclarationList
  !@luint outBootloaderReservedROMsize
:
  @lstring bootloaderName ;
  @ramDefinitionList sharedRamDefinitionList ;
  @string listFileContents ;
  <parse_bootloader>
    ?bootloaderName
    ?@lstring deviceName
    ?outBootloaderRoutineDeclarationList
    ?outBootloaderReservedRAMmap
    ?outBootloaderReservedROMsize
    ?outUserRoutineDeclarationList
    ?sharedRamDefinitionList
    ?listFileContents
    ?outPiccoloDeviceModel
    ?outAccessBankSplitOffset
    ?outRamBank
    ?outRegisterTable
  ;
  outDeviceName := deviceName->string ;
end rule ;

#----------------------------------------------------*

rule <routine_declaration>
  ?!@routineDeclarationList ioRoutineDefinitionList
:
  @bool noreturn ;
  select
    noreturn := false ;
  or
    $noreturn$ ;
    noreturn := true ;
  end select ;
  $routine$ ;
  $identifier$ ? @lstring routineName ;
  @luint requiredBank ;
  @luint returnedBank ;
  @bool preservesBank ;
  select
    requiredBank := [@luint new ![@uint max] !here] ;
    returnedBank := [@luint new ![@uint max] !here] ;
    preservesBank := false ;
  or
    $bank$ ;
    $:$ ;
    select
      $preserved$ ;
      if noreturn then
        error here: "a \"noreturn\" routine cannot accept \"bank:preserved\" setting" ;
      end if ;
      preservesBank := true ;
      requiredBank := [@luint new ![@uint max] !here] ;
      returnedBank := [@luint new ![@uint max] !here] ;
    or
      $requires$ ;
      $integer$ ? requiredBank ;
      preservesBank := false ;
      select
        returnedBank := [@luint new ![@uint max] !here] ;
      or
        $ensures$ ;
        $integer$ ? returnedBank ;
        if noreturn then
          error here: "a \"noreturn\" routine cannot accept \"bank:returned\" setting" ;
        end if ;
      end select ;
    or
      $ensures$ ;
      $integer$ ? returnedBank ;
      if noreturn then
        error here: "a \"noreturn\" routine cannot accept \"bank:returned\" setting" ;
      end if ;
      preservesBank := false ;
      requiredBank := [@luint new ![@uint max] !here] ;
    end select ;
  end select ;
#---
  ioRoutineDefinitionList += !routineName !requiredBank !returnedBank !preservesBank !noreturn ;
end rule ;

#----------------------------------------------------*

end syntax ;
