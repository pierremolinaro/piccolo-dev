semantics pic18_intermediate_classes_instruction_length :
import "pic18_intermediate_classes.gSemantics" ;

#----------------------------------------------------------------------------*

abstract reader @pic18_intermediate_instruction instructionLength -> @uint outLength ;

#----------------------------------------------------------------------------*

override reader @pic18_intermediate_NULL instructionLength -> @uint outLength :
  outLength := 0 ;
end reader ;

#----------------------------------------------------------------------------*

override reader @pic18_intermediate_pseudo_ORG instructionLength -> @uint outLength :
  outLength := 0 ;
end reader ;

#----------------------------------------------------------------------------*

override reader @pic18_intermediate_pseudo_LABEL instructionLength -> @uint outLength :
  outLength := 0 ;
end reader ;

#----------------------------------------------------------------------------*

override reader @pic18_intermediate_word instructionLength -> @uint outLength :
  outLength := 2 ;
end reader ;

#----------------------------------------------------------------------------*

override reader @pic18_intermediate_actualInstruction instructionLength -> @uint outLength :
  outLength := 2 ;
end reader ;

#----------------------------------------------------------------------------*

override
reader @pic18_intermediate_instruction_MOVFF instructionLength -> @uint outLength :
  outLength := 4 ;
end reader ;

#----------------------------------------------------------------------------*

override
reader @pic18_intermediate_instruction_conditionalBranch instructionLength -> @uint outLength :
  switch mBranchMode
    when native     : outLength := 2 ;
    when ipicNative : outLength := 2 ;
    when ipicBRA    : outLength := 4 ;
    when ipicGOTO   : outLength := 6 ;
  end switch ;
end reader ;

#----------------------------------------------------------------------------*

  override
  reader @pic18_intermediate_JUMP instructionLength -> @uint outLength :
    switch mKind
      when ipicRelative : outLength := 2 ;
      when relative     : outLength := 2 ;
      when absolute     : outLength := 4 ;
    end switch ;
  end reader ;

#----------------------------------------------------------------------------*

override
reader @pic18_intermediate_JSR instructionLength ->@uint outLength :
  switch mKind
    when ipicRelative : outLength := 2 ;
    when relative     : outLength := 2 ;
    when absolute     : outLength := 4 ;
  end switch ;
end reader ;

#----------------------------------------------------------------------------*

override
reader @pic18_intermediate_instruction_LFSR instructionLength -> @uint outLength :
  outLength := 4 ;
end reader ;

#----------------------------------------------------------------------------*

override
reader @pic18_intermediate_instruction_MNOP instructionLength -> @uint outLength :
  outLength := [mOccurrenceFactor uint] * 2 ;
end reader ;

#----------------------------------------------------------------------------*

override
reader @pic18_intermediate_instruction_computed_retlw instructionLength ->@uint outLength :
  outLength := [mLiteralValues length] * 2 + 2 ;
  if not mUsesRCALL then
    outLength := outLength + 2 ;
  end if ;
end reader ;

#----------------------------------------------------------------------------*

override
reader @pic18_intermediate_instruction_computed_bra instructionLength -> @uint outLength :
  outLength := [mTargetLabels length] * 2 + 2 ;
  if not mUsesRCALL then
    outLength := outLength + 2 ;
  end if ;
end reader ;

#----------------------------------------------------------------------------*

override
reader @pic18_intermediate_instruction_computed_goto instructionLength -> @uint outLength :
  outLength := [mTargetLabels length] * 4 + 2 ;
  if not mUsesRCALL then
    outLength := outLength + 2 ;
  end if ;
end reader ;

#----------------------------------------------------------------------------*

override
reader @pic18_intermediate_instruction_computed_rcall instructionLength -> @uint outLength :
  outLength := [mTargetLabels length] * 4 ;
  if not mUsesRCALL then
    outLength := outLength + 2 ;
  end if ;
end reader ;

#----------------------------------------------------------------------------*

#override
#reader @pic18_intermediate_jump_test_register instructionLength -> @uint outLength :
#  outLength := 2 ; # TSTFSZ
#  if mBranchIfZero then
#    outLength := outLength + 2 ; # Intermediate BRA
#  end if ;
#  if mUsesBra then
#    outLength := outLength + 2 ; # Final BRA
#  else
#    outLength := outLength + 4 ; # Final GOTO
#  end if ;
#end reader ;

#----------------------------------------------------------------------------*

override
reader @pic18_intermediate_incDecRegisterInCondition instructionLength -> @uint outLength :
  if mUsesBra then
    outLength := 4 ;
  else
    outLength := 6 ;
  end if ; 
end reader ;

#----------------------------------------------------------------------------*

override
reader @pic18_intermediate_registerComparisonCondition instructionLength -> @uint outLength :
  @bool usesIntermediateBRA ; [selfcopy usesIntermediateBRA ?usesIntermediateBRA] ;
  if usesIntermediateBRA then
    outLength := 4 ;
  else
    outLength := 2 ;
  end if ; 
 if mUsesBra then
    outLength := outLength + 2 ; # Final BRA
  else
    outLength := outLength + 4 ; # Final GOTO
  end if ;
end reader ;

#----------------------------------------------------------------------------*

end semantics ;
