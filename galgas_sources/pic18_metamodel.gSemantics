semantics pic18_metamodel :
import "generic_metamodel.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#    B O O T L O A D E R   R E S E R V E D   R A M    M A P                 *
#                                                                           *
#---------------------------------------------------------------------------*

map @bootloaderReservedRAMmap {
  @luint mReservedSize ;
  insert insertKey error message "the reserved size for the '%K' bank is already declared" ;
  search searchKey error message "the reserved size for the '%K' bank is not declared" ;
}

#----------------------------------------------------*

abstract class @pic18PiccoloInstruction {
  @location mInstructionLocation ;
}

#----------------------------------------------------*

list @instructionList {
  @pic18PiccoloInstruction mInstruction ;
}

#----------------------------------------------------*

class @instruction_nobanksel extends @pic18PiccoloInstruction {
}

#----------------------------------------------------*

abstract class @pic18PiccoloSimpleInstruction extends @pic18PiccoloInstruction {
}

#----------------------------------------------------*

class @instruction_banksel extends @pic18PiccoloInstruction {
  @luint mBankIndex ;
  @bool mWarningOnUselessBanksel ;
}
#----------------------------------------------------*

class @instruction_banksel_register extends @pic18PiccoloInstruction {
  @registerExpression mRegisterExpression ;
  @bool mWarningOnUselessBanksel ;
}

#----------------------------------------------------*

class @instruction_savebank extends @pic18PiccoloInstruction {
  @registerExpression mRegister ;
  @instructionList mInstructionList ;
  @location mEndOfSaveBankInstruction ;
}

#----------------------------------------------------*

enum @instruction_FDA_base_code_AST {
  ADDWF, ADDWFC, ANDWF, COMF, DECF, INCF,
  IORWF, MOVF, RLCF, RLNCF, RRCF, RRNCF, SUBFWB, SUBWF, SUBWFB, SWAPF, XORWF
}

#----------------------------------------------------*

class @instruction_FDA extends @pic18PiccoloSimpleInstruction {
  @instruction_FDA_base_code_AST mInstruction_FDA_base_code ;
  @registerExpression mRegisterExpression ;
  @bool m_W_isDestination ;
}

#----------------------------------------------------*

enum @FA_instruction_base_code {
  CLRF, CPFSEQ, CPFSGT, CPFSLT, MOVWF, MULWF, NEGF, SETF, TSTFSZ
}

#----------------------------------------------------*

class @instruction_FA extends @pic18PiccoloSimpleInstruction {
  @FA_instruction_base_code mFAinstruction ;
  @registerExpression mRegisterExpression ;
}

#----------------------------------------------------*

class @instruction_MOVFF extends @pic18PiccoloSimpleInstruction {
  @registerExpression mSourceRegisterName ;
  @registerExpression mDestinationRegisterName ;
}

#----------------------------------------------------*

enum @bit_oriented_op {
  BCF, BSF, BTG
}

#----------------------------------------------------*

class @instruction_FBA extends @pic18PiccoloSimpleInstruction {
  @bit_oriented_op mBitOrientedOp ;
  @registerExpression mRegisterExpression ;
  @bitNumberExpression mBitNumber ;
}

#----------------------------------------------------*

enum @conditional_branch {
  bz, bnz, bn, bnn, bc, bnc, bov, bnov
}

#----------------------------------------------------*

enum @jumpInstructionKind {
  ipicRelative, relative, absolute
}

#----------------------------------------------------*

class @instruction_JSR extends @pic18PiccoloSimpleInstruction {
  @lstring mTargetLabel ;
  @jumpInstructionKind mKind ;
}

#----------------------------------------------------*

class @instruction_JUMP extends @pic18PiccoloInstruction {
  @lstring mTargetLabel ;
  @jumpInstructionKind mKind ;
}

#----------------------------------------------------*

class @instruction_JUMPCC extends @pic18PiccoloInstruction {
  @lstring mTargetLabel ;
  @conditional_branch mConditionalBranch ;
  @bool mIsBcc ;
}

#----------------------------------------------------*

enum @pic18InstructionWithNoOperandKind {
  CLRWDT,
  DAW,
  NOP,
  POP,
  PUSH,
  RESET,
  SLEEP
}

#----------------------------------------------------*

class @instruction_withNoOperand extends @pic18PiccoloSimpleInstruction {
  @pic18InstructionWithNoOperandKind mKind ;
}

#----------------------------------------------------*

enum @literal_instruction_opcode {
  ADDLW, ANDLW, IORLW, MOVLW, MULLW, SUBLW, XORLW
}

#----------------------------------------------------*

class @instruction_literalOperation extends @pic18PiccoloSimpleInstruction {
  @literal_instruction_opcode mLiteralInstruction ;
  @immediatExpression mImmediatExpression ;
}

#----------------------------------------------------*

class @instruction_LFSR extends @pic18PiccoloSimpleInstruction {
  @luint mFSRindex ;
  @immediatExpression mImmediatExpression ;
}

#----------------------------------------------------*

class @instruction_LTBLPTR extends @pic18PiccoloInstruction {
  @immediatExpression mImmediatExpression ;
}

#----------------------------------------------------*

class @instruction_LDATAPTR extends @pic18PiccoloInstruction {
  @lstring mDataName ;
  @luint mDataIndex ;
}

#----------------------------------------------------*

enum @tableAccessOption {
  simpleAccess, postIncrement, postDecrement, preIncrement
}

#----------------------------------------------------*

class @instruction_TBLRD extends @pic18PiccoloSimpleInstruction {
  @tableAccessOption mOption ;
}

#----------------------------------------------------*

class @instruction_TBLWT extends @pic18PiccoloSimpleInstruction {
  @tableAccessOption mOption ;
}

#----------------------------------------------------*

class @instruction_MNOP extends @pic18PiccoloInstruction {
  @luint mOccurrenceFactor ;
}

#----------------------------------------------------*

class @instruction_FOREVER extends @pic18PiccoloInstruction {
  @instructionList mInstructionList ;
  @location mEndOfInstructionList ;
}

#----------------------------------------------------*

enum @if_semi_colon_op {
  CPFSEQ, CPFSGT, CPFSLT, TSTFSZ
}

#----------------------------------------------------*

abstract class @instruction_IF_SEMI_COLON extends @pic18PiccoloInstruction {
  @pic18PiccoloSimpleInstruction mEmbeddedInstruction ;
}

#----------------------------------------------------*

class @instruction_IF_FA_SEMI_COLON extends @instruction_IF_SEMI_COLON {
  @if_semi_colon_op mOpCode ;
  @registerExpression mRegisterExpression ;
}

#----------------------------------------------------*

class @instruction_IF_BitTest extends @instruction_IF_SEMI_COLON {
  @bool mSkipIfSet ;
  @registerExpression mRegisterExpression ;
  @bitNumberExpression mBitNumber ;
}

#----------------------------------------------------*

class @instruction_IF_IncDec extends @instruction_IF_SEMI_COLON {
  @bool mIncrement ;
  @bool mSkipIfZero ;
  @registerExpression mRegisterExpression ;
  @bool m_W_isDestination ;
}

#----------------------------------------------------*

class @instruction_computed_retlw extends @pic18PiccoloInstruction {
  @immediatExpression mSizeExpression ;
  @immediatExpressionList mImmediateExpressionList ;
  @bool mUsesRelativeCall ;
}

#----------------------------------------------------*

class @instruction_computed_bra extends @pic18PiccoloInstruction {
  @immediatExpression mSizeExpression ;
  @lstringlist mTargetLabels ;
  @bool mUsesRelativeCall ;
}

#----------------------------------------------------*

class @instruction_computed_goto extends @pic18PiccoloInstruction {
  @immediatExpression mSizeExpression ;
  @lstringlist mTargetLabels ;
  @bool mUsesRelativeCall ;
}

#----------------------------------------------------*

class @instruction_computed_rcall extends @pic18PiccoloInstruction {
  @immediatExpression mSizeExpression ;
  @lstringlist mTargetLabels ;
  @bool mUsesRelativeCall ;
}

#----------------------------------------------------*

abstract class @conditionExpression {
}

#----------------------------------------------------*

class @registerTestCondition extends @conditionExpression {
  @registerExpression mRegisterExpression ;
  @bool mBranchIfZero ;
}

#----------------------------------------------------*

enum @pic18RegisterComparison {
  notEqual, equal, greaterOrEqual, greater, lowerOrEqual, lower
}

#----------------------------------------------------*

class @registerComparisonCondition extends @conditionExpression {
  @registerExpression mRegisterExpression ;
  @pic18RegisterComparison mComparison ;
}

#----------------------------------------------------*

class @incDecRegisterInCondition extends @conditionExpression {
  @registerExpression mRegisterExpression ;
  @bool mIncrement ;
  @bool m_W_isDestination ;
  @bool mBranchIfZero ;
}

#----------------------------------------------------*

class @bcc_in_structured_if_condition extends @conditionExpression {
  @location mConditionLocation ;
  @conditional_branch mCondition ;
}

#----------------------------------------------------*

class @negateCondition extends @conditionExpression {
  @conditionExpression mCondition ;
}

#----------------------------------------------------*

class @andCondition extends @conditionExpression {
  @conditionExpression mLeftExpression ;
  @conditionExpression mRightExpression ;
}

#----------------------------------------------------*

class @bitTest_in_structured_if_condition extends @conditionExpression {
  @registerExpression mRegisterExpression ;
  @bitNumberExpression mBitNumber ;
  @bool mBTFSSinstruction ;
}

#----------------------------------------------------*

class @instruction_structured_if extends @pic18PiccoloInstruction {
  @conditionExpression mIfCondition ;
  @instructionList mThenInstructionList ;
  @instructionList mElseInstructionList ;
  @location mEndOfElsePartLocation ;
}

#----------------------------------------------------*

list @partList {
  @conditionExpression mCondition ;
  @instructionList mInstructionList ;
  @location mEndOfPartLocation ;
}

#----------------------------------------------------*

class @instruction_do_while extends @pic18PiccoloInstruction {
  @instructionList mRepeatedInstructionList ;
  @location mEndOfRepeatedInstructionList ;
  @partList mWhilePartList ;
}

#----------------------------------------------------*

list @interruptDefinitionList {
  @lstring mInterruptName ;
  @bool mFastReturn ;
  @instructionList mInstructionList ;
  @location mEndOfInterruptLocation ;
}

#----------------------------------------------------*

list @routineDefinitionList {
  @lstring mRoutineName ;
  @luint mRequiredBank ;
  @luint mReturnedBank ;
  @bool mPreservesBank ;
  @bool mIsNoReturn ;
  @instructionList mInstructionList ;
  @location mEndOfRoutineLocation ;
}

#----------------------------------------------------*

list @routineDeclarationList {
  @lstring mRoutineName ;
  @luint mRequiredBank ;
  @luint mReturnedBank ;
  @bool mPreservesBank ;
  @bool mIsNoReturn ;
}

#----------------------------------------------------*

enum @programKind {
  regularProgram, bootloaderProgram, userProgram
}

#----------------------------------------------------*

list @dataList {
  @lstring mDataName ;
  @immediatExpressionList mValueList ;
}

#----------------------------------------------------*

list @checkpicList {
  @location mErrorLocation ;
  @lstringlist mValueList ;
}

#----------------------------------------------------------------------------*

map @dataMap {
  @uint mDataSize ;
  insert insertKey error message "the '%K' data is already declared" ;
  search searchKey error message "the '%K' data is not declared" ;
}

#----------------------------------------------------*

struct @piccoloModel {
  @lstring mProgramName ;
  @programKind mProgramKind ;
  @lstring mDeviceNameOrBootLoaderReference ;
  @configDefinitionList mConfigDefinitionList ;
  @ramDefinitionList mRamDefinitionList ;
  @lstringlist mUnusedRegisterList ;
  @checkpicList mCheckpicList ;
  @dataList mDataList ;
  @interruptDefinitionList mInterruptDefinitionList ;
  @constantDefinitionList mConstantDefinitionList ;
  @routineDefinitionList mRoutineDefinitionList ;
  @bool mNeedsComputedGoto2 ;
  @bool mNeedsComputedGoto4 ;
  @location mEndOfProgram ;
}

#----------------------------------------------------*

end semantics ;
