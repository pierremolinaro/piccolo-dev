semantics pic18_metamodel :
import "generic_metamodel.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#    B O O T L O A D E R   R E S E R V E D   R A M    M A P                 *
#                                                                           *
#---------------------------------------------------------------------------*

map @bootloaderReservedRAMmap {
  @luint mReservedSize ;
  insert insertKey error message "the reserved size for the '%K' bank is already declared" ;
  search searchKey error message "the reserved size for the '%K' bank is not declared" ;
}

#----------------------------------------------------*

abstract class @pic18PiccoloInstruction {
  @location mInstructionLocation ;
}

#----------------------------------------------------*

list @pic18InstructionList {
  @pic18PiccoloInstruction mInstruction ;
}

#----------------------------------------------------*

class @pic18Instruction_nobanksel extends @pic18PiccoloInstruction {
}

#----------------------------------------------------*

class @pic18Instruction_checknobank extends @pic18PiccoloInstruction {
}

#----------------------------------------------------*

class @pic18Instruction_checkbank extends @pic18PiccoloInstruction {
  @uint mBankIndex ;
}

#----------------------------------------------------*

abstract class @pic18PiccoloSimpleInstruction extends @pic18PiccoloInstruction {
}

#----------------------------------------------------*

class @pic18Instruction_banksel extends @pic18PiccoloInstruction {
  @luint mBankIndex ;
  @bool mWarningOnUselessBanksel ;
}

#----------------------------------------------------*

class @pic18Instruction_banksel_register extends @pic18PiccoloInstruction {
  @registerExpression mRegisterExpression ;
  @bool mWarningOnUselessBanksel ;
}

#----------------------------------------------------*

class @pic18Instruction_savebank extends @pic18PiccoloInstruction {
  @registerExpression mRegister ;
  @pic18InstructionList mInstructionList ;
  @location mEndOfSaveBankInstruction ;
}

#----------------------------------------------------*

class @pic18Instruction_repetitionStatique extends @pic18PiccoloInstruction {
  @immediatExpression mRepeatExpression ;
  @pic18InstructionList mInstructionList ;
  @location mEndOfInstruction ;
}

#----------------------------------------------------*

#!--- Block Instruction

#----------------------------------------------------*

abstract class @abstractBlockTerminationForBlockInstruction {
}

#----------------------------------------------------*

class @exitBlockTerminationForBlockInstruction extends @abstractBlockTerminationForBlockInstruction {
  @location mLocation ;
}

#----------------------------------------------------*

class @gotoTerminationForBlockInstruction extends @abstractBlockTerminationForBlockInstruction {
  @lstring mNextBlock ;
}

#----------------------------------------------------*

class @testTerminationForBlockInstruction extends @abstractBlockTerminationForBlockInstruction {
  @pic18ConditionExpression mCondition ;
  @abstractBlockTerminationForBlockInstruction mTrueTermination ;
  @abstractBlockTerminationForBlockInstruction mFalseTermination ;
  @location mLocation ;
}

#----------------------------------------------------*

list @pic18BlockInstructionBlockList {
  @lstring mBlockName ;
  @pic18InstructionList mInstructionList ;
  @abstractBlockTerminationForBlockInstruction mBlockTerminaisonForBlockInstruction ;
  @location mEndOfBlock ;
}

#----------------------------------------------------*

class @pic18Instruction_block extends @pic18PiccoloInstruction {
  @lstring mStartBlockName ;
  @pic18BlockInstructionBlockList mBlockList ;
  @location mEndOfInstruction ;
}

#----------------------------------------------------*

#!--- Switch instruction

#----------------------------------------------------*

abstract class @pic18AbstractCaseItem {
}

#----------------------------------------------------*

class @pic18SimpleConstantCaseItem extends @pic18AbstractCaseItem {
  @immediatExpression mCaseExpression ;
  @location mCaseExpressionLocation ;
}

#----------------------------------------------------*

class @pic18IntervalCaseItem extends @pic18AbstractCaseItem {
  @immediatExpression mMinExpression ;
  @immediatExpression mMaxExpression ;
  @location mCaseExpressionLocation ;
}

#----------------------------------------------------*

list @pic18CaseExpressionList {
  @pic18AbstractCaseItem mCaseItem ;
}

#----------------------------------------------------*

list @pic18SwitchInstructionCaseList {
  @location mStartOfCase ;
  @pic18CaseExpressionList mCaseExpressionList ;
  @pic18InstructionList mInstructionList ;
}

#----------------------------------------------------*

class @pic18Instruction_switch extends @pic18PiccoloInstruction {
  @pic18SwitchInstructionCaseList mCaseList ;
  @location mElseBranchStartLocation ;
  @pic18InstructionList mElseInstructionList ;
}

#----------------------------------------------------*

enum @pic18Instruction_FDA_base_code_AST {
  ADDWF, ADDWFC, ANDWF, COMF, DECF, INCF,
  IORWF, MOVF, RLCF, RLNCF, RRCF, RRNCF, SUBFWB, SUBWF, SUBWFB, SWAPF, XORWF
}

#----------------------------------------------------*

class @pic18Instruction_FDA extends @pic18PiccoloSimpleInstruction {
  @pic18Instruction_FDA_base_code_AST mInstruction_FDA_base_code ;
  @registerExpression mRegisterExpression ;
  @bool m_W_isDestination ;
}

#----------------------------------------------------*

enum @FA_instruction_base_code {
  CLRF, CPFSEQ, CPFSGT, CPFSLT, MOVWF, MULWF, NEGF, SETF, TSTFSZ
}

#----------------------------------------------------*

class @pic18Instruction_FA extends @pic18PiccoloSimpleInstruction {
  @FA_instruction_base_code mFAinstruction ;
  @registerExpression mRegisterExpression ;
}

#----------------------------------------------------*

class @pic18Instruction_MOVFF extends @pic18PiccoloSimpleInstruction {
  @registerExpression mSourceRegisterName ;
  @registerExpression mDestinationRegisterName ;
}

#----------------------------------------------------*

enum @bit_oriented_op {
  BCF, BSF, BTG
}

#----------------------------------------------------*

class @pic18Instruction_FBA extends @pic18PiccoloSimpleInstruction {
  @bit_oriented_op mBitOrientedOp ;
  @registerExpression mRegisterExpression ;
  @bitNumberExpression mBitNumber ;
}

#----------------------------------------------------*

enum @conditional_branch {
  bz, bnz, bn, bnn, bc, bnc, bov, bnov
}

#----------------------------------------------------*

enum @jumpInstructionKind {
  ipicRelative, relative, absolute
}

#----------------------------------------------------*

class @pic18Instruction_JSR extends @pic18PiccoloSimpleInstruction {
  @lstring mTargetLabel ;
  @jumpInstructionKind mKind ;
}

#----------------------------------------------------*

class @pic18Instruction_JUMP extends @pic18PiccoloInstruction {
  @lstring mTargetLabel ;
  @jumpInstructionKind mKind ;
}

#----------------------------------------------------*

class @pic18Instruction_JUMPCC extends @pic18PiccoloInstruction {
  @lstring mTargetLabel ;
  @conditional_branch mConditionalBranch ;
  @bool mIsBcc ;
}

#----------------------------------------------------*

enum @pic18InstructionWithNoOperandKind {
  CLRWDT,
  DAW,
  NOP,
  POP,
  PUSH,
  RESET,
  SLEEP
}

#----------------------------------------------------*

class @pic18Instruction_withNoOperand extends @pic18PiccoloSimpleInstruction {
  @pic18InstructionWithNoOperandKind mKind ;
}

#----------------------------------------------------*

enum @literal_instruction_opcode {
  ADDLW, ANDLW, IORLW, MOVLW, MULLW, SUBLW, XORLW
}

#----------------------------------------------------*

class @pic18Instruction_literalOperation extends @pic18PiccoloSimpleInstruction {
  @literal_instruction_opcode mLiteralInstruction ;
  @immediatExpression mImmediatExpression ;
}

#----------------------------------------------------*

class @pic18Instruction_fnop extends @pic18PiccoloSimpleInstruction {
  @immediatExpression mImmediatExpression ;
}

#----------------------------------------------------*

class @pic18Instruction_LFSR extends @pic18PiccoloSimpleInstruction {
  @luint mFSRindex ;
  @immediatExpression mImmediatExpression ;
}

#----------------------------------------------------*

class @pic18Instruction_LTBLPTR extends @pic18PiccoloInstruction {
  @immediatExpression mImmediatExpression ;
}

#----------------------------------------------------*

class @pic18Instruction_LDATAPTR extends @pic18PiccoloInstruction {
  @lstring mDataName ;
  @luint mDataIndex ;
}

#----------------------------------------------------*

enum @tableAccessOption {
  simpleAccess, postIncrement, postDecrement, preIncrement
}

#----------------------------------------------------*

class @pic18Instruction_TBLRD extends @pic18PiccoloSimpleInstruction {
  @tableAccessOption mOption ;
}

#----------------------------------------------------*

class @pic18Instruction_TBLWT extends @pic18PiccoloSimpleInstruction {
  @tableAccessOption mOption ;
}

#----------------------------------------------------*

class @pic18Instruction_MNOP extends @pic18PiccoloInstruction {
  @luint mOccurrenceFactor ;
}

#----------------------------------------------------*

class @pic18Instruction_FOREVER extends @pic18PiccoloInstruction {
  @pic18InstructionList mInstructionList ;
  @location mEndOfInstructionList ;
}

#----------------------------------------------------*

enum @if_semi_colon_op {
  CPFSEQ, CPFSGT, CPFSLT, TSTFSZ
}

#----------------------------------------------------*

abstract class @pic18Instruction_IF_SEMI_COLON extends @pic18PiccoloInstruction {
  @pic18PiccoloSimpleInstruction mEmbeddedInstruction ;
}

#----------------------------------------------------*

class @pic18Instruction_IF_FA_SEMI_COLON extends @pic18Instruction_IF_SEMI_COLON {
  @if_semi_colon_op mOpCode ;
  @registerExpression mRegisterExpression ;
}

#----------------------------------------------------*

class @pic18Instruction_IF_BitTest extends @pic18Instruction_IF_SEMI_COLON {
  @bool mSkipIfSet ;
  @registerExpression mRegisterExpression ;
  @bitNumberExpression mBitNumber ;
}

#----------------------------------------------------*

class @pic18Instruction_IF_IncDec extends @pic18Instruction_IF_SEMI_COLON {
  @bool mIncrement ;
  @bool mSkipIfZero ;
  @registerExpression mRegisterExpression ;
  @bool m_W_isDestination ;
}

#----------------------------------------------------*

class @pic18Instruction_computed_retlw extends @pic18PiccoloInstruction {
  @immediatExpression mSizeExpression ;
  @immediatExpressionList mImmediateExpressionList ;
  @bool mUsesRelativeCall ;
}

#----------------------------------------------------*

class @pic18Instruction_computed_bra extends @pic18PiccoloInstruction {
  @immediatExpression mSizeExpression ;
  @lstringlist mTargetLabels ;
  @bool mUsesRelativeCall ;
}

#----------------------------------------------------*

class @pic18Instruction_computed_goto extends @pic18PiccoloInstruction {
  @immediatExpression mSizeExpression ;
  @lstringlist mTargetLabels ;
  @bool mUsesRelativeCall ;
}

#----------------------------------------------------*

class @pic18Instruction_computed_rcall extends @pic18PiccoloInstruction {
  @immediatExpression mSizeExpression ;
  @lstringlist mTargetLabels ;
  @bool mUsesRelativeCall ;
}

#----------------------------------------------------*

abstract class @pic18ConditionExpression {
}

#----------------------------------------------------*

class @pic18RegisterTestCondition extends @pic18ConditionExpression {
  @registerExpression mRegisterExpression ;
  @bool mBranchIfZero ;
}

#----------------------------------------------------*

enum @pic18RegisterComparison {
  notEqual, equal, greaterOrEqual, greater, lowerOrEqual, lower
}

#----------------------------------------------------*

class @pic18RegisterComparisonCondition extends @pic18ConditionExpression {
  @registerExpression mRegisterExpression ;
  @pic18RegisterComparison mComparison ;
}

#----------------------------------------------------*

class @pic18IncDecRegisterInCondition extends @pic18ConditionExpression {
  @registerExpression mRegisterExpression ;
  @bool mIncrement ;
  @bool m_W_isDestination ;
  @bool mBranchIfZero ;
}

#----------------------------------------------------*

class @pic18BccInStructuredCondition extends @pic18ConditionExpression {
  @location mConditionLocation ;
  @conditional_branch mCondition ;
}

#----------------------------------------------------*

class @pic18NegateCondition extends @pic18ConditionExpression {
  @pic18ConditionExpression mCondition ;
}

#----------------------------------------------------*

class @pic18AndCondition extends @pic18ConditionExpression {
  @pic18ConditionExpression mLeftExpression ;
  @pic18ConditionExpression mRightExpression ;
}

#----------------------------------------------------*

class @pic18BitTestInStructuredCondition extends @pic18ConditionExpression {
  @registerExpression mRegisterExpression ;
  @bitNumberExpression mBitNumber ;
  @bool mBTFSSinstruction ;
}

#----------------------------------------------------*

class @pic18Instruction_structured_if extends @pic18PiccoloInstruction {
  @pic18ConditionExpression mIfCondition ;
  @pic18InstructionList mThenInstructionList ;
  @pic18InstructionList mElseInstructionList ;
  @location mEndOfElsePartLocation ;
}

#----------------------------------------------------*

list @pic18DoWhilePartList {
  @pic18ConditionExpression mCondition ;
  @pic18InstructionList mInstructionList ;
  @location mEndOfPartLocation ;
}

#----------------------------------------------------*

class @pic18Instruction_do_while extends @pic18PiccoloInstruction {
  @pic18InstructionList mRepeatedInstructionList ;
  @location mEndOfRepeatedInstructionList ;
  @pic18DoWhilePartList mWhilePartList ;
}

#----------------------------------------------------*

list @pic18InterruptDefinitionList {
  @lstring mInterruptName ;
  @bool mFastReturn ;
  @pic18InstructionList mInstructionList ;
  @location mEndOfInterruptLocation ;
}

#----------------------------------------------------*

list @pic18RoutineDefinitionList {
  @lstring mRoutineName ;
  @luint mRequiredBank ;
  @luint mReturnedBank ;
  @bool mPreservesBank ;
  @bool mIsNoReturn ;
  @pic18InstructionList mInstructionList ;
  @location mEndOfRoutineLocation ;
}

#----------------------------------------------------*

list @routineDeclarationList {
  @lstring mRoutineName ;
  @luint mRequiredBank ;
  @luint mReturnedBank ;
  @bool mPreservesBank ;
  @bool mIsNoReturn ;
}

#----------------------------------------------------*

enum @programKind {
  regularProgram, bootloaderProgram, userProgram
}

#----------------------------------------------------*

list @dataList {
  @lstring mDataName ;
  @immediatExpressionList mValueList ;
}

#----------------------------------------------------*

list @checkpicList {
  @location mErrorLocation ;
  @lstringlist mValueList ;
}

#----------------------------------------------------------------------------*

map @dataMap {
  @uint mDataSize ;
  insert insertKey error message "the '%K' data is already declared" ;
  search searchKey error message "the '%K' data is not declared" ;
}

#----------------------------------------------------*

struct @pic18AST {
  @lstring mProgramName ;
  @programKind mProgramKind ;
  @lstring mDeviceNameOrBootLoaderReference ;
  @configDefinitionList mConfigDefinitionList ;
  @ramDefinitionList mRamDefinitionList ;
  @lstringlist mUnusedRegisterList ;
  @checkpicList mCheckpicList ;
  @dataList mDataList ;
  @pic18InterruptDefinitionList mInterruptDefinitionList ;
  @constantDefinitionList mConstantDefinitionList ;
  @pic18RoutineDefinitionList mRoutineDefinitionList ;
  @lstringlist mUnusedRoutineList ;
  @lstringlist mInlinedRoutineList ;
  @bool mNeedsComputedGoto2 ;
  @bool mNeedsComputedGoto4 ;
  @location mEndOfProgram ;
}

#----------------------------------------------------*

end semantics ;
