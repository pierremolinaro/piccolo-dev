semantics pic18_optimize_block :
import "ipic18_block_representation.gSemantics" ;
import "pic18_mnemonics.gSemantics" ;

#----------------------------------------------------------------------------*

#!--- Terminator display

#----------------------------------------------------------------------------*

abstract method @ipic18AbstractBlockTerminator display
  ?!@string ioListFileContents
;

#----------------------------------------------------------------------------*

override method @ipic18ReturnTerminator display
  ?!@string ioListFileContents
:
  ioListFileContents .= "RETURN" ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18RetlwTerminator display
  ?!@string ioListFileContents
:
  ioListFileContents .= "RETLW " . [mLiteralValue hexString] ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18RetfieTerminator display
  ?!@string ioListFileContents
:
  ioListFileContents .= "RETFIE" ;
  if mFastReturn then
    ioListFileContents .= " FAST" ;
  end if ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18JumpTerminator display
  ?!@string ioListFileContents
:
  ioListFileContents .= "JUMP " . mLabel ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18ComputedGotoTerminator display ?!@string ioListFileContents :
  ioListFileContents .= "COMPUTED GOTO " ;
  if mUsesRCALL then
    ioListFileContents .= " (uses RCALL)" ;
  else
    ioListFileContents .= " (uses CALL)" ;
  end if ;
  foreach mTargetLabels do
    ioListFileContents .= "\n    " . mValue ;
  end foreach ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18ComputedRETLWTerminator display ?!@string ioListFileContents :
  ioListFileContents .= "COMPUTED RETLW " ;
  if mUsesRCALL then
    ioListFileContents .= " (uses RCALL)" ;
  else
    ioListFileContents .= " (uses CALL)" ;
  end if ;
  foreach mLiteralValues do
    ioListFileContents .= "\n    " . [mValue hexString] ;
  end foreach ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18ConditionalJumpTerminator display ?!@string ioListFileContents :
  ioListFileContents .= [mConditionalBranch condition] ;
  ioListFileContents .= " ? " ;
  [mInstructionIfConditionTrue display !?ioListFileContents] ;
  ioListFileContents .= " : " ;
  [mInstructionIfConditionFalse display !?ioListFileContents] ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18ComputedBraTerminator display ?!@string ioListFileContents :
  ioListFileContents .= "COMPUTED BRA " ;
  if mUsesRCALL then
    ioListFileContents .= " (uses RCALL)" ;
  else
    ioListFileContents .= " (uses CALL)" ;
  end if ;
  foreach mTargetLabels do
    ioListFileContents .= "\n    " . mValue ;
  end foreach ;
end method ;

#----------------------------------------------------------------------------*

override method @pic18BraCCTerminator display ?!@string ioListFileContents :
  ioListFileContents .= [mConditionalBranch condition] . " ? " ;
  [mInstructionIfConditionTrue display !?ioListFileContents] ;
  ioListFileContents .= " : " ;
  [mInstructionIfConditionFalse display !?ioListFileContents] ;
end method ;

#----------------------------------------------------------------------------*

override method @pic18RegisterComparisonTerminator display ?!@string ioListFileContents :
  ioListFileContents .= [mRegisterDescription mAssemblyString] . " " . [mComparison mnemonic] . " ? " ;
  [mInstructionIfConditionTrue display !?ioListFileContents] ;
  ioListFileContents .= " : " ;
  [mInstructionIfConditionFalse display !?ioListFileContents] ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18IncDecRegisterTerminator display ?!@string ioListFileContents :
  if mIncrement then
    ioListFileContents .= "INCF " ;
  else
    ioListFileContents .= "DECF " ;
  end if ;
  ioListFileContents .= [mRegisterDescription mAssemblyString] ;
  if m_W_isDestination then
    ioListFileContents .= ", W" ;
  end if ;
  ioListFileContents .= " Z ? " ;
  [mInstructionIfConditionTrue display !?ioListFileContents] ;
  ioListFileContents .= " : " ;
  [mInstructionIfConditionFalse display !?ioListFileContents] ;
end method ;

#----------------------------------------------------------------------------*

override method @pic18TestRegisterTerminator display ?!@string ioListFileContents :
  ioListFileContents .= [mRegisterDescription mAssemblyString] ;
  ioListFileContents .= " Z ? " ;
  [mInstructionIfConditionTrue display !?ioListFileContents] ;
  ioListFileContents .= " : " ;
  [mInstructionIfConditionFalse display !?ioListFileContents] ;
end method ;

#----------------------------------------------------------------------------*

override method @pic18BitTestTerminator display ?!@string ioListFileContents :
  ioListFileContents .= [mRegisterDescription mAssemblyString] . "." . [mBitNumber string] . " ? " ;
  [mInstructionIfConditionTrue display !?ioListFileContents] ;
  ioListFileContents .= " : " ;
  [mInstructionIfConditionFalse display !?ioListFileContents] ;
end method ;

#----------------------------------------------------------------------------*

#!--- Optimization Map

#----------------------------------------------------------------------------*

map @symbolTableForBlockOptimization {
  @uint mDefinitionBlockIndex ;
  insert insertKey error message "the '%K' label is already declared in %L" ;
  search searchKey error message "the '%K' label is not declared" ;
  remove removeKey error message "the '%K' label is not declared" ;
}

#----------------------------------------------------------------------------*

#!--- Terminator optimizeTerminator

#----------------------------------------------------------------------------*

abstract method @ipic18AbstractBlockTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ??@string unused inBlockLabel
  ?!@bool ioOptimizationDone
  ?!@string ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
;

#----------------------------------------------------------------------------*

override method @ipic18ComputedBraTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization unused inSymbolTable
  ??@ipic18BlockList unused inBlockList
  ??@string unused inBlockLabel
  ?!@bool unused ioOptimizationDone
  ?!@string unused ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  outOptimizedTerminator := selfcopy ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18ComputedGotoTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization unused inSymbolTable
  ??@ipic18BlockList unused inBlockList
  ??@string unused inBlockLabel
  ?!@bool unused ioOptimizationDone
  ?!@string unused ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  outOptimizedTerminator := selfcopy ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18AbstractConditionTerminator optimizeTerminator
   ??@symbolTableForBlockOptimization unused inSymbolTable
  ??@ipic18BlockList unused inBlockList
  ??@string unused inBlockLabel
  ?!@bool unused ioOptimizationDone
  ?!@string unused ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  outOptimizedTerminator := selfcopy ;
end method ;

#----------------------------------------------------------------------------*

method @ipic18AbstractConditionTerminator getOptimizedTerminators
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ??@string inBlockLabel
  ?!@bool ioOptimizationDone
  ?!@string ioListFileContents
  !@ipic18SingleInstructionTerminator outOptimizedTrueTerminator
  !@ipic18SingleInstructionTerminator outOptimizedFalseTerminator
:
#---
  [mInstructionIfConditionTrue optimizeTerminator
    !inSymbolTable
    !inBlockList
    !inBlockLabel
    !?ioOptimizationDone
    !?ioListFileContents
    ?@ipic18AbstractBlockTerminator optimizedTrueTerminator
  ] ;
  outOptimizedTrueTerminator := (cast optimizedTrueTerminator : @ipic18SingleInstructionTerminator) ;
#---
  [mInstructionIfConditionFalse optimizeTerminator
    !inSymbolTable
    !inBlockList
    !inBlockLabel
    !?ioOptimizationDone
    !?ioListFileContents
    ?@ipic18AbstractBlockTerminator optimizedFalseTerminator
  ] ;
  outOptimizedFalseTerminator := (cast optimizedFalseTerminator : @ipic18SingleInstructionTerminator) ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18ConditionalJumpTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ??@string inBlockLabel
  ?!@bool ioOptimizationDone
  ?!@string ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  @bool optimization := false ;
#---
  [selfcopy getOptimizedTerminators
    !inSymbolTable
    !inBlockList
    !inBlockLabel
    !?optimization
    !?ioListFileContents
    ?@ipic18SingleInstructionTerminator optimizedTrueTerminator
    ?@ipic18SingleInstructionTerminator optimizedFalseTerminator
  ] ;
  if optimization then
    outOptimizedTerminator := [@ipic18ConditionalJumpTerminator new
      !optimizedTrueTerminator
      !optimizedFalseTerminator 
      !mBranchMode
      !mConditionalBranch
    ] ;
    ioOptimizationDone := true ;
  else
    outOptimizedTerminator := selfcopy ;
  end if ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18IncDecRegisterTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ??@string inBlockLabel
  ?!@bool ioOptimizationDone
  ?!@string ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  @bool optimization := false ;
#---
  [selfcopy getOptimizedTerminators
    !inSymbolTable
    !inBlockList
    !inBlockLabel
    !?optimization
    !?ioListFileContents
    ?@ipic18SingleInstructionTerminator optimizedTrueTerminator
    ?@ipic18SingleInstructionTerminator optimizedFalseTerminator
  ] ;
  if optimization then
    outOptimizedTerminator := [@ipic18IncDecRegisterTerminator new
      !optimizedTrueTerminator
      !optimizedFalseTerminator 
      !mRegisterDescription
      !mIncrement
      !m_W_isDestination
    ] ;
    ioOptimizationDone := true ;
  else
    outOptimizedTerminator := selfcopy ;
  end if ;
end method ;

#----------------------------------------------------------------------------*

override method @pic18BitTestTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ??@string inBlockLabel
  ?!@bool ioOptimizationDone
  ?!@string ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  @bool optimization := false ;
#---
  [selfcopy getOptimizedTerminators
    !inSymbolTable
    !inBlockList
    !inBlockLabel
    !?optimization
    !?ioListFileContents
    ?@ipic18SingleInstructionTerminator optimizedTrueTerminator
    ?@ipic18SingleInstructionTerminator optimizedFalseTerminator
  ] ;
  if optimization then
    outOptimizedTerminator := [@pic18BitTestTerminator new
      !optimizedTrueTerminator
      !optimizedFalseTerminator 
      !mRegisterDescription
      !mBitNumber
    ] ;
    ioOptimizationDone := true ;
  else
    outOptimizedTerminator := selfcopy ;
  end if ;
end method ;

#----------------------------------------------------------------------------*

override method @pic18BraCCTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ??@string inBlockLabel
  ?!@bool ioOptimizationDone
  ?!@string ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  @bool optimization := false ;
  [selfcopy getOptimizedTerminators
    !inSymbolTable
    !inBlockList
    !inBlockLabel
    !?optimization
    !?ioListFileContents
    ?@ipic18SingleInstructionTerminator optimizedTrueTerminator
    ?@ipic18SingleInstructionTerminator optimizedFalseTerminator
  ] ;
  if optimization then
    outOptimizedTerminator := [@pic18BraCCTerminator new
      !optimizedTrueTerminator
      !optimizedFalseTerminator 
      !mBranchMode
      !mConditionalBranch
    ] ;
    ioOptimizationDone := true ;
  else
    outOptimizedTerminator := selfcopy ;
  end if ;
end method ;

#----------------------------------------------------------------------------*

override method @pic18RegisterComparisonTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ??@string inBlockLabel
  ?!@bool ioOptimizationDone
  ?!@string ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  @bool optimization := false ;
  [selfcopy getOptimizedTerminators
    !inSymbolTable
    !inBlockList
    !inBlockLabel
    !?optimization
    !?ioListFileContents
    ?@ipic18SingleInstructionTerminator optimizedTrueTerminator
    ?@ipic18SingleInstructionTerminator optimizedFalseTerminator
  ] ;
  if optimization then
    outOptimizedTerminator := [@pic18RegisterComparisonTerminator new
      !optimizedTrueTerminator
      !optimizedFalseTerminator 
      !mRegisterDescription
      !mComparison
    ] ;
    ioOptimizationDone := true ;
  else
    outOptimizedTerminator := selfcopy ;
  end if ;
end method ;

#----------------------------------------------------------------------------*

override method @pic18TestRegisterTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ??@string inBlockLabel
  ?!@bool ioOptimizationDone
  ?!@string ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  @bool optimization := false ;
  [selfcopy getOptimizedTerminators
    !inSymbolTable
    !inBlockList
    !inBlockLabel
    !?optimization
    !?ioListFileContents
    ?@ipic18SingleInstructionTerminator optimizedTrueTerminator
    ?@ipic18SingleInstructionTerminator optimizedFalseTerminator
  ] ;
  if optimization then
    outOptimizedTerminator := [@pic18TestRegisterTerminator new
      !optimizedTrueTerminator
      !optimizedFalseTerminator 
      !mRegisterDescription
    ] ;
    ioOptimizationDone := true ;
  else
    outOptimizedTerminator := selfcopy ;
  end if ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18JumpTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ??@string inBlockLabel
  ?!@bool ioOptimizationDone
  ?!@string ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  outOptimizedTerminator := selfcopy ;
  if inBlockLabel != mLabel->string then
    [inSymbolTable searchKey !mLabel ??@uint targetBlockIndex] ;
    const @ipic18Block targetBlock := [inBlockList mBlockAtIndex !targetBlockIndex] ;
    if (targetBlock->mStartAddress == [@uint max]) # Relocatable
     & ([targetBlock->mInstructionList length] == 0) # Empty block
     & (targetBlock->mTerminator is @ipic18SingleInstructionTerminator) then
      @bool optimize ;
      if (targetBlock->mTerminator is @ipic18JumpTerminator) then
        const @ipic18JumpTerminator candidate := (cast targetBlock->mTerminator : @ipic18JumpTerminator) ;
        optimize := mLabel->string != [candidate mLabel]->string ;
      else
        optimize := true ;
      end if ;
      if optimize then 
        outOptimizedTerminator := targetBlock->mTerminator ;
        ioOptimizationDone := true ;
        ioListFileContents .= "  " . inBlockLabel . ": " ;
        [selfcopy display !?ioListFileContents] ;
        ioListFileContents .= " -> " ;
        [outOptimizedTerminator display !?ioListFileContents] ;
        ioListFileContents .= "\n" ;
      end if ;
    end if ;
  end if ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18RetfieTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization unused inSymbolTable
  ??@ipic18BlockList unused inBlockList
  ??@string unused inBlockLabel
  ?!@bool unused ioOptimizationDone
  ?!@string unused ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  outOptimizedTerminator := selfcopy ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18RetlwTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization unused inSymbolTable
  ??@ipic18BlockList unused inBlockList
  ??@string unused inBlockLabel
  ?!@bool unused ioOptimizationDone
  ?!@string unused ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  outOptimizedTerminator := selfcopy ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18ReturnTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization unused inSymbolTable
  ??@ipic18BlockList unused inBlockList
  ??@string unused inBlockLabel
  ?!@bool unused ioOptimizationDone
  ?!@string unused ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  outOptimizedTerminator := selfcopy ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18ComputedRETLWTerminator optimizeTerminator
  ??@symbolTableForBlockOptimization unused inSymbolTable
  ??@ipic18BlockList unused inBlockList
  ??@string unused inBlockLabel
  ?!@bool unused ioOptimizationDone
  ?!@string unused ioListFileContents
  !@ipic18AbstractBlockTerminator outOptimizedTerminator
:
  outOptimizedTerminator := selfcopy ;
end method ;

#----------------------------------------------------------------------------*

#!--- Terminator enterTerminatorReferencedLabels

#----------------------------------------------------------------------------*

abstract method @ipic18AbstractBlockTerminator enterTerminatorReferencedLabels
  ?!@stringset ioReferencedBlockSet
;

#----------------------------------------------------------------------------*

override method @ipic18ComputedBraTerminator enterTerminatorReferencedLabels
  ?!@stringset ioReferencedBlockSet
:
  foreach mTargetLabels do
    ioReferencedBlockSet += !mValue->string ;
  end foreach ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18ComputedGotoTerminator enterTerminatorReferencedLabels
  ?!@stringset ioReferencedBlockSet
:
  foreach mTargetLabels do
    ioReferencedBlockSet += !mValue->string ;
  end foreach ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18JumpTerminator enterTerminatorReferencedLabels
  ?!@stringset ioReferencedBlockSet
:
  ioReferencedBlockSet += !mLabel->string ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18RetfieTerminator enterTerminatorReferencedLabels
  ?!@stringset unused ioReferencedBlockSet
:
end method ;

#----------------------------------------------------------------------------*

override method @ipic18ReturnTerminator enterTerminatorReferencedLabels
  ?!@stringset unused ioReferencedBlockSet
:
end method ;

#----------------------------------------------------------------------------*

override method @ipic18RetlwTerminator enterTerminatorReferencedLabels
  ?!@stringset unused ioReferencedBlockSet
:
end method ;

#----------------------------------------------------------------------------*

override method @ipic18ComputedRETLWTerminator enterTerminatorReferencedLabels
  ?!@stringset unused  ioReferencedBlockSet
:
end method ;

#----------------------------------------------------------------------------*

override method @ipic18AbstractConditionTerminator enterTerminatorReferencedLabels
  ?!@stringset ioReferencedBlockSet
:
  [mInstructionIfConditionTrue enterTerminatorReferencedLabels !?ioReferencedBlockSet] ;
  [mInstructionIfConditionFalse enterTerminatorReferencedLabels !?ioReferencedBlockSet] ;
end method ;

#----------------------------------------------------------------------------*

#!--- Instruction enterInstructionReferencedLabels

#----------------------------------------------------------------------------*

method @ipic18SequentialInstruction enterInstructionReferencedLabels
  ?!@stringset unused ioReferencedBlockSet
:
end method ;

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_JSR enterInstructionReferencedLabels
  ?!@stringset ioReferencedBlockSet
:
  ioReferencedBlockSet += !mTargetLabel->string ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_computed_rcall enterInstructionReferencedLabels
  ?!@stringset ioReferencedBlockSet
:
  foreach mTargetLabels do
    ioReferencedBlockSet += !mValue->string ;
  end foreach ;
end method ;

#----------------------------------------------------------------------------*

override method @ipic18_skip_instruction enterInstructionReferencedLabels
  ?!@stringset ioReferencedBlockSet
:
  [mEmbeddedInstruction enterInstructionReferencedLabels !?ioReferencedBlockSet] ;
end method ;

#----------------------------------------------------------------------------*

#!--- Block optimization

#----------------------------------------------------------------------------*

method @ipic18SequentialInstructionList enterInstructionReferencedLabels
  ?!@stringset ioReferencedBlockSet
:
  foreach selfcopy do
    [mInstruction enterInstructionReferencedLabels !?ioReferencedBlockSet] ;  
  end foreach ;
end method ;

#----------------------------------------------------------------------------*

method @ipic18Block enterReferencedLabels
  ?!@stringset ioReferencedBlockSet
:
  [mInstructionList enterInstructionReferencedLabels !?ioReferencedBlockSet] ;
  [mTerminator enterTerminatorReferencedLabels !?ioReferencedBlockSet] ;
end method ;

#----------------------------------------------------------------------------*

method @ipic18Block optimize
  ??@symbolTableForBlockOptimization inSymbolTable
  ??@ipic18BlockList inBlockList
  ?!@bool ioOptimizationDone
  ?!@string ioListFileContents
  !@ipic18Block outOptimizedBlock
:
  outOptimizedBlock := selfcopy ;
  @bool optimized := false ;
#--- Transform MOVLW k ; RETURN to RETLW
  @ipic18SequentialInstructionList instructionList := mInstructionList ;
  if ([mInstructionList length] > 0) & (mTerminator is @ipic18ReturnTerminator) then
    [instructionList last ??@ipic18SequentialInstruction lastInstruction] ;
    if (lastInstruction is @ipic18_intermediate_instruction_literalOperation) then
      const @ipic18_intermediate_instruction_literalOperation op := (cast lastInstruction : @ipic18_intermediate_instruction_literalOperation) ;
      if [op mLiteralInstruction] == [@literal_instruction_opcode MOVLW] then
        [!?instructionList popLast ?*] ;
        const @ipic18RetlwTerminator newTerminator [new ![op mLiteralValue]] ;
        outOptimizedBlock := [@ipic18Block new
          !mStartAddress
          !mLabel
          !instructionList
          !newTerminator
        ] ;
        optimized := true ;
        ioOptimizationDone := true ;
        ioListFileContents .= "  " . mLabel . ": " ;
        [mTerminator display !?ioListFileContents] ;
        ioListFileContents .= " -> " ;
        [newTerminator display !?ioListFileContents] ;
        ioListFileContents .= "\n" ;
      end if ;
    end if ;
#--- Transform JSR label ; RETURN to JUMP label
    if (not optimized) & (lastInstruction is @ipic18_intermediate_JSR) then
      const @ipic18_intermediate_JSR jsr := (cast lastInstruction : @ipic18_intermediate_JSR) ;
      [!?instructionList popLast ?*] ;
      const @ipic18JumpTerminator newTerminator [new ![jsr mTargetLabel]] ; # ![jsr mKind]] ;
      outOptimizedBlock := [@ipic18Block new
        !mStartAddress
        !mLabel
        !instructionList
        !newTerminator
      ] ;
      optimized := true ;
      ioOptimizationDone := true ;
      ioListFileContents .= "  " . mLabel . ": " ;
      [mTerminator display !?ioListFileContents] ;
      ioListFileContents .= " -> " ;
      [newTerminator display !?ioListFileContents] ;
      ioListFileContents .= "\n" ;
    end if ;
  end if ;
#--- Optimize terminator
  if not optimized then
    [mTerminator optimizeTerminator
      !inSymbolTable
      !inBlockList
      !mLabel->string
      !?ioOptimizationDone
      !?ioListFileContents
      ??@ipic18AbstractBlockTerminator optimizedTerminator
    ] ;
    outOptimizedBlock := [@ipic18Block new
      !mStartAddress
      !mLabel
      !mInstructionList
      !optimizedTerminator 
    ] ;
  end if ;
end method ;

#----------------------------------------------------------------------------*

routine ipic18OptimizeBlocks
  ?!@string ioListFileContents
  ?!@ipic18BlockList ioGeneratedBlockList
:
  ioListFileContents .= ["" stringByLeftAndRightPadding !79 !'*'] . "\n" ;
  ioListFileContents .= "*" . ["BLOCK REPRESENTATION OPTIMIZATION" stringByLeftAndRightPadding !77 !' '] . "*\n" ;
  ioListFileContents .= ["" stringByLeftAndRightPadding !79 !'*'] . "\n" ;
  message "Optimizations:\n" ;
#--- Optimizations loops
  @bool optimizationDone := true ;
  @uint optimizationPass := 0 ;
  loop [ioGeneratedBlockList length] + 1
  while optimizationDone & ([@uint errorCount] == 0) do
    optimizationDone := false ;
    optimizationPass := optimizationPass + 1 ;
    ioListFileContents .= "\n--- Pass " . optimizationPass . " (" . [ioGeneratedBlockList length] . " blocks)\n" ;
    message "  Pass " . optimizationPass . " (" . [ioGeneratedBlockList length] . " blocks)\n" ;
  #-------------------------------- Build referenced label set
    @stringset referencedBlockSet [emptySet] ;
    foreach ioGeneratedBlockList do
      [mBlock enterReferencedLabels !?referencedBlockSet] ;
    end foreach ;
  #-------------------------------- Build label map
    @symbolTableForBlockOptimization symbolTable [emptyMap] ;
    foreach ioGeneratedBlockList index blockIndex do
      if mBlock->mLabel->string != "" then
        [!?symbolTable insertKey !mBlock->mLabel !blockIndex] ;
      end if ;
    end foreach ;
  #-------------------------------- Optimization loop
    @ipic18BlockList optimizedBlockList [emptyList] ;
    foreach ioGeneratedBlockList do
      if [referencedBlockSet hasKey !mBlock->mLabel->string] | (mBlock->mStartAddress != [@uint max]) then
        [mBlock optimize
          !symbolTable
          !ioGeneratedBlockList
          !?optimizationDone
          !?ioListFileContents
          ?@ipic18Block optimizedBlock
        ] ;
        optimizedBlockList += !optimizedBlock ;
      else
        ioListFileContents .= "  " . mBlock->mLabel . ": not referenced, deleted\n" ;
        optimizationDone := true ;
      end if ;
    end foreach ;
    ioGeneratedBlockList := optimizedBlockList ;
  end loop ;
  ioListFileContents .= "  No optimization.\n\n" ;
  message "\n" ;
end routine ;

#----------------------------------------------------------------------------*


end semantics ;
