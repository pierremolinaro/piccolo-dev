semantics piccoloDevice_semantics :
import "bitSlice.gSemantics" ;
import semantics bitSlice in "bitSlice.gSemantics" ;

#----------------------------------------------------*

map @registerTable {
  @uintlist mRegisterAddressList ;
  @uint mSize ;
  @bitSliceTable mBitSliceTable ;
  insert insertKey error message "the '%K' register is already declared in %L" ;
  search searchKey error message "the '%K' register is not declared" ;
}

#----------------------------------------------------*

map @ramBankTable {
  @uint mFirstFreeAddress ; # Mutable
  @uint mLastAddressPlusOne ;
  insert insertKey error message "the '%K' bank ram is already declared in %L" ;
  search searchKey error message "the '%K' bank ram is not declared" ;
}

#----------------------------------------------------*

enum @processorType {
  constructor pic18_60 ;
  constructor pic18_80 ;
}{
}

#----------------------------------------------------*

list @illegalMaskList {
  @luint mIllegalValue ;
  @luint mIllegalMask ;
  @lstring mDescription ;
}

#----------------------------------------------------*

list @fieldSettingList {
  @uint mValue ;
  @uint mMask ;
  @string mDescription ;
}

#----------------------------------------------------*

map @configRegisterMaskMap {
  @luint mMaskValue ;
  @lstring mDescription ;
  @fieldSettingList mFieldSettingList ;
  insert insertKey error message "the '%K' configuration register mask is already declared in %L" ;
  search searchKey error message "the '%K' configuration register mask is not declared" ;
}

#----------------------------------------------------*

map @configRegisterMap {
  @luint mRegisterAddress ;
  @luint mRegisterWidth ;
  @configRegisterMaskMap mConfigRegisterMaskMap ;
  @illegalMaskList mIllegalMaskList ;
  insert insertKey error message "the '%K' configuration register is already declared in %L" ;
  search searchKey error message "the '%K' configuration register is not declared" ;
}

#----------------------------------------------------*

struct @piccoloDeviceModel {
  @lstring mDeviceName ;
  @processorType mProcessorType ;
  @luint mRomSize ;
  @luint mBankCount ;
  @registerTable mRegisterTable ;
  @ramBankTable mRamBankTable ;
  @uint mEepromSize ; # 0 if no EEPROM
  @uint mEepromAddress ; # 0 if no EEPROM
  @configRegisterMap mConfigRegisterMap ;
}

#----------------------------------------------------*

end semantics ;
