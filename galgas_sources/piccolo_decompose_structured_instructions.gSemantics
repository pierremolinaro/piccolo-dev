semantics piccolo_decompose_structured_instructions :
import semantics piccolo_metamodel in "piccolo_metamodel.gSemantics" ;
import semantics ipic_metamodel in "ipic_metamodel.gSemantics" ;
import "ipic_metamodel.gSemantics" ;

#----------------------------------------------------*
#           DECOMPOSE COMPLEX INSTRUCTION            *
#----------------------------------------------------*

abstract method @piccolo_instruction.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList unused ioGeneratedInstructionList
;

#----------------------------------------------------*

override method @pseudo_LABEL.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_pseudo_LABEL new
    !mTargetLabel
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_FDA.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_FDA new
    !mInstructionLocation
    !mInstruction_FDA_base_code
    !mRegisterExpression
    !m_W_isDestination
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_FA.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_FA new
    !mInstructionLocation
    !mFAinstruction
    !mRegisterExpression
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_MOVFF.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_MOVFF new
    !mInstructionLocation
    !mSourceRegisterName
    !mDestinationRegisterName
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_FBA.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_FBA new
    !mInstructionLocation
    !mBitOrientedOp
    !mRegisterExpression
    !mBitNumber
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_conditionalBranch.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_conditionalBranch new
    !mInstructionLocation
    !mBranchMode
    !mConditionalBranch
    !mTargetLabel
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_BRA.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_BRA new
    !mInstructionLocation
    !mTargetLabel
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_CALL.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_CALL new
    !mInstructionLocation
    !mTargetLabel
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_GOTO.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_GOTO new
    !mInstructionLocation
    !mTargetLabel
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_RCALL.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_RCALL new
    !mInstructionLocation
    !mTargetLabel
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_CLRWDT.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_CLRWDT new
    !mInstructionLocation
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_DAW.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_DAW new
    !mInstructionLocation
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_NOP.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_NOP new
    !mInstructionLocation
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_POP.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_POP new
    !mInstructionLocation
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_PUSH.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_PUSH new
    !mInstructionLocation
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_RESET.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_RESET new
    !mInstructionLocation
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_RETURN.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_RETURN new
    !mInstructionLocation
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_RETFIE.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_RETFIE new
    !mInstructionLocation
    !mFastReturn
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_SLEEP.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_SLEEP new
    !mInstructionLocation
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_literalOperation.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_literalOperation new
    !mInstructionLocation
    !mLiteralInstruction
    !mLiteralValue
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_LFSR.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_LFSR new
    !mInstructionLocation
    !mFSRindex
    !mRegisterExpression
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_MOVLB.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_MOVLB new
    !mInstructionLocation
    !mPageIndex
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_MOVAW.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_MOVAW new
    !mInstructionLocation
    !mRegisterExpression
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_TBLRD.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_TBLRD new
    !mInstructionLocation
    !mOption
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_TBLWT.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_TBLWT new
    !mInstructionLocation
    !mOption
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_computed_retlw.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_computed_retlw new
    !mInstructionLocation
    !mLiteralValues
    !mUsesRelativeCall
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_MNOP.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_MNOP new
    !mInstructionLocation
    !mOccurrenceFactor
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_computed_bra.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_computed_bra new
    !mInstructionLocation
    !mTargetLabels
    !mUsesRelativeCall
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_computed_goto.decomposeComplexInstruction
  ?!@uint unused ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  ioGeneratedInstructionList += ![@ipic_instruction_computed_goto new
    !mInstructionLocation
    !mTargetLabels
    !mUsesRelativeCall
  ] ;
end method ;

#----------------------------------------------------*

override method @instruction_FOREVER.decomposeComplexInstruction
  ?!@uint ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  @string label0 := "_label_" . [ioLocalLabelIndex string] ; 
  ioLocalLabelIndex ++ ;
  ioGeneratedInstructionList += ![@ipic_pseudo_LABEL new ![@lstring new !label0 !mInstructionLocation]] ;
  foreach mInstructionList do
    [mInstruction decomposeComplexInstruction !?ioLocalLabelIndex !?ioGeneratedInstructionList] ;
  end foreach ;
  ioGeneratedInstructionList += ![@ipic_instruction_BRA new !mInstructionLocation ![@lstring new !label0 !mInstructionLocation]] ;
end method ;

#----------------------------------------------------*

override method @instruction_IF_FA_SEMI_COLON.decomposeComplexInstruction
  ?!@uint ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  @FA_instruction_base_code baseCode ;
  switch mOpCode
    when CPFSEQ : baseCode := [@FA_instruction_base_code CPFSEQ] ;
    when CPFSGT : baseCode := [@FA_instruction_base_code CPFSGT] ;
    when CPFSLT : baseCode := [@FA_instruction_base_code CPFSLT] ;
    when TSTFSZ : baseCode := [@FA_instruction_base_code TSTFSZ] ;
  end switch ;
  ioGeneratedInstructionList += ![@ipic_instruction_FA new
    !mInstructionLocation
    !baseCode
    !mRegisterExpression
  ] ;
#--- Append Instruction
  [mInstruction decomposeComplexInstruction !?ioLocalLabelIndex !?ioGeneratedInstructionList] ;
end method ;

#----------------------------------------------------*

override method @instruction_IF_BitTest.decomposeComplexInstruction
  ?!@uint ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  @bit_oriented_op baseCode ;
  if mSkipIfSet then
    baseCode := [@bit_oriented_op BTFSS] ;
  else
    baseCode := [@bit_oriented_op BTFSC] ;
  end if ;
  ioGeneratedInstructionList += ![@ipic_instruction_FBA new
    !mInstructionLocation
    !baseCode
    !mRegisterExpression
    !mBitNumber
  ] ;
#--- Append Instruction
  [mInstruction decomposeComplexInstruction !?ioLocalLabelIndex !?ioGeneratedInstructionList] ;
end method ;

#----------------------------------------------------*

abstract method @conditionExpression.decomposeIFcondition
  ??@bool inComplementaryBranch
  ??@location inInstructionLocation
  ??@string inTargetLabel
  ?!@ipic_instructionList ioGeneratedInstructionList
;

#----------------------------------------------------*

override method @bcc_in_structured_if_condition.decomposeIFcondition
  ??@bool inComplementaryBranch
  ??@location inInstructionLocation
  ??@string inTargetLabel
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  @conditional_branch condition ;
  if inComplementaryBranch then
    getComplementaryBcc !mCondition ?condition ;
  else
    condition := mCondition ;
  end if ;
  ioGeneratedInstructionList += ![@ipic_instruction_conditionalBranch new
    !inInstructionLocation
    ![@condionalBranchMode native]
    !condition
    ![@lstring new !inTargetLabel !inInstructionLocation]
  ] ;
end method ;

#----------------------------------------------------*

override method @bitTest_in_structured_if_condition.decomposeIFcondition
  ??@bool inComplementaryBranch
  ??@location inInstructionLocation
  ??@string inTargetLabel
  ?!@ipic_instructionList ioGeneratedInstructionList
:
  @bit_oriented_op op ;
  if mBTFSSinstruction ^ inComplementaryBranch then
    op := [@bit_oriented_op BTFSS] ;
  else
    op := [@bit_oriented_op BTFSC] ;
  end if ;
  ioGeneratedInstructionList += ![@ipic_instruction_FBA new
    !inInstructionLocation
    !op
    !mRegisterExpression
    !mBitNumber
  ] ;
  ioGeneratedInstructionList += ![@ipic_instruction_BRA new !inInstructionLocation ![@lstring new !inTargetLabel !inInstructionLocation]] ;
end method ;

#----------------------------------------------------*

override method @instruction_structured_if.decomposeComplexInstruction
  ?!@uint ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
#---
  @string label0 := "_label_" . [ioLocalLabelIndex string] ; ioLocalLabelIndex ++ ;
  @string label1 := "_label_" . [ioLocalLabelIndex string] ; ioLocalLabelIndex ++ ;
#--- Translate condition
  [mIfCondition decomposeIFcondition !true !mInstructionLocation !label0 !?ioGeneratedInstructionList] ;
#--- 'then' instructions
  foreach mThenInstructionList do
    [mInstruction decomposeComplexInstruction !?ioLocalLabelIndex !?ioGeneratedInstructionList] ;
  end foreach ;
  if [mElseInstructionList length] > 0 then
    ioGeneratedInstructionList += ![@ipic_instruction_BRA new !mInstructionLocation ![@lstring new !label1 !mInstructionLocation]] ;
  end if ;
#--- 'else' instructions
  ioGeneratedInstructionList += ![@ipic_pseudo_LABEL new ![@lstring new !label0 !mInstructionLocation]] ;
  foreach mElseInstructionList do
    [mInstruction decomposeComplexInstruction !?ioLocalLabelIndex !?ioGeneratedInstructionList] ;
  end foreach ;
  if [mElseInstructionList length] > 0 then
    ioGeneratedInstructionList += ![@ipic_pseudo_LABEL new ![@lstring new !label1 !mInstructionLocation]] ;
  end if ;
end method ;

#----------------------------------------------------*

override method @instruction_do_while.decomposeComplexInstruction
  ?!@uint ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
#---
#--- Generate label
  @string label0 := "_label_" . [ioLocalLabelIndex string] ; ioLocalLabelIndex ++ ;
#--- Define label
  ioGeneratedInstructionList += ![@ipic_pseudo_LABEL new ![@lstring new !label0 !mInstructionLocation]] ;
#--- Repeated instructions
  foreach mRepeatedInstructionList do
    [mInstruction decomposeComplexInstruction !?ioLocalLabelIndex !?ioGeneratedInstructionList] ;
  end foreach ;
#--- Translate condition
  [mWhileCondition decomposeIFcondition !false !mInstructionLocation !label0 !?ioGeneratedInstructionList] ;
end method ;

#----------------------------------------------------*

override method @instruction_IF_IncDec.decomposeComplexInstruction
  ?!@uint ioLocalLabelIndex
  ?!@ipic_instructionList ioGeneratedInstructionList
:
#---
#---
  @instruction_FDA_base_code baseCode ;
  if mIncrement & mSkipIfZero then
    baseCode := [@instruction_FDA_base_code INCFSZ] ;
  elsif mIncrement & not mSkipIfZero then
    baseCode := [@instruction_FDA_base_code INFSNZ] ;
  elsif (not mIncrement) & mSkipIfZero then
    baseCode := [@instruction_FDA_base_code DECFSZ] ;
  else
    baseCode := [@instruction_FDA_base_code DCFSNZ] ;
  end if ;
  ioGeneratedInstructionList += ![@ipic_instruction_FDA new
    !mInstructionLocation
    !baseCode
    !mRegisterExpression
    !m_W_isDestination
  ] ;
#--- Repeated instructions
  [mInstruction decomposeComplexInstruction !?ioLocalLabelIndex !?ioGeneratedInstructionList] ;
end method ;

#----------------------------------------------------*

routine buildAssemblyInstructionList
  ??@piccoloModel inPiccoloModel
  ??@bool inHasHighInterrupt
  ??@bool inHasLowInterrupt
  !@ipic_instructionList outGeneratedInstructionList
:
#-------------------------------- First Pass
  outGeneratedInstructionList := [@ipic_instructionList emptyList] ;
  @uint localLabelIndex := 0 ;
#--- At zero, generate 'goto main' instruction
  outGeneratedInstructionList += ![@ipic_instruction_GOTO new !here ![@lstring new !"main" !here]] ;
#--- At 0x08, generate 'bra _fast_interrupt' instruction, if both interrupt are defined
  if inHasLowInterrupt & inHasHighInterrupt then
    outGeneratedInstructionList += ![@ipic_pseudo_ORG new !0x8] ;
    outGeneratedInstructionList += ![@ipic_instruction_BRA new !here ![@lstring new !"_fast_interrupt" !here]] ;
  end if ;
#--- First, handle low interrupt (if any)
  if inHasLowInterrupt then
    outGeneratedInstructionList += ![@ipic_pseudo_ORG new !0x18] ;
    foreach [inPiccoloModel mInterruptDefinitionList] do
      if [mInterruptName string] == "low" then
        foreach mInstructionList do
          [mInstruction decomposeComplexInstruction !?localLabelIndex !? outGeneratedInstructionList] ;
        end foreach ;
      #--- Ajouter l'instruction REFFIE
        outGeneratedInstructionList += ![@ipic_instruction_RETFIE new !here !true] ;
      end if ;
    end foreach ;
  end if ;
#--- Then, handle high interrupt (if any)
  if inHasHighInterrupt then
    if inHasLowInterrupt then
      outGeneratedInstructionList += ![@ipic_pseudo_LABEL new ![@lstring new !"_fast_interrupt" !here]] ;
    else
      outGeneratedInstructionList += ![@ipic_pseudo_ORG new !0x8] ;
    end if ;
    foreach [inPiccoloModel mInterruptDefinitionList] do
      if [mInterruptName string] == "high" then
        foreach mInstructionList do
          [mInstruction decomposeComplexInstruction !?localLabelIndex !?outGeneratedInstructionList] ;
        end foreach ;
      #--- Ajouter l'instruction REFFIE
        outGeneratedInstructionList += ![@ipic_instruction_RETFIE new !here !true] ;
      end if ;
    end foreach ;
  end if ;
#--- Handle routines
  foreach [inPiccoloModel mRoutineDefinitionList] do
    outGeneratedInstructionList += ![@ipic_pseudo_LABEL new !mRoutineName] ;
    foreach mInstructionList do
      [mInstruction decomposeComplexInstruction !?localLabelIndex !? outGeneratedInstructionList] ;
    end foreach ;
  end foreach ;
#--- computed_goto2 routine needed ?
  if [inPiccoloModel mNeedsComputedGoto4] then
    outGeneratedInstructionList += ![@ipic_pseudo_LABEL new ![@lstring new !"_computed_goto_4" !here]] ;
    outGeneratedInstructionList += ![@ipic_instruction_FDA new
      !here
      ![@instruction_FDA_base_code ADDWF]
      ![@registerExpression new ![@lstring new !"WREG" !here] ![@luint new !0 !here]]
      !true
    ] ; # ADDWF WREG, W
  end if ;
  if [inPiccoloModel mNeedsComputedGoto2] then
    outGeneratedInstructionList += ![@ipic_pseudo_LABEL new ![@lstring new !"_computed_goto_2" !here]] ;
  end if ;
  if [inPiccoloModel mNeedsComputedGoto2] | [inPiccoloModel mNeedsComputedGoto4] then
    outGeneratedInstructionList += ![@ipic_instruction_FDA new
      !here
      ![@instruction_FDA_base_code ADDWF]
      ![@registerExpression new ![@lstring new !"WREG" !here] ![@luint new !0 !here]]
      !true
    ] ; # ADDWF WREG, W
    outGeneratedInstructionList += ![@ipic_instruction_FDA new
      !here
      ![@instruction_FDA_base_code ADDWF]
      ![@registerExpression new ![@lstring new !"TOSL" !here] ![@luint new !0 !here]]
      !false
    ] ; # ADDWF TOSL, F
    outGeneratedInstructionList += ![@ipic_instruction_literalOperation new
      !here
      ![@literal_instruction_opcode MOVLW]
      ![@luint new !0 !here]
    ] ; # MOVLW 0
    outGeneratedInstructionList += ![@ipic_instruction_FDA new
      !here
      ![@instruction_FDA_base_code ADDWFC]
      ![@registerExpression new ![@lstring new !"TOSH" !here] ![@luint new !0 !here]]
      !false
    ] ; # ADDWFC TOSH, F
    outGeneratedInstructionList += ![@ipic_instruction_RETURN new
      !here
    ] ; # RETURN 0
  end if ;
end routine ;

#----------------------------------------------------*

end semantics ;
