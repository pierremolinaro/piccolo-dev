lexique piccolo_lexique :

@lstring identifierString ;
@luint uint32value ;
@lchar charValue ;
@lstring tokenString ;

style keywordStyle -> "Keywords:" ;
style instructionStyle -> "Instructions:" ;
style delimitersStyle -> "Delimiters:" ;
style integerStyle -> "Integer Constants:" ;
style characterStyle -> "Character Constants:" ;
style stringStyle -> "String Constants:" ;
style commentStyle -> "Comments:" ;

# -------------------------- identifier or key word --------------------
# keywords can be written in lower or upper case
# for identifiers, case is significant

$identifier$ ! tokenString error message "an identifier" ;

list controlKeyWordList error message "the '%K' keyword" style keywordStyle :
  "bank",
  "banksave",
  "banksel",
  "byte",
  "configuration",
  "const",
  "common",
  "computed",
  "default",
  "do",
  "end",
  "else",
  "elsif",
  "fast",
  "forever",
  "if",
  "interrupt",
  "label",
  "midrange",
  "nobank",
  "noreturn",
  "pic18",
  "preserved",
  "ram",
  "requires",
  "ensures",
  "routine",
  "w",
  "while"
 ;

list instructionKeyWordList error message "the '%K' instruction" style instructionStyle :
  "addlw",
  "addwf",
  "addwfc",
  "andlw",
  "andwf",
  "bc",
  "bcf",
  "bn",
  "bnc",
  "bnn",
  "bov",
  "bnov",
  "bnz",
  "bsf",
  "bra",
  "btg",
  "bz",
  "call",
  "clrf",
  "clrwdt",
  "comf",
  "daw",
  "decf",
  "incf",
  "iorlw",
  "iorwf",
  "goto",
  "jsr",
  "jump",
  "lfsr",
  "mnop",
  "movf",
  "movff",
  "movlw",
  "movwf",
  "mullw",
  "mulwf",
  "negf",
  "nop",
  "pop",
  "push",
  "rcall",
  "reset",
  "retlw",
  "sleep",
  "rlcf",
  "rlf",
  "rlncf",
  "rrcf",
  "rrf",
  "rrncf",
  "setf",
  "subfwb",
  "sublw",
  "subwf",
  "subwfb",
  "swapf",
  "tblrd",
  "tblwt",
  "xorlw",
  "xorwf"
;


rule 'a'->'z' |  'A'->'Z' :
  repeat
    enterCharacterIntoString (identifierString, toLower (*)) ;
    enterCharacterIntoString (tokenString, *) ;
  while 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :
  end repeat ;
  send
    search identifierString in instructionKeyWordList
    default search identifierString in controlKeyWordList
    default $identifier$
  ;
end rule ;

#------------------------------- Integer, floating Point Constant ------------------
$integer$ ! uint32value error message "a 32-bit unsigned number" style integerStyle ;

message hexNumberTooLarge : "hex number too large" ;
message decimalNumberTooLarge : "decimal number too large" ;
message internalError : "internal error" ;

rule "0x" :
  repeat
  while '0'->'9' :
    enterHexDigitIntoUlong (uint32value, *) error hexNumberTooLarge, internalError ;
  while 'a'->'f' :
    enterHexDigitIntoUlong (uint32value, *) error hexNumberTooLarge, internalError ;
  while 'A'->'F' :
    enterHexDigitIntoUlong (uint32value, *) error hexNumberTooLarge, internalError ;
  while '_' :
  end repeat ;
  send $integer$ ;
end rule ;

rule '0'->'9' :
  enterDigitIntoUlong (uint32value, *) error decimalNumberTooLarge, internalError ;
  repeat
  while '0'->'9' :
    enterDigitIntoUlong (uint32value, *) error decimalNumberTooLarge, internalError ;
  while '_' :
  end repeat ;
  send $integer$ ;
end rule ;

#--------------------------------- Character constant ------------------------------------
$literal_char$ ! charValue error message "a character constant" style characterStyle ;

message incorrectCharConstant : "incorrect literal character" ;

message ASCIIcodeTooLargeError : "ASCII code > 255" ;

rule '\'' :
  select
  when '\\' :
    select
    when 'f' :
      enterCharacterIntoCharacter (charValue, '\f') ;
    when 'n' :
      enterCharacterIntoCharacter (charValue, '\n') ;
    when 'r' :
      enterCharacterIntoCharacter (charValue, '\r') ;
    when 't' :
      enterCharacterIntoCharacter (charValue, '\t') ;
    when 'v' :
      enterCharacterIntoCharacter (charValue, '\v') ;
    when '\\' :
      enterCharacterIntoCharacter (charValue, '\\') ;
    when '0' :
      enterCharacterIntoCharacter (charValue, '\0') ;
    when '\'' :
      enterCharacterIntoCharacter (charValue, '\'') ;
    when 'x' | 'X' :
      select
      when '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
        repeat
          enterHexDigitIntoASCIIcharacter (charValue, *) error ASCIIcodeTooLargeError, internalError ;
        while '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
        end repeat ;
      default
        error incorrectCharConstant ;
      end select ;
    default
      error incorrectCharConstant ;
    end select ;
  when ' ' -> '\xFF' :
     enterCharacterIntoCharacter (charValue, *) ;
  default
    error incorrectCharConstant ;
  end select ;
  select
  when '\'' :
    send $literal_char$ ;
  default
    error incorrectCharConstant ;
  end select ;
end rule ;

# ----------------------------- Delimitors ---------------------------------------
list delimitorsList error message "the '%K' delimitor" style delimitersStyle :
  "*",  "*+",   ",",  "!=", "<=", ">=",
  "*-", "+*",   ";",  ":",  "==", "<", ">",
  "[",  "]",    ".",  "!", "&", "|", "=",
  "{",  "}", "(", ")", "/", "-", "+",
  "^", "<<", ">>", "~", "%", "@" ;

rule list delimitorsList ;

# -------------------- Characters string --------------------------------------
$literal_string$ ! tokenString error message "a character string constant \"...\"" style stringStyle ;

message incorrectStringEnd : "string does not end with '\"'" ;

rule '"' :
  repeat
  while '\\' :
    select
    when 'f' :
      enterCharacterIntoString (tokenString, '\f') ;
    when 'n' :
      enterCharacterIntoString (tokenString, '\n') ;
    when 'r' :
      enterCharacterIntoString (tokenString, '\r') ;
    when 't' :
      enterCharacterIntoString (tokenString, '\t') ;
    when 'v' :
      enterCharacterIntoString (tokenString, '\v') ;
    when '\\' :
      enterCharacterIntoString (tokenString, '\\') ;
    when '0' :
      enterCharacterIntoString (tokenString, '\0') ;
    when '"' :
      enterCharacterIntoString (tokenString, '"') ;
    when '\'' :
      enterCharacterIntoString (tokenString, '\'') ;
    when '0' -> '9' :
      repeat
        enterHexDigitIntoASCIIcharacter (charValue, *) error ASCIIcodeTooLargeError, internalError ;
      while '0' -> '9' :
      end repeat ;
      enterCharacterIntoString (tokenString, charValue) ;
    default
      error incorrectCharConstant ;
    end select ;
   while ' ' | '!' | '#'-> '\xFF' :
    enterCharacterIntoString (tokenString, *) ;
  end repeat ;
  select
  when '"' :
    send $literal_string$ ;
  default
    error incorrectStringEnd ;
  end select ;
end rule ;

# ------------------------------------ Comment ----------------------------
$comment$ error message "a comment" style commentStyle ;
rule '#' :
  repeat
  while '\x1' -> '\x9' | '\xB' | '\xC' | '\xE' -> '\xFF' :
  end repeat ;
  drop $comment$ ;
end rule ;

# --------------------- separators -----------------------------------------
rule '\x1' -> ' ' :
end rule ;

#------------------------------------------------------------------------------------

end lexique ;
