semantics piccolo_metamodel :
  import option piccolo_options in "piccolo_options.ggs" ;

#----------------------------------------------------*

abstract class @instruction {
  method instructionLength !@uint outLength :
    outLength := 2 ;
  end method ;
}

#----------------------------------------------------*

list @instructionList {
  @instruction mInstruction ;
}

#----------------------------------------------------*

class @registerExpression {
  @lstring mRegisterName ;
  @luint mOffset ;
}

#----------------------------------------------------*

abstract class @instruction_FDA extends @instruction {
  @registerExpression mRegisterExpression ;
  @bool m_W_isDestination ;
  abstract method getBaseCode !@uint outBaseCode ;
}

#----------------------------------------------------*

class @instruction_ADDWF extends @instruction_FDA {
  override method getBaseCode !@uint outBaseCode :
    outBaseCode := 0x2400 ;
  end method ;
}

#----------------------------------------------------*

class @instruction_ADDWFC extends @instruction_FDA {
  override method getBaseCode !@uint outBaseCode :
    outBaseCode := 0x2000 ;
  end method ;
}

#----------------------------------------------------*

class @instruction_ANDWF extends @instruction_FDA {
  override method getBaseCode !@uint outBaseCode :
    outBaseCode := 0x1200 ;
  end method ;
}

#----------------------------------------------------*

class @instruction_COMF extends @instruction_FDA {
  override method getBaseCode !@uint outBaseCode :
    outBaseCode := 0x1C00 ;
  end method ;
}

#----------------------------------------------------*

class @instruction_DECF extends @instruction_FDA {
  override method getBaseCode !@uint outBaseCode :
    outBaseCode := 0x0400 ;
  end method ;
}

#----------------------------------------------------*

class @instruction_DECFSZ extends @instruction_FDA {
  override method getBaseCode !@uint outBaseCode :
    outBaseCode := 0x2C00 ;
  end method ;
}

#----------------------------------------------------*

class @instruction_DCFSNZ extends @instruction_FDA {
  override method getBaseCode !@uint outBaseCode :
    outBaseCode := 0x4C00 ;
  end method ;
}

#----------------------------------------------------*

class @instruction_INCF extends @instruction_FDA {
  override method getBaseCode !@uint outBaseCode :
    outBaseCode := 0x2800 ;
  end method ;
}

#----------------------------------------------------*

class @instruction_INCFSZ extends @instruction_FDA {
  override method getBaseCode !@uint outBaseCode :
    outBaseCode := 0x3C00 ;
  end method ;
}

#----------------------------------------------------*

class @instruction_INFSNZ extends @instruction_FDA {
  override method getBaseCode !@uint outBaseCode :
    outBaseCode := 0x4800 ;
  end method ;
}

#----------------------------------------------------*

class @instruction_IORWF extends @instruction_FDA {
  override method getBaseCode !@uint outBaseCode :
    outBaseCode := 0x1000 ;
  end method ;
}

#----------------------------------------------------*

class @instruction_MOVF extends @instruction_FDA {
  override method getBaseCode !@uint outBaseCode :
    outBaseCode := 0x5000 ;
  end method ;
}

#----------------------------------------------------*

class @instruction_RLCF extends @instruction_FDA {
  override method getBaseCode !@uint outBaseCode :
    outBaseCode := 0x3400 ;
  end method ;
}

#----------------------------------------------------*

class @instruction_RLNCF extends @instruction_FDA {
  override method getBaseCode !@uint outBaseCode :
    outBaseCode := 0x4400 ;
  end method ;
}

#----------------------------------------------------*

class @instruction_RRCF extends @instruction_FDA {
  override method getBaseCode !@uint outBaseCode :
    outBaseCode := 0x3000 ;
  end method ;
}

#----------------------------------------------------*

class @instruction_RRNCF extends @instruction_FDA {
  override method getBaseCode !@uint outBaseCode :
    outBaseCode := 0x4000 ;
  end method ;
}

#----------------------------------------------------*

class @instruction_SUBFWB extends @instruction_FDA {
  override method getBaseCode !@uint outBaseCode :
    outBaseCode := 0x5400 ;
  end method ;
}

#----------------------------------------------------*

class @instruction_SUBWF extends @instruction_FDA {
  override method getBaseCode !@uint outBaseCode :
    outBaseCode := 0x5C00 ;
  end method ;
}

#----------------------------------------------------*

class @instruction_SUBWFB extends @instruction_FDA {
  override method getBaseCode !@uint outBaseCode :
    outBaseCode := 0x5800 ;
  end method ;
}

#----------------------------------------------------*

class @instruction_SWAPF extends @instruction_FDA {
  override method getBaseCode !@uint outBaseCode :
    outBaseCode := 0x3800 ;
  end method ;
}

#----------------------------------------------------*

class @instruction_XORWF extends @instruction_FDA {
  override method getBaseCode !@uint outBaseCode :
    outBaseCode := 0x1800 ;
  end method ;
}

#----------------------------------------------------*

abstract class @instruction_FA extends @instruction {
  @registerExpression mRegisterExpression ;
}

#----------------------------------------------------*

class @instruction_CLRF extends @instruction_FA {
}

#----------------------------------------------------*

class @instruction_CPFSEQ extends @instruction_FA {
}

#----------------------------------------------------*

class @instruction_CPFSGT extends @instruction_FA {
}

#----------------------------------------------------*

class @instruction_CPFSLT extends @instruction_FA {
}

#----------------------------------------------------*

class @instruction_MOVWF extends @instruction_FA {
}

#----------------------------------------------------*

class @instruction_MULWF extends @instruction_FA {
}

#----------------------------------------------------*

class @instruction_NEGF extends @instruction_FA {
}

#----------------------------------------------------*

class @instruction_SETF extends @instruction_FA {
}

#----------------------------------------------------*

class @instruction_TSTFSZ extends @instruction_FA {
}

#----------------------------------------------------*

class @instruction_MOVFF extends @instruction {
  @registerExpression mSourceRegisterName ;
  @registerExpression mDestinationRegisterName ;
  
  override
  method instructionLength !@uint outLength :
    outLength := 4 ;
  end method ;
}

#----------------------------------------------------*

abstract class @bitNumberExpression {
}

#----------------------------------------------------*

class @bitNumberLiteralValue extends @bitNumberExpression {
  @luint mBitNumberLiteralValue ;
}

#----------------------------------------------------*

class @bitNumberLabelValue extends @bitNumberExpression {
  @lstring mBitNumberLabelValue ;
  @luint mBitNumberIndexValue ;
}

#----------------------------------------------------*

abstract class @instruction_FBA extends @instruction {
  @registerExpression mRegisterExpression ;
  @bitNumberExpression mBitNumber ;
}

#----------------------------------------------------*

class @instruction_BCF extends @instruction_FBA {
}

#----------------------------------------------------*

class @instruction_BSF extends @instruction_FBA {
}

#----------------------------------------------------*

class @instruction_BTFSC extends @instruction_FBA {
}

#----------------------------------------------------*

class @instruction_BTFSS extends @instruction_FBA {
}

#----------------------------------------------------*

class @instruction_BTG extends @instruction_FBA {
}

#----------------------------------------------------*

abstract class @instruction_conditionalBranch extends @instruction {
  @lstring mTargetLabel ;
}

#----------------------------------------------------*

class @instruction_BC extends @instruction_conditionalBranch {
}

#----------------------------------------------------*

class @instruction_BN extends @instruction_conditionalBranch {
}

#----------------------------------------------------*

class @instruction_BNC extends @instruction_conditionalBranch {
}

#----------------------------------------------------*

class @instruction_BNN extends @instruction_conditionalBranch {
}

#----------------------------------------------------*

class @instruction_BNOV extends @instruction_conditionalBranch {
}

#----------------------------------------------------*

class @instruction_BNZ extends @instruction_conditionalBranch {
}

#----------------------------------------------------*

class @instruction_BOV extends @instruction_conditionalBranch {
}

#----------------------------------------------------*

class @instruction_BZ extends @instruction_conditionalBranch {
}

#----------------------------------------------------*

class @instruction_BRA extends @instruction {
  @lstring mTargetLabel ;
}

#----------------------------------------------------*

class @instruction_CALL extends @instruction {
  @lstring mTargetLabel ;
  override
  method instructionLength !@uint outLength :
    outLength := 4 ;
  end method ;
}

#----------------------------------------------------*

class @instruction_GOTO extends @instruction {
  @lstring mTargetLabel ;
  override
  method instructionLength !@uint outLength :
    outLength := 4 ;
  end method ;
}

#----------------------------------------------------*

class @instruction_RCALL extends @instruction {
  @lstring mTargetLabel ;
}

#----------------------------------------------------*

class @instruction_CLRWDT extends @instruction {
}

#----------------------------------------------------*

class @instruction_DAW extends @instruction {
}

#----------------------------------------------------*

class @instruction_NOP extends @instruction {
}

#----------------------------------------------------*

class @instruction_POP extends @instruction {
}

#----------------------------------------------------*

class @instruction_PUSH extends @instruction {
}

#----------------------------------------------------*

class @instruction_RESET extends @instruction {
}

#----------------------------------------------------*

class @instruction_RETURN extends @instruction {
}

#----------------------------------------------------*

class @instruction_SLEEP extends @instruction {
}

#----------------------------------------------------*

abstract class @instruction_literalOperation extends @instruction {
  @luint mLiteralValue ;
}

#----------------------------------------------------*

class @instruction_ADDLW extends @instruction_literalOperation {
}

#----------------------------------------------------*

class @instruction_ANDLW extends @instruction_literalOperation {
}

#----------------------------------------------------*

class @instruction_IORLW extends @instruction_literalOperation {
}

#----------------------------------------------------*

class @instruction_MOVLW extends @instruction_literalOperation {
}

#----------------------------------------------------*

class @instruction_MULLW extends @instruction_literalOperation {
}

#----------------------------------------------------*

class @instruction_RETLW extends @instruction_literalOperation {
}

#----------------------------------------------------*

class @instruction_SUBLW extends @instruction_literalOperation {
}

#----------------------------------------------------*

class @instruction_XORLW extends @instruction_literalOperation {
}

#----------------------------------------------------*

class @instruction_LFSR extends @instruction {
  @luint mFSRindex ;
  @registerExpression mRegisterExpression ;
  
  override
  method instructionLength !@uint outLength :
    outLength := 4 ;
  end method ;
}

#----------------------------------------------------*

class @instruction_MOVLB extends @instruction {
  @luint mPageIndex ;
}

#----------------------------------------------------*

class @instruction_LABEL extends @instruction {
  @lstring mTargetLabel ;

  override
  method instructionLength !@uint outLength :
    outLength := 0 ;
  end method ;
}

#----------------------------------------------------*

class @instruction_MOVAW extends @instruction {
  @registerExpression mRegisterExpression ;
}

#----------------------------------------------------*

enum @tableAccessOption {
  constructor simpleAccess ;
  constructor postIncrement ;
  constructor postDecrement ;
  constructor preIncrement ;
}{
}

#----------------------------------------------------*

class @instruction_TBLRD extends @instruction {
  @tableAccessOption mOption ;
}

#----------------------------------------------------*

class @instruction_TBLWT extends @instruction {
  @tableAccessOption mOption ;
}

#----------------------------------------------------*

list @interruptDefinitionList {
  @instructionList mInstructionList ;
}

#----------------------------------------------------*

list @routineDefinitionList {
  @lstring mRoutineName ;
  @luint mBanksel ;
  @instructionList mInstructionList ;
}

#----------------------------------------------------*

list @ramDefinitionList {
  @lstring mName ;
  @luint mSize ;
}

#----------------------------------------------------*

struct @piccoloModel {
  @lstring mProgramName ;
  @lstring mDeviceName ;
  @ramDefinitionList mRamDefinitionList ;
  @interruptDefinitionList mInterruptDefinitionList ;
  @routineDefinitionList mRoutineDefinitionList ;
}

#----------------------------------------------------*

end semantics ;
