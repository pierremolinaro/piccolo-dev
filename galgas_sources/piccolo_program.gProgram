program piccolo_program "version PICCOLO_BETA_VERSION":

#--- Import clauses
import semantics piccolo_metamodel in "piccolo_metamodel.gSemantics" ;
import semantics pic18_semantics in "pic18_semantics.gSemantics" ;
import grammar piccolo_grammar in "piccolo_grammar.gGrammar" ;

#--- Prologue routine
before {
#------------------------------------------------ Print supported device list
  if [option piccolo_options.ouputDeviceList] then
  #--- Enumerate devices
    @stringlist allDevices := [[filewrapper embeddedDevices] allFilePathes] ;
    @stringlist pic18_devices [emptyList] ;
    @stringlist midrange_devices [emptyList] ;
    @stringlist baseline_devices [emptyList] ;
  #--- Parse them
    @bool ok := true ;
    foreach allDevices while ok do
      @piccoloDeviceModel piccoloDeviceModel ;
      @string name := [[mValue lastPathComponent] stringByDeletingPathExtension] ;
      parseDeviceDefinition ![@lstring new !name !here] ?piccoloDeviceModel ;
      switch [piccoloDeviceModel mProcessorType]
      when pic18_60, pic18_80 : pic18_devices += !name ;
      when midrange : midrange_devices += !name ;
      when baseline : baseline_devices += !name ;
      end switch ;
    end foreach ;
  #--- Print baseline device list
    message [[baseline_devices length] string] . " baseline devices supported by Piccolo " . [@string stringWithVersionString] . ":\n" ;
    @uint index := 0 ;
    foreach baseline_devices do
      message [mValue stringByRightPadding !15 !' '] ;
      index ++ ;
      if index == 5 then
        index := 0 ;
        message "\n" ;
      end if ;
    end foreach ;
    if index != 0 then
      message "\n" ;
    end if ;
  #--- Print mid-range device list
    message [[midrange_devices length] string] . " mid-range devices supported by Piccolo " . [@string stringWithVersionString] . ":\n" ;
    index := 0 ;
    foreach midrange_devices do
      message [mValue stringByRightPadding !15 !' '] ;
      index ++ ;
      if index == 5 then
        index := 0 ;
        message "\n" ;
      end if ;
    end foreach ;
    if index != 0 then
      message "\n" ;
    end if ;
  #--- Print pic18 device list
    message [[pic18_devices length] string] . " pic18 devices supported by Piccolo " . [@string stringWithVersionString] . ":\n" ;
    index := 0 ;
    foreach pic18_devices do
      message [mValue stringByRightPadding !15 !' '] ;
      index ++ ;
      if index == 5 then
        index := 0 ;
        message "\n" ;
      end if ;
    end foreach ;
    if index != 0 then
      message "\n" ;
    end if ;
  #---
  end if ;
#------------------------------------------------ Export Device definition files
  if [[option piccolo_options.exportDeviceFiles] length] > 0 then
    @string dir := [option piccolo_options.exportDeviceFiles] ;
    if not [dir directoryExists] then
      [dir makeDirectory] ;
    end if ;
    @filewrapper fw := [filewrapper embeddedDevices] ;
    @stringlist allDevices := [[filewrapper embeddedDevices] allFilePathes] ;
    foreach allDevices do
      @string definitionString := [fw fileContentsAtPath !mValue] ;
      [definitionString writeToFile !dir . mValue] ;
    end foreach ;
    message [[allDevices length] string] . " devices copied in '" . dir . "' directory\n" ;
  end if ;
#------------------------------------------------ Print RAM description
  @string deviceForMemoryDescription := [option piccolo_options.memoryDescription] ;
  if [deviceForMemoryDescription length] > 0 then
    @string devicePath := "/" . deviceForMemoryDescription . ".piccoloDevice" ;
    if [[filewrapper embeddedDevices] fileExistsAtPath !devicePath] then
      @piccoloDeviceModel piccoloDeviceModel ;
      parseDeviceDefinition ![@lstring new !deviceForMemoryDescription !here] ?piccoloDeviceModel ;
      @uint totalRam := 0 ;
      foreach [piccoloDeviceModel mRamBankTable] do
        totalRam  := totalRam  + mLastAddressPlusOne - mFirstFreeAddress ;
      end foreach ;
      message deviceForMemoryDescription . " device:\n" ;
      message "  " . [[[piccoloDeviceModel mRamBankTable] count] string] . " RAM banks (total " . [totalRam string] . " bytes):\n" ;
      foreach [piccoloDeviceModel mRamBankTable] do
        message "    bank \"" . key . "\" from " . [mFirstFreeAddress hexString]
        . " to " . [mLastAddressPlusOne-1 hexString]
        . " (" . [mLastAddressPlusOne-mFirstFreeAddress string] . " bytes)" ;
        foreach mMirrorOffsetList
        before  message ", mirror at " ;
        do message [mFirstFreeAddress  + mValue hexString] ;
        between message ", " ;
        end foreach ;
        message "\n" ;
      end foreach ;
      message "  ROM size: " . [[[piccoloDeviceModel mRomSize] uint] string] . " bytes\n" ;
      if [piccoloDeviceModel mEepromSize] == 0 then
        message "  No EEPROM\n" ;
      else
        message "  EEPROM size: " . [[piccoloDeviceModel mEepromSize] string] . " bytes (at "
        . [[piccoloDeviceModel mEepromAddress] hexString] . ")\n" ;
      end if ;
    else
      error here:"The " . deviceForMemoryDescription . " device is not supported or does not exist" ;
    end if ;
  end if ;
#------------------------------------------------ Print REGISTERS description
  @string deviceForRegistersDescription := [option piccolo_options.registerDescription] ;
  if [deviceForRegistersDescription length] > 0 then
    @string devicePath := "/" . deviceForRegistersDescription . ".piccoloDevice" ;
    if [[filewrapper embeddedDevices] fileExistsAtPath !devicePath] then
      @piccoloDeviceModel piccoloDeviceModel ;
      parseDeviceDefinition ![@lstring new ! deviceForRegistersDescription !here] ?piccoloDeviceModel ;
      message deviceForRegistersDescription . " has " . [[[piccoloDeviceModel mRegisterTable] count] string] . " special registers:\n" ;
      foreach [piccoloDeviceModel mRegisterTable] do
        @string s := "  '" . key . "' at " ;
        foreach mRegisterAddressList
        do s .= [mValue hexString] ;
        between s .= ", " ;
        end foreach ;
        s .= mBitDefinitionString . "\n" ;
        message s ;
      end foreach ;
    else
      error here:"The " . deviceForRegistersDescription . " device is not supported or does not exist" ;
    end if ;
  end if ;
#------------------------------------------------ Print CONFIGURATION description
  @string deviceForConfigDescription := [option piccolo_options.configDescription] ;
  if [deviceForConfigDescription length] > 0 then
    @string devicePath := "/" . deviceForConfigDescription . ".piccoloDevice" ;
    if [[filewrapper embeddedDevices] fileExistsAtPath !devicePath] then
      @piccoloDeviceModel piccoloDeviceModel ;
      parseDeviceDefinition ![@lstring new ! deviceForConfigDescription !here] ?piccoloDeviceModel ;
      message deviceForConfigDescription . " has " . [[[piccoloDeviceModel mConfigRegisterMap] count] string] . " configuration registers:\n" ;
      foreach [piccoloDeviceModel mConfigRegisterMap] do
        @string s := "REGISTER '" . key . "' at " . [[mRegisterAddress uint] hexString] . ", width " . [[mRegisterWidth uint] string] . "\n" ;
        foreach mIllegalMaskList do
          s .= "  illegal value " . [[mIllegalValue uint] hexString] . " mask " . [[mIllegalMask uint] hexString] . " description \"" . mDescription . "\"\n" ;
        end foreach ;
        foreach mConfigRegisterMaskMap do
          s .= "  setting '" . key . "': mask " . [[mMaskValue uint] hexString] . " description \"" . mDescription . "\"\n" ;
          foreach mFieldSettingMap do
            s .= "    value " . [mValue hexString] . " description \"" . key . "\"\n" ;
          end foreach ;
        end foreach ;
        message s ;
      end foreach ;
    else
      error here:"The " . deviceForConfigDescription . " device is not supported or does not exist" ;
    end if ;
  end if ;
}

#----------------------------------------------------------------------------*

when . "piccolo"
message "a source text file with the .piccolo extension"
??@lstring inSourceFile {
  grammar piccolo_grammar in inSourceFile ;
}

#----------------------------------------------------------------------------*

#--- Epilogue routine
after {
}

#----------------------------------------------------------------------------*

end program ;
