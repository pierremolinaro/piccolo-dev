//---------------------------------------------------------------------------*
//                                                                           *
//                             piccolo Project                               *
//                   Generated by GALGAS Project Creation                    *
//                      march 29th, 2008, at 21h55'21"                       *
//                                                                           *
//---------------------------------------------------------------------------*

#include "piccolo_semantics.h"
#include "utilities/MF_MemoryControl.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                  I N T E L    H E X    F O R M A T                        *
//                                                                           *
//---------------------------------------------------------------------------*
//                                                                           *
// References:                                                               *
//                                                                           *
//   http://www.kmitl.ac.th/~kswichit%20/illustrate/hex.htm                  *
//   http://en.wikipedia.org/wiki/.hex                                       *
//                                                                           *
//---------------------------------------------------------------------------*
//                                                                           *
// Address prefix example:                                                   *
// :020000041234B3                                                           *
//  |||  ||||  |||                                                           *
//  |||  ||||  ||++-> checksum (2's complement of 03+00+00+04+12+34)         *
//  |||  |||+--+-> 2 bytes of data : 12 34: fix the 16 upper bits of address *
//  |||  |++-> Record type 04                                                *
//  ||+--+-> Address (big endian) : 00 00 (should allways be zero)           *
//  ++-> Data bytes count (2)                                                *
//                                                                           *
// Data line example:                                                        *
//                                                                           *
// :03800000028100FA                                                         *
//  |||  ||||    |||                                                         *
//  |||  ||||    |++-> checksum (2's complement of 03+80+00+00+00+02+81+00)  *
//  |||  |||+----+-> 3 bytes of data : 02, 81, 00                            *
//  |||  |++-> Record type 00                                                *
//  ||+--+-> Address (big endian) : 80 00                                    *
//  ++-> Data bytes count (3)                                                *
//                                                                           *
// End of file example:                                                      *
//                                                                           *
// :00000001FF                                                               *
//  |||  |||||                                                               *
//  |||  |||++-> checksum (2's complement of 00+00+00+01)                    *
//  |||  |++-> Record type 01: end of file                                   *
//  ||+--+-> Address (big endian) : 00 00                                    *
//  ++-> Data bytes count (0)                                                *
//                                                                           *
//---------------------------------------------------------------------------*

static unsigned char gBuffer [16] ;
static uint32 gBufferEntryCount = 0 ;
static uint32 gBufferAddress = 0 ;
static uint32 gCurrentBufferHighAddress = 0 ;
static C_String gGeneratedObjectCode ;

//---------------------------------------------------------------------------*

static void enter_04_record (void) {
  if (gCurrentBufferHighAddress != (gBufferAddress & 0xFFFF0000)) {
    char s [20] ; sprintf (s, ":02000004%04X", gBufferAddress >> 16) ;
    gGeneratedObjectCode << s ;
    unsigned char somme = 2 + 4 ;
    somme += (gBufferAddress >> 24) & 255 ;
    somme += (gBufferAddress >> 16) & 255 ;
    sprintf (s, "%02X", (- somme) & 255) ;
    gGeneratedObjectCode << s << "\n" ;
    gCurrentBufferHighAddress = (gBufferAddress & 0xFFFF0000) ;
  }
}

//---------------------------------------------------------------------------*

static void flushBuffer (void) {
  if (gBufferEntryCount > 0) {
    if (gGeneratedObjectCode.length () == 0) {
      gGeneratedObjectCode << ":020000040000FA\n" ;
    }
    char s [20] ; sprintf (s, ":%02X%04X00", gBufferEntryCount, gBufferAddress & 0x0000FFFF) ;
    unsigned char somme = gBufferEntryCount ;
    somme += (gBufferAddress >> 8) & 255 ;
    somme += gBufferAddress & 255 ;
    gGeneratedObjectCode << s ;
    for (uint32 i=0 ; i<gBufferEntryCount ; i++) {
      const unsigned char c = gBuffer [i] ;
      sprintf (s, "%02X", c) ; gGeneratedObjectCode << s ;
      somme += c ;
    }
    sprintf (s, "%02X", (- somme) & 255) ; gGeneratedObjectCode << s << "\n" ;
    gBufferAddress += gBufferEntryCount ;
    gBufferEntryCount = 0 ;
    enter_04_record () ;
  }
}

//---------------------------------------------------------------------------*

static void enterByte (const unsigned char inByte) {
  if ((gBufferEntryCount == 16) || (gCurrentBufferHighAddress != ((gBufferAddress + gBufferEntryCount) & 0xFFFF0000))) {
    flushBuffer () ;
  }
  gBuffer [gBufferEntryCount] = inByte ;
  gBufferEntryCount ++ ;
}

//---------------------------------------------------------------------------*

void routine_setEmitAddress (C_Compiler & /* inLexique */,
                             const GGS_uint inAddress
                             COMMA_UNUSED_LOCATION_ARGS) {
  flushBuffer () ;
  gBufferAddress = inAddress.uintValue () ;
  enter_04_record () ;
}

//---------------------------------------------------------------------------*

void routine_currentEmitAddress (C_Compiler & /* inLexique */,
                                 GGS_uint & outAddress
                             COMMA_UNUSED_LOCATION_ARGS) {
  outAddress = GGS_uint (true, gBufferAddress + gBufferEntryCount) ;
}

//---------------------------------------------------------------------------*

void routine_emitCode (C_Compiler & inLexique,
                       const GGS_uint inCode
                       COMMA_LOCATION_ARGS) {
  if ((inCode.uintValue () >> 16) != 0) {
    C_String errorMessage ;
    errorMessage << "Internal error: code (" << inCode.uintValue () << ") greater than 2**16-1" ;
    inLexique.onTheFlySemanticError (errorMessage COMMA_THERE) ;
  }
  const unsigned char lowByte = inCode.uintValue () & 255 ;
  const unsigned char highByte = (inCode.uintValue () >> 8) & 255 ;
  enterByte (lowByte) ;
  enterByte (highByte) ;
}

//---------------------------------------------------------------------------*

void routine_getGeneratedContents (C_Compiler & /* inLexique */,
                                   GGS_string & outFileName
                                   COMMA_UNUSED_LOCATION_ARGS) {
  flushBuffer () ;
  gGeneratedObjectCode << ":00000001FF\n" ;
//  printf ("--- CODE --\n") ;
//  printf ("%s", gGeneratedObjectCode.cString ()) ;
//  printf ("-----------\n") ;
  outFileName = GGS_string (true, gGeneratedObjectCode) ;
}

//---------------------------------------------------------------------------*

