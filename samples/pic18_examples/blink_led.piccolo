#----------------------------------------------------------------------------*
#                                                                            *
#            PROGRAMME D'EXEMPLE "BLINK_LED" (POUR 18F448)                   *
#                                                                            *
# Ce simple programme fait clignoter a 1 Hz une led connectee au port RE0    *
# Il programme donc RE0 (broche 8) en sortie.                                *
#                                                                            *
# La configuration suppose qu'il est connecte a une horloge externe a 40MHz  *
# sur la broche 13.                                                          *
#                                                                            *
# La boucle infinie compte le temps en decrementant un mot de 24 bits,       *
# contenu dans compteurL (poids faible), compteurH et compteurU (poids fort) *
# Quand le compteur atteint zero, il est recharge a 1 000 000 = 0xF4240, ce  *
# permet d'avoir une periode de clignotement de 1 Hz environ.                *
#                                                                            *
#----------------------------------------------------------------------------*

# L’en-tête du programme contient le nom du fichier contenant le texte source,
# puis, dans une chaîne de caractères, la référence au micro-contrôleur.

# Cette référence définit complètement le micro-contrôleur : ses registres
# spéciaux, ses registres de configuration, les bancs de mémoire vive,
# la taille de sa rom, …

#Pour connaître la liste des micro-contrôleurs pic18 pris en charge :
#      piccolo --pic18

pic18 blink_led "18F448" :

#----------------------------------------------------------------------------*
#                                                                            *
#                  CONFIGURATION DU MICRO-CONTROLEUR                         *
#                                                                            *
#----------------------------------------------------------------------------*

# Une section 'configuration' définit les valeurs associées aux registres de
# configuration. Les valeurs ainsi définies sont intégrées dans le fichier
# hex et le fichier assembleur engendrés.# Pour connaître la liste des registres de configuration d’un micro-contrôleur :#	piccolo -F=18F448

# La définition de la configuration est une liste d’affectations du type :#	setting : description#où setting est le nom d’un champ d’un registre de configuration, et
# description la chaîne de caractères qui décrit la valeur choisie.

configuration {
  OSC : "EC-OSC2 as RA6"
  OSCS : Disabled
  WDT : "Disabled-Controlled by SWDTEN bit"
  WDTPS : "1:128"
  STVR : Disabled
  LVP : Disabled
  CP_0 : Disabled
  CP_1 : Disabled
  CP_2 : Disabled
  CP_3 : Disabled
  WRT_1 : Disabled
  WRT_2 : Disabled
  WRT_3 : Disabled
  WRT_0 : Disabled
  EBTR_0 : Disabled
  EBTR_1 : Disabled
  EBTR_2 : Disabled
  EBTR_3 : Disabled
  BACKBUG : Disabled
  BODEN : Disabled
  BODENV : "4.5V"
  CPB : Disabled
  CPD : Disabled
  EBTRB : Disabled
  PUT : Enabled
  WRTB : Disabled
  WRTC : Disabled
  WRTD : Disabled
}

#----------------------------------------------------------------------------*
#                                                                            *
#                                  RAM                                       *
#                                                                            *
#----------------------------------------------------------------------------*

# Une section ram décrit l’attribution de la RAM du micro-contrôleur.# Le nom accesram est le nom de l’un des bancs définis par le micro-contrôleur,
# qui commence à l’adresse zéro. Les adresses sont allouées séquentiellement :
# compteurL a pour adresse 0, compteurH a pour adresse 1, …# Pour connaître la configuration mémoire d’un micro-contrôleur,
# utilisez l’option « -M » :#       piccolo -M=18F448

ram accessram {
  byte compteurL
  byte compteurH
  byte compteurU
}

#----------------------------------------------------------------------------*
#                                                                            *
#                                MAIN                                        *
#                                                                            *
#----------------------------------------------------------------------------*

# Une section routine définit du code exécutable. Dans un programme, il y a
# au moins une routine qui s’appelle obligatoirement le nom « main ».
# Celle-ci est exécutée au démarrage du micro-contrôleur. # Elle porte le qualificatif « noreturn » parce que son exécution ne doit 
# jamais terminer, ce que le compilateur Piccolo vérifie 
#(sa dernière instruction est une boucle infinie).# L’en-tête de la routine « main » contient aussi obligatoirement la
# déclaration « bank:requires 0 » qui traduit le fait qu’au démarrage,
# le registre BSR est initialisé à zéro (BSR est sans importance dans ce
# programme d’exemple, tous les accès se font via l’acces bank).# À côté des instructions assembleur, on trouve une instruction « if »
# structurée, dont les conditions cachent une utilisation de
# l’instruction TSTFSZ.
noreturn routine main bank:requires 0 {
#--- Aucune entree analogique
  MOVLW 7
  MOVWF ADCON1
#--- Programmer RE0 en sortie
  BCF  TRISE.0
#--- Initialiser les compteurs
  CLRF compteurL
  CLRF compteurH
  CLRF compteurU
#--- Boucle infinie
  forever
    if (compteurL NZ)
      DECF compteurL
    elsif (compteurH NZ)
      DECF compteurH
      SETF compteurL
    elsif (compteurU NZ)
      DECF compteurU
      SETF compteurH
      SETF compteurL
    else
    #--- Reinitialiser les compteurs
      MOVLW  0x0F
      MOVWF  compteurU
      MOVLW  0x42
      MOVWF  compteurH
      MOVLW  0x40
      MOVWF  compteurL
    #--- Clignoter
      BTG  PORTE.0
    end
  end
}

#----------------------------------------------------------------------------*

# Le « end » final termine le programme.

end