#----------------------------------------------------------------------------*
#                                                                            *
#            PROGRAMME D'EXEMPLE "BLINK_LED_IT"                              *
#                                                                            *
# Ce simple programme fait clignoter a 4 Hz une led connectee au port RE0    *
# Il programme donc RE0 (broche 8) en sortie.                                *
#                                                                            *
# La configuration suppose qu'il est connecte à une horloge externe à 40MHz  *
# sur la broche 13.                                                          *
#                                                                            *
# Un sous-programme d'interruption est déclenché toutes les 0,1 ms par le    *
# timer 2.                                                                   *
#                                                                            *
# Pour illustrer les instructions de gestion des bancs, les deux             *
# variables sont placées dans le banc 2.                                     *
#                                                                            *
# Supprimez ou déplacez les instructions "banksel", pour mettre en évidence  *
# les vérifications faites par le compilateur.                               *
#                                                                            *
#----------------------------------------------------------------------------*

pic18 blink_led_it_18F448 "18F448" :

#----------------------------------------------------------------------------*
#                                                                            *
#                  CONFIGURATION DU MICRO-CONTROLEUR                         *
#                                                                            *
#----------------------------------------------------------------------------*

configuration {
  OSC : "EC oscillator w/ OSC2 configured as RA6"
  OSCS : Disabled
  WDT : Disabled
  WDTPS : "1:128"
  STVR : Disabled
  LVP : Disabled
  CP0 : Disabled
  CP1 : Disabled
  CPB : Disabled
  CPD : Disabled
  WRT0 : Disabled
  WRT1 : Disabled
  WRTB : Disabled
  WRTC : Disabled
  WRTD : Disabled
  EBTR0 : Disabled
  EBTR1 : Disabled
  EBTRB : Disabled
  DEBUG : Disabled
  BOR : Disabled
  BORV : "VBOR set to 4.5V"
  PWRT : Enabled
  RESERVED : "Maintain bits as 1s."
  RESERVED_CONFIG6L : "Maintain bits as 1s."
  RESERVED_CONFIG7L : "Maintain bits as 1s."
}

#----------------------------------------------------------------------------*
#                                                                            *
#                                  RAM                                       *
#                                                                            *
#----------------------------------------------------------------------------*

# Une section ram décrit l’attribution de la RAM du micro-contrôleur.
# Le nom gpr2 est le nom du banc qui commence à l’adresse 0x200. Les adresses
# sont allouées séquentiellement : compteurL a pour adresse 0x200,
# et compteurH a pour adresse 0x201.
# Ces deux registres ne seront donc accessibles que via le registre BSR.

ram gpr2 {
  byte compteurL
  byte compteurH
}

#----------------------------------------------------------------------------*
#                                                                            *
#                       SOUS-PROGRAMME D'INTERRUPTION                        *
#                                                                            *
#----------------------------------------------------------------------------*

#Une section « interrupt » définit un sous-programme d’interruption. Il porte
# le nom « high », ce qui signifie qu’il est attaché au point d’entrée
# d’adresse 0x8. Il porte aussi le qualificatif « fast », ce qui signifie
# que l’instruction RETFIE 1 sera engendrée pour effectuer le retour
# d’interruption.

# Dans un programme plus complexe, il n’est pas possible de prévoir à la
# compilation la valeur de BSR quand une interruption survient.
# Aussi l’instruction « banksel 2 » est obligatoire avant d’adresser
# les registres du compteur (essayez de la supprimer…)

interrupt high fast {
#------------------------------ Acquitter l'interruption du timer 2
  BCF  PIR1.TMR2IF
#------------------------------ Decompter le temps
  banksel 2
  if (compteurL NZ)
    DECF compteurL
  elsif (compteurH NZ)
    DECF compteurH
    SETF compteurL
  else
  #--- Reinitialiser les compteurs
    MOVLW  0x13
    MOVWF  compteurH
    MOVLW  0x87
    MOVWF  compteurL
  #--- Clignoter
    BTG  PORTE.0
  end
}

#----------------------------------------------------------------------------*
#                                                                            *
#                                MAIN                                        *
#                                                                            *
#----------------------------------------------------------------------------*

# Deux commentaires : ici aussi, l’instruction « banksel 2 » est obligatoire
# avant d’adresser les registres du compteur (essayez de la supprimer…) ;
# tous les autres accès s’effectuant via l’acces bank, il n’est pas nécessaire
# de changer la valeur de BSR.

# L’instruction
#       MOVLW  @T2CON (TOUTPS:0, TMR2ON:1, T2CKPS:1)
# est particulière : elle permet de construire une valeur immédiate champ
# par champ.

noreturn routine main bank:requires 0 {
#--- Aucune entree analogique
  MOVLW 7
  MOVWF ADCON1
#--- Programmer RE0 en sortie
  BCF  TRISE.0
#--- Initialiser les compteurs
  banksel 2
  CLRF compteurL
  CLRF compteurH
#--- Initialiser le Timer 2
#  On veut des interruptions à la fréquence de 10 kHz
#  Horloge de base : Fosc = 40 MHz / 4 = 10 MHz
#  Fréquence des instruuptions : Focs / (prescaler * (PR2 + 1))
#  Le Prescaler est fixe à 4 -> 2 500 kHz
#  PR2 est fixé à 250-1 -> 10 kHz
  MOVLW  250 - 1 # La periode est PR2 + 1
  MOVWF  PR2
  MOVLW  T2CON (TOUTPS:0, TMR2ON:1, T2CKPS:1) # New syntax in 3.1.0
#--- On Piccolo < 3.1.0 : MOVLW  @ T2CON (TOUTPS:0, TMR2ON:1, T2CKPS:1)
  MOVWF  T2CON  
#--- Autoriser les priorites d'interruption
  BSF  RCON.IPEN
#--- Autoriser l'interruption en provenance du Timer 2
  BSF  PIE1.TMR2IE
#--- Valider les its
  BSF  INTCON.GIEH
#--- Boucle infinie
  forever
  end
}

#----------------------------------------------------------------------------*

end